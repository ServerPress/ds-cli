.\" Automatically generated by Pod::Man 2.23 (Pod::Simple 3.14)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Git::SVN::Fetcher 3"
.TH Git::SVN::Fetcher 3 "2016-01-04" "perl v5.12.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Git::SVN::Fetcher \- tree delta consumer for "git svn fetch"
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 5
\&    use SVN::Core;
\&    use SVN::Ra;
\&    use Git::SVN;
\&    use Git::SVN::Fetcher;
\&    use Git;
\&
\&    my $gs = Git::SVN\->find_by_url($url);
\&    my $ra = SVN::Ra\->new(url => $url);
\&    my $editor = Git::SVN::Fetcher\->new($gs);
\&    my $reporter = $ra\->do_update($SVN::Core::INVALID_REVNUM, \*(Aq\*(Aq,
\&                                  1, $editor);
\&    $reporter\->set_path(\*(Aq\*(Aq, $old_rev, 0);
\&    $reporter\->finish_report;
\&    my $tree = $gs\->tmp_index_do(sub { command_oneline(\*(Aqwrite\-tree\*(Aq) });
\&
\&    foreach my $path (keys %{$editor\->{dir_prop}) {
\&        my $props = $editor\->{dir_prop}{$path};
\&        foreach my $prop (keys %$props) {
\&            print "property $prop at $path changed to $props\->{$prop}\en";
\&        }
\&    }
\&    foreach my $path (keys %{$editor\->{empty}) {
\&        my $action = $editor\->{empty}{$path} ? \*(Aqadded\*(Aq : \*(Aqremoved\*(Aq;
\&        print "empty directory $path $action\en";
\&    }
\&    foreach my $path (keys %{$editor\->{file_prop}) { ... }
\&    foreach my $parent (keys %{$editor\->{absent_dir}}) {
\&        my @children = @{$editor\->{abstent_dir}{$parent}};
\&        print "cannot fetch directory $parent/$_: not authorized?\en"
\&            foreach @children;
\&    }
\&    foreach my $parent (keys %{$editor\->{absent_file}) { ... }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This is a subclass of \f(CW\*(C`SVN::Delta::Editor\*(C'\fR, which means it implements
callbacks to act as a consumer of Subversion tree deltas.  This
particular implementation of those callbacks is meant to store
information about the resulting content which \fBgit svn fetch\fR could
use to populate new commits and new entries for \fIunhandled.log\fR.
More specifically:
.IP "\(bu" 4
Additions, removals, and modifications of files are propagated
to git-svn's index file \fI\f(CI$GIT_DIR\fI/svn/$refname/index\fR using
\&\fBgit update-index\fR.
.IP "\(bu" 4
Changes in Subversion path properties are recorded in the
\&\f(CW\*(C`dir_prop\*(C'\fR and \f(CW\*(C`file_prop\*(C'\fR fields (which are hashes).
.IP "\(bu" 4
Addition and removal of empty directories are indicated by
entries with value 1 and 0 respectively in the \f(CW\*(C`empty\*(C'\fR hash.
.IP "\(bu" 4
Paths that are present but cannot be conveyed (presumably due
to permissions) are recorded in the \f(CW\*(C`absent_file\*(C'\fR and
\&\f(CW\*(C`absent_dirs\*(C'\fR hashes.  For each key, the corresponding value is
a list of paths under that directory that were present but
could not be conveyed.
.PP
The interface is unstable.  Do not use this module unless you are
developing git-svn.
.SH "DEPENDENCIES"
.IX Header "DEPENDENCIES"
SVN::Delta from the Subversion perl bindings,
the core Carp and File::Basename modules,
and git's Git helper module.
.PP
\&\f(CW\*(C`Git::SVN::Fetcher\*(C'\fR has not been tested using callers other than
\&\fBgit-svn\fR itself.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
SVN::Delta,
Git::SVN::Editor.
.SH "INCOMPATIBILITIES"
.IX Header "INCOMPATIBILITIES"
None reported.
.SH "BUGS"
.IX Header "BUGS"
None.
