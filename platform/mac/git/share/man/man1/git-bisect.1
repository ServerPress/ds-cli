'\" t
.\"     Title: git-bisect
.\"    Author: [FIXME: author] [see http://docbook.sf.net/el/author]
.\" Generator: DocBook XSL Stylesheets v1.78.1 <http://docbook.sf.net/>
.\"      Date: 11/05/2015
.\"    Manual: Git Manual
.\"    Source: Git 2.6.3
.\"  Language: English
.\"
.TH "GIT\-BISECT" "1" "11/05/2015" "Git 2\&.6\&.3" "Git Manual"
.\" -----------------------------------------------------------------
.\" * Define some portability stuff
.\" -----------------------------------------------------------------
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.\" http://bugs.debian.org/507673
.\" http://lists.gnu.org/archive/html/groff/2009-02/msg00013.html
.\" ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\" -----------------------------------------------------------------
.\" * set default formatting
.\" -----------------------------------------------------------------
.\" disable hyphenation
.nh
.\" disable justification (adjust text to left margin only)
.ad l
.\" -----------------------------------------------------------------
.\" * MAIN CONTENT STARTS HERE *
.\" -----------------------------------------------------------------
.SH "NAME"
git-bisect \- Use binary search to find the commit that introduced a bug
.SH "SYNOPSIS"
.sp
.nf
\fIgit bisect\fR <subcommand> <options>
.fi
.sp
.SH "DESCRIPTION"
.sp
The command takes various subcommands, and different options depending on the subcommand:
.sp
.if n \{\
.RS 4
.\}
.nf
git bisect start [\-\-no\-checkout] [<bad> [<good>\&.\&.\&.]] [\-\-] [<paths>\&.\&.\&.]
git bisect bad [<rev>]
git bisect good [<rev>\&.\&.\&.]
git bisect skip [(<rev>|<range>)\&.\&.\&.]
git bisect reset [<commit>]
git bisect visualize
git bisect replay <logfile>
git bisect log
git bisect run <cmd>\&.\&.\&.
git bisect help
.fi
.if n \{\
.RE
.\}
.sp
This command uses a binary search algorithm to find which commit in your project\(cqs history introduced a bug\&. You use it by first telling it a "bad" commit that is known to contain the bug, and a "good" commit that is known to be before the bug was introduced\&. Then git bisect picks a commit between those two endpoints and asks you whether the selected commit is "good" or "bad"\&. It continues narrowing down the range until it finds the exact commit that introduced the change\&.
.SS "Basic bisect commands: start, bad, good"
.sp
As an example, suppose you are trying to find the commit that broke a feature that was known to work in version v2\&.6\&.13\-rc2 of your project\&. You start a bisect session as follows:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect start
$ git bisect bad                 # Current version is bad
$ git bisect good v2\&.6\&.13\-rc2    # v2\&.6\&.13\-rc2 is known to be good
.fi
.if n \{\
.RE
.\}
.sp
.sp
Once you have specified at least one bad and one good commit, git bisect selects a commit in the middle of that range of history, checks it out, and outputs something similar to the following:
.sp
.if n \{\
.RS 4
.\}
.nf
Bisecting: 675 revisions left to test after this (roughly 10 steps)
.fi
.if n \{\
.RE
.\}
.sp
.sp
You should now compile the checked\-out version and test it\&. If that version works correctly, type
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect good
.fi
.if n \{\
.RE
.\}
.sp
.sp
If that version is broken, type
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect bad
.fi
.if n \{\
.RE
.\}
.sp
.sp
Then git bisect will respond with something like
.sp
.if n \{\
.RS 4
.\}
.nf
Bisecting: 337 revisions left to test after this (roughly 9 steps)
.fi
.if n \{\
.RE
.\}
.sp
.sp
Keep repeating the process: compile the tree, test it, and depending on whether it is good or bad run git bisect good or git bisect bad to ask for the next commit that needs testing\&.
.sp
Eventually there will be no more revisions left to inspect, and the command will print out a description of the first bad commit\&. The reference refs/bisect/bad will be left pointing at that commit\&.
.SS "Bisect reset"
.sp
After a bisect session, to clean up the bisection state and return to the original HEAD, issue the following command:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect reset
.fi
.if n \{\
.RE
.\}
.sp
.sp
By default, this will return your tree to the commit that was checked out before git bisect start\&. (A new git bisect start will also do that, as it cleans up the old bisection state\&.)
.sp
With an optional argument, you can return to a different commit instead:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect reset <commit>
.fi
.if n \{\
.RE
.\}
.sp
.sp
For example, git bisect reset bisect/bad will check out the first bad revision, while git bisect reset HEAD will leave you on the current bisection commit and avoid switching commits at all\&.
.SS "Bisect visualize"
.sp
To see the currently remaining suspects in \fIgitk\fR, issue the following command during the bisection process:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect visualize
.fi
.if n \{\
.RE
.\}
.sp
.sp
view may also be used as a synonym for visualize\&.
.sp
If the \fIDISPLAY\fR environment variable is not set, \fIgit log\fR is used instead\&. You can also give command\-line options such as \-p and \-\-stat\&.
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect view \-\-stat
.fi
.if n \{\
.RE
.\}
.sp
.SS "Bisect log and bisect replay"
.sp
After having marked revisions as good or bad, issue the following command to show what has been done so far:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect log
.fi
.if n \{\
.RE
.\}
.sp
.sp
If you discover that you made a mistake in specifying the status of a revision, you can save the output of this command to a file, edit it to remove the incorrect entries, and then issue the following commands to return to a corrected state:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect reset
$ git bisect replay that\-file
.fi
.if n \{\
.RE
.\}
.sp
.SS "Avoiding testing a commit"
.sp
If, in the middle of a bisect session, you know that the suggested revision is not a good one to test (e\&.g\&. it fails to build and you know that the failure does not have anything to do with the bug you are chasing), you can manually select a nearby commit and test that one instead\&.
.sp
For example:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect good/bad                   # previous round was good or bad\&.
Bisecting: 337 revisions left to test after this (roughly 9 steps)
$ git bisect visualize                  # oops, that is uninteresting\&.
$ git reset \-\-hard HEAD~3               # try 3 revisions before what
                                        # was suggested
.fi
.if n \{\
.RE
.\}
.sp
.sp
Then compile and test the chosen revision, and afterwards mark the revision as good or bad in the usual manner\&.
.SS "Bisect skip"
.sp
Instead of choosing a nearby commit by yourself, you can ask Git to do it for you by issuing the command:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect skip                 # Current version cannot be tested
.fi
.if n \{\
.RE
.\}
.sp
.sp
However, if you skip a commit adjacent to the one you are looking for, Git will be unable to tell exactly which of those commits was the first bad one\&.
.sp
You can also skip a range of commits, instead of just one commit, using range notation\&. For example:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect skip v2\&.5\&.\&.v2\&.6
.fi
.if n \{\
.RE
.\}
.sp
.sp
This tells the bisect process that no commit after v2\&.5, up to and including v2\&.6, should be tested\&.
.sp
Note that if you also want to skip the first commit of the range you would issue the command:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect skip v2\&.5 v2\&.5\&.\&.v2\&.6
.fi
.if n \{\
.RE
.\}
.sp
.sp
This tells the bisect process that the commits between v2\&.5 and v2\&.6 (inclusive) should be skipped\&.
.SS "Cutting down bisection by giving more parameters to bisect start"
.sp
You can further cut down the number of trials, if you know what part of the tree is involved in the problem you are tracking down, by specifying path parameters when issuing the bisect start command:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect start \-\- arch/i386 include/asm\-i386
.fi
.if n \{\
.RE
.\}
.sp
.sp
If you know beforehand more than one good commit, you can narrow the bisect space down by specifying all of the good commits immediately after the bad commit when issuing the bisect start command:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect start v2\&.6\&.20\-rc6 v2\&.6\&.20\-rc4 v2\&.6\&.20\-rc1 \-\-
                   # v2\&.6\&.20\-rc6 is bad
                   # v2\&.6\&.20\-rc4 and v2\&.6\&.20\-rc1 are good
.fi
.if n \{\
.RE
.\}
.sp
.SS "Bisect run"
.sp
If you have a script that can tell if the current source code is good or bad, you can bisect by issuing the command:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect run my_script arguments
.fi
.if n \{\
.RE
.\}
.sp
.sp
Note that the script (my_script in the above example) should exit with code 0 if the current source code is good/old, and exit with a code between 1 and 127 (inclusive), except 125, if the current source code is bad/new\&.
.sp
Any other exit code will abort the bisect process\&. It should be noted that a program that terminates via exit(\-1) leaves $? = 255, (see the exit(3) manual page), as the value is chopped with & 0377\&.
.sp
The special exit code 125 should be used when the current source code cannot be tested\&. If the script exits with this code, the current revision will be skipped (see git bisect skip above)\&. 125 was chosen as the highest sensible value to use for this purpose, because 126 and 127 are used by POSIX shells to signal specific error status (127 is for command not found, 126 is for command found but not executable\(emthese details do not matter, as they are normal errors in the script, as far as bisect run is concerned)\&.
.sp
You may often find that during a bisect session you want to have temporary modifications (e\&.g\&. s/#define DEBUG 0/#define DEBUG 1/ in a header file, or "revision that does not have this commit needs this patch applied to work around another problem this bisection is not interested in") applied to the revision being tested\&.
.sp
To cope with such a situation, after the inner \fIgit bisect\fR finds the next revision to test, the script can apply the patch before compiling, run the real test, and afterwards decide if the revision (possibly with the needed patch) passed the test and then rewind the tree to the pristine state\&. Finally the script should exit with the status of the real test to let the git bisect run command loop determine the eventual outcome of the bisect session\&.
.SH "OPTIONS"
.PP
\-\-no\-checkout
.RS 4
Do not checkout the new working tree at each iteration of the bisection process\&. Instead just update a special reference named
\fIBISECT_HEAD\fR
to make it point to the commit that should be tested\&.
.sp
This option may be useful when the test you would perform in each step does not require a checked out tree\&.
.sp
If the repository is bare,
\-\-no\-checkout
is assumed\&.
.RE
.SH "EXAMPLES"
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Automatically bisect a broken build between v1\&.2 and HEAD:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect start HEAD v1\&.2 \-\-      # HEAD is bad, v1\&.2 is good
$ git bisect run make                # "make" builds the app
$ git bisect reset                   # quit the bisect session
.fi
.if n \{\
.RE
.\}
.sp
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Automatically bisect a test failure between origin and HEAD:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect start HEAD origin \-\-    # HEAD is bad, origin is good
$ git bisect run make test           # "make test" builds and tests
$ git bisect reset                   # quit the bisect session
.fi
.if n \{\
.RE
.\}
.sp
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Automatically bisect a broken test case:
.sp
.if n \{\
.RS 4
.\}
.nf
$ cat ~/test\&.sh
#!/bin/sh
make || exit 125                     # this skips broken builds
~/check_test_case\&.sh                 # does the test case pass?
$ git bisect start HEAD HEAD~10 \-\-   # culprit is among the last 10
$ git bisect run ~/test\&.sh
$ git bisect reset                   # quit the bisect session
.fi
.if n \{\
.RE
.\}
.sp
Here we use a
test\&.sh
custom script\&. In this script, if
make
fails, we skip the current commit\&.
check_test_case\&.sh
should
exit 0
if the test case passes, and
exit 1
otherwise\&.
.sp
It is safer if both
test\&.sh
and
check_test_case\&.sh
are outside the repository to prevent interactions between the bisect, make and test processes and the scripts\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Automatically bisect with temporary modifications (hot\-fix):
.sp
.if n \{\
.RS 4
.\}
.nf
$ cat ~/test\&.sh
#!/bin/sh

# tweak the working tree by merging the hot\-fix branch
# and then attempt a build
if      git merge \-\-no\-commit hot\-fix &&
        make
then
        # run project specific test and report its status
        ~/check_test_case\&.sh
        status=$?
else
        # tell the caller this is untestable
        status=125
fi

# undo the tweak to allow clean flipping to the next commit
git reset \-\-hard

# return control
exit $status
.fi
.if n \{\
.RE
.\}
.sp
This applies modifications from a hot\-fix branch before each test run, e\&.g\&. in case your build or test environment changed so that older revisions may need a fix which newer ones have already\&. (Make sure the hot\-fix branch is based off a commit which is contained in all revisions which you are bisecting, so that the merge does not pull in too much, or use
git cherry\-pick
instead of
git merge\&.)
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Automatically bisect a broken test case:
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect start HEAD HEAD~10 \-\-   # culprit is among the last 10
$ git bisect run sh \-c "make || exit 125; ~/check_test_case\&.sh"
$ git bisect reset                   # quit the bisect session
.fi
.if n \{\
.RE
.\}
.sp
This shows that you can do without a run script if you write the test on a single line\&.
.RE
.sp
.RS 4
.ie n \{\
\h'-04'\(bu\h'+03'\c
.\}
.el \{\
.sp -1
.IP \(bu 2.3
.\}
Locate a good region of the object graph in a damaged repository
.sp
.if n \{\
.RS 4
.\}
.nf
$ git bisect start HEAD <known\-good\-commit> [ <boundary\-commit> \&.\&.\&. ] \-\-no\-checkout
$ git bisect run sh \-c \*(Aq
        GOOD=$(git for\-each\-ref "\-\-format=%(objectname)" refs/bisect/good\-*) &&
        git rev\-list \-\-objects BISECT_HEAD \-\-not $GOOD >tmp\&.$$ &&
        git pack\-objects \-\-stdout >/dev/null <tmp\&.$$
        rc=$?
        rm \-f tmp\&.$$
        test $rc = 0\*(Aq

$ git bisect reset                   # quit the bisect session
.fi
.if n \{\
.RE
.\}
.sp
In this case, when
\fIgit bisect run\fR
finishes, bisect/bad will refer to a commit that has at least one parent whose reachable graph is fully traversable in the sense required by
\fIgit pack objects\fR\&.
.RE
.SS "Getting help"
.sp
Use git bisect to get a short usage description, and git bisect help or git bisect \-h to get a long usage description\&.
.SH "SEE ALSO"
.sp
\m[blue]\fBFighting regressions with git bisect\fR\m[]\&\s-2\u[1]\d\s+2, \fBgit-blame\fR(1)\&.
.SH "GIT"
.sp
Part of the \fBgit\fR(1) suite
.SH "NOTES"
.IP " 1." 4
Fighting regressions with git bisect
.RS 4
\%git-htmldocs/git-bisect-lk2009.html
.RE
