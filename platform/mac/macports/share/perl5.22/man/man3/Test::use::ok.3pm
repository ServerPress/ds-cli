.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Test::use::ok 3"
.TH Test::use::ok 3 "2014-12-28" "perl v5.22.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Test::use::ok \- Alternative to Test::More::use_ok
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use ok \*(AqSome::Module\*(Aq;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
According to the \fBTest::More\fR documentation, it is recommended to run
\&\f(CW\*(C`use_ok()\*(C'\fR inside a \f(CW\*(C`BEGIN\*(C'\fR block, so functions are exported at
compile-time and prototypes are properly honored.
.PP
That is, instead of writing this:
.PP
.Vb 2
\&    use_ok( \*(AqSome::Module\*(Aq );
\&    use_ok( \*(AqOther::Module\*(Aq );
.Ve
.PP
One should write this:
.PP
.Vb 2
\&    BEGIN { use_ok( \*(AqSome::Module\*(Aq ); }
\&    BEGIN { use_ok( \*(AqOther::Module\*(Aq ); }
.Ve
.PP
However, people often either forget to add \f(CW\*(C`BEGIN\*(C'\fR, or mistakenly group
\&\f(CW\*(C`use_ok\*(C'\fR with other tests in a single \f(CW\*(C`BEGIN\*(C'\fR block, which can create subtle
differences in execution order.
.PP
With this module, simply change all \f(CW\*(C`use_ok\*(C'\fR in test scripts to \f(CW\*(C`use ok\*(C'\fR,
and they will be executed at \f(CW\*(C`BEGIN\*(C'\fR time.  The explicit space after \f(CW\*(C`use\*(C'\fR
makes it clear that this is a single compile-time action.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Test::More
.SH "MAINTAINER"
.IX Header "MAINTAINER"
.IP "Chad Granum <exodist@cpan.org>" 4
.IX Item "Chad Granum <exodist@cpan.org>"
.SH "CC0 1.0 Universal"
.IX Header "CC0 1.0 Universal"
To the extent possible under law, 唐鳳 has waived all copyright and related
or neighboring rights to Test-use-ok.
.PP
This work is published from Taiwan.
.PP
<http://creativecommons.org/publicdomain/zero/1.0>
