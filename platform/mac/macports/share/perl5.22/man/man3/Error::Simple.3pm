.\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Error::Simple 3"
.TH Error::Simple 3 "2015-05-30" "perl v5.22.0" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Error::Simple \- the simple error sub\-class of Error
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    use base \*(AqError::Simple\*(Aq;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
The only purpose of this module is to allow one to say:
.PP
.Vb 1
\&    use base \*(AqError::Simple\*(Aq;
.Ve
.PP
and the only thing it does is \*(L"use\*(R" Error.pm. Refer to the documentation
of Error for more information about Error::Simple.
.SH "METHODS"
.IX Header "METHODS"
.ie n .SS "Error::Simple\->new($text [, $value])"
.el .SS "Error::Simple\->new($text [, \f(CW$value\fP])"
.IX Subsection "Error::Simple->new($text [, $value])"
Constructs an Error::Simple with the text \f(CW$text\fR and the optional value
\&\f(CW$value\fR.
.ie n .SS "$err\->\fIstringify()\fP"
.el .SS "\f(CW$err\fP\->\fIstringify()\fP"
.IX Subsection "$err->stringify()"
Error::Simple overloads this method.
.SH "KNOWN BUGS"
.IX Header "KNOWN BUGS"
None.
.SH "AUTHORS"
.IX Header "AUTHORS"
Shlomi Fish ( <http://www.shlomifish.org/> )
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Error
