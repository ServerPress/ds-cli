This is gnutls.info, produced by makeinfo version 5.2 from gnutls.texi.

This manual is last updated 23 March 2015 for version 3.3.15 of GnuTLS.

Copyright (C) 2001-2013 Free Software Foundation, Inc.\\ Copyright (C)
2001-2013 Nikos Mavrogiannopoulos

     Permission is granted to copy, distribute and/or modify this
     document under the terms of the GNU Free Documentation License,
     Version 1.3 or any later version published by the Free Software
     Foundation; with no Invariant Sections, no Front-Cover Texts, and
     no Back-Cover Texts.  A copy of the license is included in the
     section entitled "GNU Free Documentation License".
INFO-DIR-SECTION Software libraries
START-INFO-DIR-ENTRY
* GnuTLS: (gnutls).		GNU Transport Layer Security Library.
END-INFO-DIR-ENTRY

INFO-DIR-SECTION System Administration
START-INFO-DIR-ENTRY
* certtool: (gnutls)Invoking certtool.	Manipulate certificates and keys.
* gnutls-serv: (gnutls)Invoking gnutls-serv.	GnuTLS test server.
* gnutls-cli: (gnutls)Invoking gnutls-cli.	GnuTLS test client.
* gnutls-cli-debug: (gnutls)Invoking gnutls-cli-debug.	GnuTLS debug client.
* psktool: (gnutls)Invoking psktool.	Simple TLS-Pre-Shared-Keys manager.
* srptool: (gnutls)Invoking srptool.	Simple SRP password tool.
END-INFO-DIR-ENTRY


File: gnutls.info,  Node: TPM API,  Next: Abstract key API,  Prev: PKCS 11 API,  Up: API reference

E.8 TPM API
===========

The following functions are to be used for TPM handling.  Their
prototypes lie in 'gnutls/tpm.h'.

gnutls_tpm_get_registered
-------------------------

 -- Function: int gnutls_tpm_get_registered (gnutls_tpm_key_list_t *
          LIST)
     LIST: a list to store the keys

     This function will get a list of stored keys in the TPM. The uuid
     of those keys

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.1.0

gnutls_tpm_key_list_deinit
--------------------------

 -- Function: void gnutls_tpm_key_list_deinit (gnutls_tpm_key_list_t
          LIST)
     LIST: a list of the keys

     This function will deinitialize the list of stored keys in the TPM.

     *Since:* 3.1.0

gnutls_tpm_key_list_get_url
---------------------------

 -- Function: int gnutls_tpm_key_list_get_url (gnutls_tpm_key_list_t
          LIST, unsigned int IDX, char ** URL, unsigned int FLAGS)
     LIST: a list of the keys

     IDX: The index of the key (starting from zero)

     URL: The URL to be returned

     FLAGS: should be zero

     This function will return for each given index a URL of the
     corresponding key.  If the provided index is out of bounds then
     'GNUTLS_E_REQUESTED_DATA_NOT_AVAILABLE' is returned.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.1.0

gnutls_tpm_privkey_delete
-------------------------

 -- Function: int gnutls_tpm_privkey_delete (const char * URL, const
          char * SRK_PASSWORD)
     URL: the URL describing the key

     SRK_PASSWORD: a password for the SRK key

     This function will unregister the private key from the TPM chip.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.1.0

gnutls_tpm_privkey_generate
---------------------------

 -- Function: int gnutls_tpm_privkey_generate (gnutls_pk_algorithm_t PK,
          unsigned int BITS, const char * SRK_PASSWORD, const char *
          KEY_PASSWORD, gnutls_tpmkey_fmt_t FORMAT,
          gnutls_x509_crt_fmt_t PUB_FORMAT, gnutls_datum_t * PRIVKEY,
          gnutls_datum_t * PUBKEY, unsigned int FLAGS)
     PK: the public key algorithm

     BITS: the security bits

     SRK_PASSWORD: a password to protect the exported key (optional)

     KEY_PASSWORD: the password for the TPM (optional)

     FORMAT: the format of the private key

     PUB_FORMAT: the format of the public key

     PRIVKEY: the generated key

     PUBKEY: the corresponding public key (may be null)

     FLAGS: should be a list of GNUTLS_TPM_* flags

     This function will generate a private key in the TPM chip.  The
     private key will be generated within the chip and will be exported
     in a wrapped with TPM's master key form.  Furthermore the wrapped
     key can be protected with the provided 'password' .

     Note that bits in TPM is quantized value.  If the input value is
     not one of the allowed values, then it will be quantized to one of
     512, 1024, 2048, 4096, 8192 and 16384.

     Allowed flags are:

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.1.0


File: gnutls.info,  Node: Abstract key API,  Next: DANE API,  Prev: TPM API,  Up: API reference

E.9 Abstract key API
====================

The following functions are to be used for abstract key handling.  Their
prototypes lie in 'gnutls/abstract.h'.

gnutls_certificate_set_key
--------------------------

 -- Function: int gnutls_certificate_set_key
          (gnutls_certificate_credentials_t RES, const char ** NAMES,
          int NAMES_SIZE, gnutls_pcert_st * PCERT_LIST, int
          PCERT_LIST_SIZE, gnutls_privkey_t KEY)
     RES: is a 'gnutls_certificate_credentials_t' structure.

     NAMES: is an array of DNS name of the certificate (NULL if none)

     NAMES_SIZE: holds the size of the names list

     PCERT_LIST: contains a certificate list (path) for the specified
     private key

     PCERT_LIST_SIZE: holds the size of the certificate list

     KEY: is a 'gnutls_privkey_t' key

     This function sets a certificate/private key pair in the
     gnutls_certificate_credentials_t structure.  This function may be
     called more than once, in case multiple keys/certificates exist for
     the server.  For clients that wants to send more than its own end
     entity certificate (e.g., also an intermediate CA cert) then put
     the certificate chain in 'pcert_list' .

     Note that the 'pcert_list' and 'key' will become part of the
     credentials structure and must not be deallocated.  They will be
     automatically deallocated when the 'res' structure is
     deinitialized.

     If that function fails to load the 'res' structure is at an
     undefined state, it must not be reused to load other keys or
     certificates.

     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success, or a negative error
     code.

     *Since:* 3.0

gnutls_certificate_set_retrieve_function2
-----------------------------------------

 -- Function: void gnutls_certificate_set_retrieve_function2
          (gnutls_certificate_credentials_t CRED,
          gnutls_certificate_retrieve_function2 * FUNC)
     CRED: is a 'gnutls_certificate_credentials_t' structure.

     FUNC: is the callback function

     This function sets a callback to be called in order to retrieve the
     certificate to be used in the handshake.

     The callback's function prototype is: int
     (*callback)(gnutls_session_t, const gnutls_datum_t* req_ca_dn, int
     nreqs, const gnutls_pk_algorithm_t* pk_algos, int pk_algos_length,
     gnutls_pcert_st** pcert, unsigned int *pcert_length,
     gnutls_privkey_t * pkey);

     'req_ca_cert' is only used in X.509 certificates.  Contains a list
     with the CA names that the server considers trusted.  Normally we
     should send a certificate that is signed by one of these CAs.
     These names are DER encoded.  To get a more meaningful value use
     the function 'gnutls_x509_rdn_get()' .

     'pk_algos' contains a list with server's acceptable signature
     algorithms.  The certificate returned should support the server's
     given algorithms.

     'pcert' should contain a single certificate and public or a list of
     them.

     'pcert_length' is the size of the previous list.

     'pkey' is the private key.

     If the callback function is provided then gnutls will call it, in
     the handshake, after the certificate request message has been
     received.  All the provided by the callback values will not be
     released or modified by gnutls.

     In server side pk_algos and req_ca_dn are NULL.

     The callback function should set the certificate list to be sent,
     and return 0 on success.  If no certificate was selected then the
     number of certificates should be set to zero.  The value (-1)
     indicates error and the handshake will be terminated.

     *Since:* 3.0

gnutls_pcert_deinit
-------------------

 -- Function: void gnutls_pcert_deinit (gnutls_pcert_st * PCERT)
     PCERT: The structure to be deinitialized

     This function will deinitialize a pcert structure.

     *Since:* 3.0

gnutls_pcert_import_openpgp
---------------------------

 -- Function: int gnutls_pcert_import_openpgp (gnutls_pcert_st * PCERT,
          gnutls_openpgp_crt_t CRT, unsigned int FLAGS)
     PCERT: The pcert structure

     CRT: The raw certificate to be imported

     FLAGS: zero for now

     This convenience function will import the given certificate to a
     'gnutls_pcert_st' structure.  The structure must be deinitialized
     afterwards using 'gnutls_pcert_deinit()' ;

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.0

gnutls_pcert_import_openpgp_raw
-------------------------------

 -- Function: int gnutls_pcert_import_openpgp_raw (gnutls_pcert_st *
          PCERT, const gnutls_datum_t * CERT, gnutls_openpgp_crt_fmt_t
          FORMAT, gnutls_openpgp_keyid_t KEYID, unsigned int FLAGS)
     PCERT: The pcert structure

     CERT: The raw certificate to be imported

     FORMAT: The format of the certificate

     KEYID: The key ID to use (NULL for the master key)

     FLAGS: zero for now

     This convenience function will import the given certificate to a
     'gnutls_pcert_st' structure.  The structure must be deinitialized
     afterwards using 'gnutls_pcert_deinit()' ;

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.0

gnutls_pcert_import_x509
------------------------

 -- Function: int gnutls_pcert_import_x509 (gnutls_pcert_st * PCERT,
          gnutls_x509_crt_t CRT, unsigned int FLAGS)
     PCERT: The pcert structure

     CRT: The raw certificate to be imported

     FLAGS: zero for now

     This convenience function will import the given certificate to a
     'gnutls_pcert_st' structure.  The structure must be deinitialized
     afterwards using 'gnutls_pcert_deinit()' ;

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.0

gnutls_pcert_import_x509_raw
----------------------------

 -- Function: int gnutls_pcert_import_x509_raw (gnutls_pcert_st * PCERT,
          const gnutls_datum_t * CERT, gnutls_x509_crt_fmt_t FORMAT,
          unsigned int FLAGS)
     PCERT: The pcert structure

     CERT: The raw certificate to be imported

     FORMAT: The format of the certificate

     FLAGS: zero for now

     This convenience function will import the given certificate to a
     'gnutls_pcert_st' structure.  The structure must be deinitialized
     afterwards using 'gnutls_pcert_deinit()' ;

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.0

gnutls_pcert_list_import_x509_raw
---------------------------------

 -- Function: int gnutls_pcert_list_import_x509_raw (gnutls_pcert_st *
          PCERTS, unsigned int * PCERT_MAX, const gnutls_datum_t * DATA,
          gnutls_x509_crt_fmt_t FORMAT, unsigned int FLAGS)
     PCERTS: The structures to store the parsed certificate.  Must not
     be initialized.

     PCERT_MAX: Initially must hold the maximum number of certs.  It
     will be updated with the number of certs available.

     DATA: The certificates.

     FORMAT: One of DER or PEM.

     FLAGS: must be (0) or an OR'd sequence of
     gnutls_certificate_import_flags.

     This function will convert the given PEM encoded certificate list
     to the native gnutls_x509_crt_t format.  The output will be stored
     in 'certs' .  They will be automatically initialized.

     If the Certificate is PEM encoded it should have a header of "X509
     CERTIFICATE", or "CERTIFICATE".

     *Returns:* the number of certificates read or a negative error
     value.

     *Since:* 3.0

gnutls_privkey_decrypt_data
---------------------------

 -- Function: int gnutls_privkey_decrypt_data (gnutls_privkey_t KEY,
          unsigned int FLAGS, const gnutls_datum_t * CIPHERTEXT,
          gnutls_datum_t * PLAINTEXT)
     KEY: Holds the key

     FLAGS: zero for now

     CIPHERTEXT: holds the data to be decrypted

     PLAINTEXT: will contain the decrypted data, allocated with
     'gnutls_malloc()'

     This function will decrypt the given data using the algorithm
     supported by the private key.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_privkey_deinit
---------------------

 -- Function: void gnutls_privkey_deinit (gnutls_privkey_t KEY)
     KEY: The structure to be deinitialized

     This function will deinitialize a private key structure.

     *Since:* 2.12.0

gnutls_privkey_export_dsa_raw
-----------------------------

 -- Function: int gnutls_privkey_export_dsa_raw (gnutls_privkey_t KEY,
          gnutls_datum_t * P, gnutls_datum_t * Q, gnutls_datum_t * G,
          gnutls_datum_t * Y, gnutls_datum_t * X)
     KEY: Holds the public key

     P: will hold the p

     Q: will hold the q

     G: will hold the g

     Y: will hold the y

     X: will hold the x

     This function will export the DSA private key's parameters found in
     the given structure.  The new parameters will be allocated using
     'gnutls_malloc()' and will be stored in the appropriate datum.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.

     *Since:* 3.3.0

gnutls_privkey_export_ecc_raw
-----------------------------

 -- Function: int gnutls_privkey_export_ecc_raw (gnutls_privkey_t KEY,
          gnutls_ecc_curve_t * CURVE, gnutls_datum_t * X, gnutls_datum_t
          * Y, gnutls_datum_t * K)
     KEY: Holds the public key

     CURVE: will hold the curve

     X: will hold the x coordinate

     Y: will hold the y coordinate

     K: will hold the private key

     This function will export the ECC private key's parameters found in
     the given structure.  The new parameters will be allocated using
     'gnutls_malloc()' and will be stored in the appropriate datum.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.

     *Since:* 3.3.0

gnutls_privkey_export_rsa_raw
-----------------------------

 -- Function: int gnutls_privkey_export_rsa_raw (gnutls_privkey_t KEY,
          gnutls_datum_t * M, gnutls_datum_t * E, gnutls_datum_t * D,
          gnutls_datum_t * P, gnutls_datum_t * Q, gnutls_datum_t * U,
          gnutls_datum_t * E1, gnutls_datum_t * E2)
     KEY: Holds the certificate

     M: will hold the modulus

     E: will hold the public exponent

     D: will hold the private exponent

     P: will hold the first prime (p)

     Q: will hold the second prime (q)

     U: will hold the coefficient

     E1: will hold e1 = d mod (p-1)

     E2: will hold e2 = d mod (q-1)

     This function will export the RSA private key's parameters found in
     the given structure.  The new parameters will be allocated using
     'gnutls_malloc()' and will be stored in the appropriate datum.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.

     *Since:* 3.3.0

gnutls_privkey_generate
-----------------------

 -- Function: int gnutls_privkey_generate (gnutls_privkey_t PKEY,
          gnutls_pk_algorithm_t ALGO, unsigned int BITS, unsigned int
          FLAGS)
     PKEY: The private key

     ALGO: is one of the algorithms in 'gnutls_pk_algorithm_t' .

     BITS: the size of the modulus

     FLAGS: unused for now.  Must be 0.

     This function will generate a random private key.  Note that this
     function must be called on an empty private key.

     Note that when generating an elliptic curve key, the curve can be
     substituted in the place of the bits parameter using the
     'GNUTLS_CURVE_TO_BITS()' macro.

     Do not set the number of bits directly, use
     'gnutls_sec_param_to_pk_bits()' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.3.0

gnutls_privkey_get_pk_algorithm
-------------------------------

 -- Function: int gnutls_privkey_get_pk_algorithm (gnutls_privkey_t KEY,
          unsigned int * BITS)
     KEY: should contain a 'gnutls_privkey_t' structure

     BITS: If set will return the number of bits of the parameters (may
     be NULL)

     This function will return the public key algorithm of a private key
     and if possible will return a number of bits that indicates the
     security parameter of the key.

     *Returns:* a member of the 'gnutls_pk_algorithm_t' enumeration on
     success, or a negative error code on error.

     *Since:* 2.12.0

gnutls_privkey_get_type
-----------------------

 -- Function: gnutls_privkey_type_t gnutls_privkey_get_type
          (gnutls_privkey_t KEY)
     KEY: should contain a 'gnutls_privkey_t' structure

     This function will return the type of the private key.  This is
     actually the type of the subsystem used to set this private key.

     *Returns:* a member of the 'gnutls_privkey_type_t' enumeration on
     success, or a negative error code on error.

     *Since:* 2.12.0

gnutls_privkey_import_dsa_raw
-----------------------------

 -- Function: int gnutls_privkey_import_dsa_raw (gnutls_privkey_t KEY,
          const gnutls_datum_t * P, const gnutls_datum_t * Q, const
          gnutls_datum_t * G, const gnutls_datum_t * Y, const
          gnutls_datum_t * X)
     KEY: The structure to store the parsed key

     P: holds the p

     Q: holds the q

     G: holds the g

     Y: holds the y

     X: holds the x

     This function will convert the given DSA raw parameters to the
     native 'gnutls_privkey_t' format.  The output will be stored in
     'key' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_privkey_import_ecc_raw
-----------------------------

 -- Function: int gnutls_privkey_import_ecc_raw (gnutls_privkey_t KEY,
          gnutls_ecc_curve_t CURVE, const gnutls_datum_t * X, const
          gnutls_datum_t * Y, const gnutls_datum_t * K)
     KEY: The structure to store the parsed key

     CURVE: holds the curve

     X: holds the x

     Y: holds the y

     K: holds the k

     This function will convert the given elliptic curve parameters to
     the native 'gnutls_privkey_t' format.  The output will be stored in
     'key' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.0

gnutls_privkey_import_ext
-------------------------

 -- Function: int gnutls_privkey_import_ext (gnutls_privkey_t PKEY,
          gnutls_pk_algorithm_t PK, void * USERDATA,
          gnutls_privkey_sign_func SIGN_FUNC,
          gnutls_privkey_decrypt_func DECRYPT_FUNC, unsigned int FLAGS)
     PKEY: The private key

     PK: The public key algorithm

     USERDATA: private data to be provided to the callbacks

     SIGN_FUNC: callback for signature operations

     DECRYPT_FUNC: callback for decryption operations

     FLAGS: Flags for the import

     This function will associate the given callbacks with the
     'gnutls_privkey_t' structure.  At least one of the two callbacks
     must be non-null.

     See also 'gnutls_privkey_import_ext2()' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.0

gnutls_privkey_import_ext2
--------------------------

 -- Function: int gnutls_privkey_import_ext2 (gnutls_privkey_t PKEY,
          gnutls_pk_algorithm_t PK, void * USERDATA,
          gnutls_privkey_sign_func SIGN_FUNC,
          gnutls_privkey_decrypt_func DECRYPT_FUNC,
          gnutls_privkey_deinit_func DEINIT_FUNC, unsigned int FLAGS)
     PKEY: The private key

     PK: The public key algorithm

     USERDATA: private data to be provided to the callbacks

     SIGN_FUNC: callback for signature operations

     DECRYPT_FUNC: callback for decryption operations

     DEINIT_FUNC: a deinitialization function

     FLAGS: Flags for the import

     This function will associate the given callbacks with the
     'gnutls_privkey_t' structure.  At least one of the two callbacks
     must be non-null.  If a deinitialization function is provided then
     flags is assumed to contain 'GNUTLS_PRIVKEY_IMPORT_AUTO_RELEASE' .

     Note that the signing function is supposed to "raw" sign data,
     i.e., without any hashing or preprocessing.  In case of RSA the
     DigestInfo will be provided, and the signing function is expected
     to do the PKCS '1' 1.5 padding and the exponentiation.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.1

gnutls_privkey_import_openpgp
-----------------------------

 -- Function: int gnutls_privkey_import_openpgp (gnutls_privkey_t PKEY,
          gnutls_openpgp_privkey_t KEY, unsigned int FLAGS)
     PKEY: The private key

     KEY: The private key to be imported

     FLAGS: Flags for the import

     This function will import the given private key to the abstract
     'gnutls_privkey_t' structure.

     The 'gnutls_openpgp_privkey_t' object must not be deallocated
     during the lifetime of this structure.  The subkey set as preferred
     will be used, or the master key otherwise.

     'flags' might be zero or one of
     'GNUTLS_PRIVKEY_IMPORT_AUTO_RELEASE' and
     'GNUTLS_PRIVKEY_IMPORT_COPY' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_privkey_import_openpgp_raw
---------------------------------

 -- Function: int gnutls_privkey_import_openpgp_raw (gnutls_privkey_t
          PKEY, const gnutls_datum_t * DATA, gnutls_openpgp_crt_fmt_t
          FORMAT, const gnutls_openpgp_keyid_t KEYID, const char *
          PASSWORD)
     PKEY: The private key

     DATA: The private key data to be imported

     FORMAT: The format of the private key

     KEYID: The key id to use (optional)

     PASSWORD: A password (optional)

     This function will import the given private key to the abstract
     'gnutls_privkey_t' structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.1.0

gnutls_privkey_import_pkcs11
----------------------------

 -- Function: int gnutls_privkey_import_pkcs11 (gnutls_privkey_t PKEY,
          gnutls_pkcs11_privkey_t KEY, unsigned int FLAGS)
     PKEY: The private key

     KEY: The private key to be imported

     FLAGS: Flags for the import

     This function will import the given private key to the abstract
     'gnutls_privkey_t' structure.

     The 'gnutls_pkcs11_privkey_t' object must not be deallocated during
     the lifetime of this structure.

     'flags' might be zero or one of
     'GNUTLS_PRIVKEY_IMPORT_AUTO_RELEASE' and
     'GNUTLS_PRIVKEY_IMPORT_COPY' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_privkey_import_pkcs11_url
--------------------------------

 -- Function: int gnutls_privkey_import_pkcs11_url (gnutls_privkey_t
          KEY, const char * URL)
     KEY: A key of type 'gnutls_pubkey_t'

     URL: A PKCS 11 url

     This function will import a PKCS 11 private key to a
     'gnutls_private_key_t' structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.1.0

gnutls_privkey_import_rsa_raw
-----------------------------

 -- Function: int gnutls_privkey_import_rsa_raw (gnutls_privkey_t KEY,
          const gnutls_datum_t * M, const gnutls_datum_t * E, const
          gnutls_datum_t * D, const gnutls_datum_t * P, const
          gnutls_datum_t * Q, const gnutls_datum_t * U, const
          gnutls_datum_t * E1, const gnutls_datum_t * E2)
     KEY: The structure to store the parsed key

     M: holds the modulus

     E: holds the public exponent

     D: holds the private exponent

     P: holds the first prime (p)

     Q: holds the second prime (q)

     U: holds the coefficient (optional)

     E1: holds e1 = d mod (p-1) (optional)

     E2: holds e2 = d mod (q-1) (optional)

     This function will convert the given RSA raw parameters to the
     native 'gnutls_privkey_t' format.  The output will be stored in
     'key' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_privkey_import_tpm_raw
-----------------------------

 -- Function: int gnutls_privkey_import_tpm_raw (gnutls_privkey_t PKEY,
          const gnutls_datum_t * FDATA, gnutls_tpmkey_fmt_t FORMAT,
          const char * SRK_PASSWORD, const char * KEY_PASSWORD, unsigned
          int FLAGS)
     PKEY: The private key

     FDATA: The TPM key to be imported

     FORMAT: The format of the private key

     SRK_PASSWORD: The password for the SRK key (optional)

     KEY_PASSWORD: A password for the key (optional)

     FLAGS: should be zero

     This function will import the given private key to the abstract
     'gnutls_privkey_t' structure.

     With respect to passwords the same as in
     'gnutls_privkey_import_tpm_url()' apply.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.1.0

gnutls_privkey_import_tpm_url
-----------------------------

 -- Function: int gnutls_privkey_import_tpm_url (gnutls_privkey_t PKEY,
          const char * URL, const char * SRK_PASSWORD, const char *
          KEY_PASSWORD, unsigned int FLAGS)
     PKEY: The private key

     URL: The URL of the TPM key to be imported

     SRK_PASSWORD: The password for the SRK key (optional)

     KEY_PASSWORD: A password for the key (optional)

     FLAGS: One of the GNUTLS_PRIVKEY_* flags

     This function will import the given private key to the abstract
     'gnutls_privkey_t' structure.

     Note that unless 'GNUTLS_PRIVKEY_DISABLE_CALLBACKS' is specified,
     if incorrect (or NULL) passwords are given the PKCS11 callback
     functions will be used to obtain the correct passwords.  Otherwise
     if the SRK password is wrong 'GNUTLS_E_TPM_SRK_PASSWORD_ERROR' is
     returned and if the key password is wrong or not provided then
     'GNUTLS_E_TPM_KEY_PASSWORD_ERROR' is returned.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.1.0

gnutls_privkey_import_url
-------------------------

 -- Function: int gnutls_privkey_import_url (gnutls_privkey_t KEY, const
          char * URL, unsigned int FLAGS)
     KEY: A key of type 'gnutls_privkey_t'

     URL: A PKCS 11 url

     FLAGS: should be zero

     This function will import a PKCS11 or TPM URL as a private key.
     The supported URL types can be checked using
     'gnutls_url_is_supported()' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.1.0

gnutls_privkey_import_x509
--------------------------

 -- Function: int gnutls_privkey_import_x509 (gnutls_privkey_t PKEY,
          gnutls_x509_privkey_t KEY, unsigned int FLAGS)
     PKEY: The private key

     KEY: The private key to be imported

     FLAGS: Flags for the import

     This function will import the given private key to the abstract
     'gnutls_privkey_t' structure.

     The 'gnutls_x509_privkey_t' object must not be deallocated during
     the lifetime of this structure.

     'flags' might be zero or one of
     'GNUTLS_PRIVKEY_IMPORT_AUTO_RELEASE' and
     'GNUTLS_PRIVKEY_IMPORT_COPY' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_privkey_import_x509_raw
------------------------------

 -- Function: int gnutls_privkey_import_x509_raw (gnutls_privkey_t PKEY,
          const gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT,
          const char * PASSWORD, unsigned int FLAGS)
     PKEY: The private key

     DATA: The private key data to be imported

     FORMAT: The format of the private key

     PASSWORD: A password (optional)

     FLAGS: an ORed sequence of gnutls_pkcs_encrypt_flags_t

     This function will import the given private key to the abstract
     'gnutls_privkey_t' structure.

     The supported formats are basic unencrypted key, PKCS8, PKCS12, and
     the openssl format.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.1.0

gnutls_privkey_init
-------------------

 -- Function: int gnutls_privkey_init (gnutls_privkey_t * KEY)
     KEY: The structure to be initialized

     This function will initialize an private key structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_privkey_set_pin_function
-------------------------------

 -- Function: void gnutls_privkey_set_pin_function (gnutls_privkey_t
          KEY, gnutls_pin_callback_t FN, void * USERDATA)
     KEY: A key of type 'gnutls_privkey_t'

     FN: the callback

     USERDATA: data associated with the callback

     This function will set a callback function to be used when required
     to access the object.  This function overrides any other global PIN
     functions.

     Note that this function must be called right after initialization
     to have effect.

     *Since:* 3.1.0

gnutls_privkey_sign_data
------------------------

 -- Function: int gnutls_privkey_sign_data (gnutls_privkey_t SIGNER,
          gnutls_digest_algorithm_t HASH, unsigned int FLAGS, const
          gnutls_datum_t * DATA, gnutls_datum_t * SIGNATURE)
     SIGNER: Holds the key

     HASH: should be a digest algorithm

     FLAGS: Zero or one of 'gnutls_privkey_flags_t'

     DATA: holds the data to be signed

     SIGNATURE: will contain the signature allocate with
     'gnutls_malloc()'

     This function will sign the given data using a signature algorithm
     supported by the private key.  Signature algorithms are always used
     together with a hash functions.  Different hash functions may be
     used for the RSA algorithm, but only the SHA family for the DSA
     keys.

     You may use 'gnutls_pubkey_get_preferred_hash_algorithm()' to
     determine the hash algorithm.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_privkey_sign_hash
------------------------

 -- Function: int gnutls_privkey_sign_hash (gnutls_privkey_t SIGNER,
          gnutls_digest_algorithm_t HASH_ALGO, unsigned int FLAGS, const
          gnutls_datum_t * HASH_DATA, gnutls_datum_t * SIGNATURE)
     SIGNER: Holds the signer's key

     HASH_ALGO: The hash algorithm used

     FLAGS: Zero or one of 'gnutls_privkey_flags_t'

     HASH_DATA: holds the data to be signed

     SIGNATURE: will contain newly allocated signature

     This function will sign the given hashed data using a signature
     algorithm supported by the private key.  Signature algorithms are
     always used together with a hash functions.  Different hash
     functions may be used for the RSA algorithm, but only SHA-XXX for
     the DSA keys.

     You may use 'gnutls_pubkey_get_preferred_hash_algorithm()' to
     determine the hash algorithm.

     Note that if 'GNUTLS_PRIVKEY_SIGN_FLAG_TLS1_RSA' flag is specified
     this function will ignore 'hash_algo' and perform a raw PKCS1
     signature.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_privkey_status
---------------------

 -- Function: int gnutls_privkey_status (gnutls_privkey_t KEY)
     KEY: Holds the key

     Checks the status of the private key token.  This function is an
     actual wrapper over 'gnutls_pkcs11_privkey_status()' , and if the
     private key is a PKCS '11' token it will check whether it is
     inserted or not.

     *Returns:* this function will return non-zero if the token holding
     the private key is still available (inserted), and zero otherwise.

     *Since:* 3.1.10

gnutls_privkey_verify_params
----------------------------

 -- Function: int gnutls_privkey_verify_params (gnutls_privkey_t KEY)
     KEY: should contain a 'gnutls_privkey_t' structure

     This function will verify the private key parameters.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.3.0

gnutls_pubkey_deinit
--------------------

 -- Function: void gnutls_pubkey_deinit (gnutls_pubkey_t KEY)
     KEY: The structure to be deinitialized

     This function will deinitialize a public key structure.

     *Since:* 2.12.0

gnutls_pubkey_encrypt_data
--------------------------

 -- Function: int gnutls_pubkey_encrypt_data (gnutls_pubkey_t KEY,
          unsigned int FLAGS, const gnutls_datum_t * PLAINTEXT,
          gnutls_datum_t * CIPHERTEXT)
     KEY: Holds the public key

     FLAGS: should be 0 for now

     PLAINTEXT: The data to be encrypted

     CIPHERTEXT: contains the encrypted data

     This function will encrypt the given data, using the public key.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.0

gnutls_pubkey_export
--------------------

 -- Function: int gnutls_pubkey_export (gnutls_pubkey_t KEY,
          gnutls_x509_crt_fmt_t FORMAT, void * OUTPUT_DATA, size_t *
          OUTPUT_DATA_SIZE)
     KEY: Holds the certificate

     FORMAT: the format of output params.  One of PEM or DER.

     OUTPUT_DATA: will contain a certificate PEM or DER encoded

     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
     replaced by the actual size of parameters)

     This function will export the public key to DER or PEM format.  The
     contents of the exported data is the SubjectPublicKeyInfo X.509
     structure.

     If the buffer provided is not long enough to hold the output, then
     *output_data_size is updated and 'GNUTLS_E_SHORT_MEMORY_BUFFER'
     will be returned.

     If the structure is PEM encoded, it will have a header of "BEGIN
     CERTIFICATE".

     *Returns:* In case of failure a negative error code will be
     returned, and 0 on success.

     *Since:* 2.12.0

gnutls_pubkey_export2
---------------------

 -- Function: int gnutls_pubkey_export2 (gnutls_pubkey_t KEY,
          gnutls_x509_crt_fmt_t FORMAT, gnutls_datum_t * OUT)
     KEY: Holds the certificate

     FORMAT: the format of output params.  One of PEM or DER.

     OUT: will contain a certificate PEM or DER encoded

     This function will export the public key to DER or PEM format.  The
     contents of the exported data is the SubjectPublicKeyInfo X.509
     structure.

     The output buffer will be allocated using 'gnutls_malloc()' .

     If the structure is PEM encoded, it will have a header of "BEGIN
     CERTIFICATE".

     *Returns:* In case of failure a negative error code will be
     returned, and 0 on success.

     *Since:* 3.1.3

gnutls_pubkey_export_dsa_raw
----------------------------

 -- Function: int gnutls_pubkey_export_dsa_raw (gnutls_pubkey_t KEY,
          gnutls_datum_t * P, gnutls_datum_t * Q, gnutls_datum_t * G,
          gnutls_datum_t * Y)
     KEY: Holds the public key

     P: will hold the p

     Q: will hold the q

     G: will hold the g

     Y: will hold the y

     This function will export the DSA public key's parameters found in
     the given certificate.  The new parameters will be allocated using
     'gnutls_malloc()' and will be stored in the appropriate datum.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.

     *Since:* 3.3.0

gnutls_pubkey_export_ecc_raw
----------------------------

 -- Function: int gnutls_pubkey_export_ecc_raw (gnutls_pubkey_t KEY,
          gnutls_ecc_curve_t * CURVE, gnutls_datum_t * X, gnutls_datum_t
          * Y)
     KEY: Holds the public key

     CURVE: will hold the curve

     X: will hold x

     Y: will hold y

     This function will export the ECC public key's parameters found in
     the given certificate.  The new parameters will be allocated using
     'gnutls_malloc()' and will be stored in the appropriate datum.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.

     *Since:* 3.0

gnutls_pubkey_export_ecc_x962
-----------------------------

 -- Function: int gnutls_pubkey_export_ecc_x962 (gnutls_pubkey_t KEY,
          gnutls_datum_t * PARAMETERS, gnutls_datum_t * ECPOINT)
     KEY: Holds the public key

     PARAMETERS: DER encoding of an ANSI X9.62 parameters

     ECPOINT: DER encoding of ANSI X9.62 ECPoint

     This function will export the ECC public key's parameters found in
     the given certificate.  The new parameters will be allocated using
     'gnutls_malloc()' and will be stored in the appropriate datum.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.

     *Since:* 3.3.0

gnutls_pubkey_export_rsa_raw
----------------------------

 -- Function: int gnutls_pubkey_export_rsa_raw (gnutls_pubkey_t KEY,
          gnutls_datum_t * M, gnutls_datum_t * E)
     KEY: Holds the certificate

     M: will hold the modulus

     E: will hold the public exponent

     This function will export the RSA public key's parameters found in
     the given structure.  The new parameters will be allocated using
     'gnutls_malloc()' and will be stored in the appropriate datum.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.

     *Since:* 3.3.0

gnutls_pubkey_get_key_id
------------------------

 -- Function: int gnutls_pubkey_get_key_id (gnutls_pubkey_t KEY,
          unsigned int FLAGS, unsigned char * OUTPUT_DATA, size_t *
          OUTPUT_DATA_SIZE)
     KEY: Holds the public key

     FLAGS: should be 0 for now

     OUTPUT_DATA: will contain the key ID

     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
     replaced by the actual size of parameters)

     This function will return a unique ID that depends on the public
     key parameters.  This ID can be used in checking whether a
     certificate corresponds to the given public key.

     If the buffer provided is not long enough to hold the output, then
     *output_data_size is updated and 'GNUTLS_E_SHORT_MEMORY_BUFFER'
     will be returned.  The output will normally be a SHA-1 hash output,
     which is 20 bytes.

     *Returns:* In case of failure a negative error code will be
     returned, and 0 on success.

     *Since:* 2.12.0

gnutls_pubkey_get_key_usage
---------------------------

 -- Function: int gnutls_pubkey_get_key_usage (gnutls_pubkey_t KEY,
          unsigned int * USAGE)
     KEY: should contain a 'gnutls_pubkey_t' structure

     USAGE: If set will return the number of bits of the parameters (may
     be NULL)

     This function will return the key usage of the public key.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pubkey_get_openpgp_key_id
--------------------------------

 -- Function: int gnutls_pubkey_get_openpgp_key_id (gnutls_pubkey_t KEY,
          unsigned int FLAGS, unsigned char * OUTPUT_DATA, size_t *
          OUTPUT_DATA_SIZE, unsigned int * SUBKEY)
     KEY: Holds the public key

     FLAGS: should be 0 or 'GNUTLS_PUBKEY_GET_OPENPGP_FINGERPRINT'

     OUTPUT_DATA: will contain the key ID

     OUTPUT_DATA_SIZE: holds the size of output_data (and will be
     replaced by the actual size of parameters)

     SUBKEY: Will be non zero if the key ID corresponds to a subkey

     This function returns the OpenPGP key ID of the corresponding key.
     The key is a unique ID that depends on the public key parameters.

     If the flag 'GNUTLS_PUBKEY_GET_OPENPGP_FINGERPRINT' is specified
     this function returns the fingerprint of the master key.

     If the buffer provided is not long enough to hold the output, then
     *output_data_size is updated and 'GNUTLS_E_SHORT_MEMORY_BUFFER'
     will be returned.  The output is 'GNUTLS_OPENPGP_KEYID_SIZE' bytes
     long.

     *Returns:* In case of failure a negative error code will be
     returned, and 0 on success.

     *Since:* 3.0

gnutls_pubkey_get_pk_algorithm
------------------------------

 -- Function: int gnutls_pubkey_get_pk_algorithm (gnutls_pubkey_t KEY,
          unsigned int * BITS)
     KEY: should contain a 'gnutls_pubkey_t' structure

     BITS: If set will return the number of bits of the parameters (may
     be NULL)

     This function will return the public key algorithm of a public key
     and if possible will return a number of bits that indicates the
     security parameter of the key.

     *Returns:* a member of the 'gnutls_pk_algorithm_t' enumeration on
     success, or a negative error code on error.

     *Since:* 2.12.0

gnutls_pubkey_get_preferred_hash_algorithm
------------------------------------------

 -- Function: int gnutls_pubkey_get_preferred_hash_algorithm
          (gnutls_pubkey_t KEY, gnutls_digest_algorithm_t * HASH,
          unsigned int * MAND)
     KEY: Holds the certificate

     HASH: The result of the call with the hash algorithm used for
     signature

     MAND: If non zero it means that the algorithm MUST use this hash.
     May be NULL.

     This function will read the certifcate and return the appropriate
     digest algorithm to use for signing with this certificate.  Some
     certificates (i.e.  DSA might not be able to sign without the
     preferred algorithm).

     To get the signature algorithm instead of just the hash use
     'gnutls_pk_to_sign()' with the algorithm of the certificate/key and
     the provided 'hash' .

     *Returns:* the 0 if the hash algorithm is found.  A negative error
     code is returned on error.

     *Since:* 2.12.0

gnutls_pubkey_get_verify_algorithm
----------------------------------

 -- Function: int gnutls_pubkey_get_verify_algorithm (gnutls_pubkey_t
          KEY, const gnutls_datum_t * SIGNATURE,
          gnutls_digest_algorithm_t * HASH)
     KEY: Holds the certificate

     SIGNATURE: contains the signature

     HASH: The result of the call with the hash algorithm used for
     signature

     This function will read the certifcate and the signed data to
     determine the hash algorithm used to generate the signature.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pubkey_import
--------------------

 -- Function: int gnutls_pubkey_import (gnutls_pubkey_t KEY, const
          gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT)
     KEY: The structure to store the parsed public key.

     DATA: The DER or PEM encoded certificate.

     FORMAT: One of DER or PEM

     This function will import the provided public key in a
     SubjectPublicKeyInfo X.509 structure to a native 'gnutls_pubkey_t'
     structure.  The output will be stored in 'key' .  If the public key
     is PEM encoded it should have a header of "PUBLIC KEY".

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pubkey_import_dsa_raw
----------------------------

 -- Function: int gnutls_pubkey_import_dsa_raw (gnutls_pubkey_t KEY,
          const gnutls_datum_t * P, const gnutls_datum_t * Q, const
          gnutls_datum_t * G, const gnutls_datum_t * Y)
     KEY: The structure to store the parsed key

     P: holds the p

     Q: holds the q

     G: holds the g

     Y: holds the y

     This function will convert the given DSA raw parameters to the
     native 'gnutls_pubkey_t' format.  The output will be stored in
     'key' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pubkey_import_ecc_raw
----------------------------

 -- Function: int gnutls_pubkey_import_ecc_raw (gnutls_pubkey_t KEY,
          gnutls_ecc_curve_t CURVE, const gnutls_datum_t * X, const
          gnutls_datum_t * Y)
     KEY: The structure to store the parsed key

     CURVE: holds the curve

     X: holds the x

     Y: holds the y

     This function will convert the given elliptic curve parameters to a
     'gnutls_pubkey_t' .  The output will be stored in 'key' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.0

gnutls_pubkey_import_ecc_x962
-----------------------------

 -- Function: int gnutls_pubkey_import_ecc_x962 (gnutls_pubkey_t KEY,
          const gnutls_datum_t * PARAMETERS, const gnutls_datum_t *
          ECPOINT)
     KEY: The structure to store the parsed key

     PARAMETERS: DER encoding of an ANSI X9.62 parameters

     ECPOINT: DER encoding of ANSI X9.62 ECPoint

     This function will convert the given elliptic curve parameters to a
     'gnutls_pubkey_t' .  The output will be stored in 'key' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.0

gnutls_pubkey_import_openpgp
----------------------------

 -- Function: int gnutls_pubkey_import_openpgp (gnutls_pubkey_t KEY,
          gnutls_openpgp_crt_t CRT, unsigned int FLAGS)
     KEY: The public key

     CRT: The certificate to be imported

     FLAGS: should be zero

     Imports a public key from an openpgp key.  This function will
     import the given public key to the abstract 'gnutls_pubkey_t'
     structure.  The subkey set as preferred will be imported or the
     master key otherwise.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pubkey_import_openpgp_raw
--------------------------------

 -- Function: int gnutls_pubkey_import_openpgp_raw (gnutls_pubkey_t
          PKEY, const gnutls_datum_t * DATA, gnutls_openpgp_crt_fmt_t
          FORMAT, const gnutls_openpgp_keyid_t KEYID, unsigned int
          FLAGS)
     PKEY: The public key

     DATA: The public key data to be imported

     FORMAT: The format of the public key

     KEYID: The key id to use (optional)

     FLAGS: Should be zero

     This function will import the given public key to the abstract
     'gnutls_pubkey_t' structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.1.3

gnutls_pubkey_import_pkcs11
---------------------------

 -- Function: int gnutls_pubkey_import_pkcs11 (gnutls_pubkey_t KEY,
          gnutls_pkcs11_obj_t OBJ, unsigned int FLAGS)
     KEY: The public key

     OBJ: The parameters to be imported

     FLAGS: should be zero

     Imports a public key from a pkcs11 key.  This function will import
     the given public key to the abstract 'gnutls_pubkey_t' structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pubkey_import_pkcs11_url
-------------------------------

 -- Function: int gnutls_pubkey_import_pkcs11_url (gnutls_pubkey_t KEY,
          const char * URL, unsigned int FLAGS)
     KEY: A key of type 'gnutls_pubkey_t'

     URL: A PKCS 11 url

     FLAGS: One of GNUTLS_PKCS11_OBJ_* flags

     This function will import a PKCS 11 certificate to a
     'gnutls_pubkey_t' structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pubkey_import_privkey
----------------------------

 -- Function: int gnutls_pubkey_import_privkey (gnutls_pubkey_t KEY,
          gnutls_privkey_t PKEY, unsigned int USAGE, unsigned int FLAGS)
     KEY: The public key

     PKEY: The private key

     USAGE: GNUTLS_KEY_* key usage flags.

     FLAGS: should be zero

     Imports the public key from a private.  This function will import
     the given public key to the abstract 'gnutls_pubkey_t' structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pubkey_import_rsa_raw
----------------------------

 -- Function: int gnutls_pubkey_import_rsa_raw (gnutls_pubkey_t KEY,
          const gnutls_datum_t * M, const gnutls_datum_t * E)
     KEY: Is a structure will hold the parameters

     M: holds the modulus

     E: holds the public exponent

     This function will replace the parameters in the given structure.
     The new parameters should be stored in the appropriate
     gnutls_datum.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an negative error
     code.

     *Since:* 2.12.0

gnutls_pubkey_import_tpm_raw
----------------------------

 -- Function: int gnutls_pubkey_import_tpm_raw (gnutls_pubkey_t PKEY,
          const gnutls_datum_t * FDATA, gnutls_tpmkey_fmt_t FORMAT,
          const char * SRK_PASSWORD, unsigned int FLAGS)
     PKEY: The public key

     FDATA: The TPM key to be imported

     FORMAT: The format of the private key

     SRK_PASSWORD: The password for the SRK key (optional)

     FLAGS: One of the GNUTLS_PUBKEY_* flags

     This function will import the public key from the provided TPM key
     structure.

     With respect to passwords the same as in
     'gnutls_pubkey_import_tpm_url()' apply.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.1.0

gnutls_pubkey_import_tpm_url
----------------------------

 -- Function: int gnutls_pubkey_import_tpm_url (gnutls_pubkey_t PKEY,
          const char * URL, const char * SRK_PASSWORD, unsigned int
          FLAGS)
     PKEY: The public key

     URL: The URL of the TPM key to be imported

     SRK_PASSWORD: The password for the SRK key (optional)

     FLAGS: should be zero

     This function will import the given private key to the abstract
     'gnutls_privkey_t' structure.

     Note that unless 'GNUTLS_PUBKEY_DISABLE_CALLBACKS' is specified, if
     incorrect (or NULL) passwords are given the PKCS11 callback
     functions will be used to obtain the correct passwords.  Otherwise
     if the SRK password is wrong 'GNUTLS_E_TPM_SRK_PASSWORD_ERROR' is
     returned.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.1.0

gnutls_pubkey_import_url
------------------------

 -- Function: int gnutls_pubkey_import_url (gnutls_pubkey_t KEY, const
          char * URL, unsigned int FLAGS)
     KEY: A key of type 'gnutls_pubkey_t'

     URL: A PKCS 11 url

     FLAGS: One of GNUTLS_PKCS11_OBJ_* flags

     This function will import a PKCS11 certificate or a TPM key as a
     public key.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.1.0

gnutls_pubkey_import_x509
-------------------------

 -- Function: int gnutls_pubkey_import_x509 (gnutls_pubkey_t KEY,
          gnutls_x509_crt_t CRT, unsigned int FLAGS)
     KEY: The public key

     CRT: The certificate to be imported

     FLAGS: should be zero

     This function will import the given public key to the abstract
     'gnutls_pubkey_t' structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pubkey_import_x509_crq
-----------------------------

 -- Function: int gnutls_pubkey_import_x509_crq (gnutls_pubkey_t KEY,
          gnutls_x509_crq_t CRQ, unsigned int FLAGS)
     KEY: The public key

     CRQ: The certificate to be imported

     FLAGS: should be zero

     This function will import the given public key to the abstract
     'gnutls_pubkey_t' structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.1.5

gnutls_pubkey_import_x509_raw
-----------------------------

 -- Function: int gnutls_pubkey_import_x509_raw (gnutls_pubkey_t PKEY,
          const gnutls_datum_t * DATA, gnutls_x509_crt_fmt_t FORMAT,
          unsigned int FLAGS)
     PKEY: The public key

     DATA: The public key data to be imported

     FORMAT: The format of the public key

     FLAGS: should be zero

     This function will import the given public key to the abstract
     'gnutls_pubkey_t' structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.1.3

gnutls_pubkey_init
------------------

 -- Function: int gnutls_pubkey_init (gnutls_pubkey_t * KEY)
     KEY: The structure to be initialized

     This function will initialize an public key structure.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pubkey_print
-------------------

 -- Function: int gnutls_pubkey_print (gnutls_pubkey_t PUBKEY,
          gnutls_certificate_print_formats_t FORMAT, gnutls_datum_t *
          OUT)
     PUBKEY: The structure to be printed

     FORMAT: Indicate the format to use

     OUT: Newly allocated datum with null terminated string.

     This function will pretty print public key information, suitable
     for display to a human.

     Only 'GNUTLS_CRT_PRINT_FULL' and 'GNUTLS_CRT_PRINT_FULL_NUMBERS'
     are implemented.

     The output 'out' needs to be deallocated using 'gnutls_free()' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.1.5

gnutls_pubkey_set_key_usage
---------------------------

 -- Function: int gnutls_pubkey_set_key_usage (gnutls_pubkey_t KEY,
          unsigned int USAGE)
     KEY: a certificate of type 'gnutls_x509_crt_t'

     USAGE: an ORed sequence of the GNUTLS_KEY_* elements.

     This function will set the key usage flags of the public key.  This
     is only useful if the key is to be exported to a certificate or
     certificate request.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_pubkey_set_pin_function
------------------------------

 -- Function: void gnutls_pubkey_set_pin_function (gnutls_pubkey_t KEY,
          gnutls_pin_callback_t FN, void * USERDATA)
     KEY: A key of type 'gnutls_pubkey_t'

     FN: the callback

     USERDATA: data associated with the callback

     This function will set a callback function to be used when required
     to access the object.  This function overrides any other global PIN
     functions.

     Note that this function must be called right after initialization
     to have effect.

     *Since:* 3.1.0

gnutls_pubkey_verify_data
-------------------------

 -- Function: int gnutls_pubkey_verify_data (gnutls_pubkey_t PUBKEY,
          unsigned int FLAGS, const gnutls_datum_t * DATA, const
          gnutls_datum_t * SIGNATURE)
     PUBKEY: Holds the public key

     FLAGS: Zero or one of 'gnutls_pubkey_flags_t'

     DATA: holds the signed data

     SIGNATURE: contains the signature

     This function will verify the given signed data, using the
     parameters from the certificate.

     Deprecated.  This function cannot be easily used securely.  Use
     'gnutls_pubkey_verify_data2()' instead.

     *Returns:* In case of a verification failure
     'GNUTLS_E_PK_SIG_VERIFY_FAILED' is returned, and zero or positive
     code on success.

     *Since:* 2.12.0

gnutls_pubkey_verify_data2
--------------------------

 -- Function: int gnutls_pubkey_verify_data2 (gnutls_pubkey_t PUBKEY,
          gnutls_sign_algorithm_t ALGO, unsigned int FLAGS, const
          gnutls_datum_t * DATA, const gnutls_datum_t * SIGNATURE)
     PUBKEY: Holds the public key

     ALGO: The signature algorithm used

     FLAGS: Zero or one of 'gnutls_pubkey_flags_t'

     DATA: holds the signed data

     SIGNATURE: contains the signature

     This function will verify the given signed data, using the
     parameters from the certificate.

     *Returns:* In case of a verification failure
     'GNUTLS_E_PK_SIG_VERIFY_FAILED' is returned, and zero or positive
     code on success.

     *Since:* 3.0

gnutls_pubkey_verify_hash
-------------------------

 -- Function: int gnutls_pubkey_verify_hash (gnutls_pubkey_t KEY,
          unsigned int FLAGS, const gnutls_datum_t * HASH, const
          gnutls_datum_t * SIGNATURE)
     KEY: Holds the public key

     FLAGS: Zero or one of 'gnutls_pubkey_flags_t'

     HASH: holds the hash digest to be verified

     SIGNATURE: contains the signature

     This function will verify the given signed digest, using the
     parameters from the public key.

     Deprecated.  This function cannot be easily used securely.  Use
     'gnutls_pubkey_verify_hash2()' instead.

     *Returns:* In case of a verification failure
     'GNUTLS_E_PK_SIG_VERIFY_FAILED' is returned, and zero or positive
     code on success.

     *Since:* 2.12.0

gnutls_pubkey_verify_hash2
--------------------------

 -- Function: int gnutls_pubkey_verify_hash2 (gnutls_pubkey_t KEY,
          gnutls_sign_algorithm_t ALGO, unsigned int FLAGS, const
          gnutls_datum_t * HASH, const gnutls_datum_t * SIGNATURE)
     KEY: Holds the public key

     ALGO: The signature algorithm used

     FLAGS: Zero or one of 'gnutls_pubkey_flags_t'

     HASH: holds the hash digest to be verified

     SIGNATURE: contains the signature

     This function will verify the given signed digest, using the
     parameters from the public key.  Note that unlike
     'gnutls_privkey_sign_hash()' , this function accepts a signature
     algorithm instead of a digest algorithm.  You can use
     'gnutls_pk_to_sign()' to get the appropriate value.

     *Returns:* In case of a verification failure
     'GNUTLS_E_PK_SIG_VERIFY_FAILED' is returned, and zero or positive
     code on success.

     *Since:* 3.0

gnutls_pubkey_verify_params
---------------------------

 -- Function: int gnutls_pubkey_verify_params (gnutls_pubkey_t KEY)
     KEY: should contain a 'gnutls_pubkey_t' structure

     This function will verify the private key parameters.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.3.0

gnutls_x509_crl_privkey_sign
----------------------------

 -- Function: int gnutls_x509_crl_privkey_sign (gnutls_x509_crl_t CRL,
          gnutls_x509_crt_t ISSUER, gnutls_privkey_t ISSUER_KEY,
          gnutls_digest_algorithm_t DIG, unsigned int FLAGS)
     CRL: should contain a gnutls_x509_crl_t structure

     ISSUER: is the certificate of the certificate issuer

     ISSUER_KEY: holds the issuer's private key

     DIG: The message digest to use.  GNUTLS_DIG_SHA1 is the safe choice
     unless you know what you're doing.

     FLAGS: must be 0

     This function will sign the CRL with the issuer's private key, and
     will copy the issuer's information into the CRL.

     This must be the last step in a certificate CRL since all the
     previously set parameters are now signed.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     Since 2.12.0

gnutls_x509_crq_privkey_sign
----------------------------

 -- Function: int gnutls_x509_crq_privkey_sign (gnutls_x509_crq_t CRQ,
          gnutls_privkey_t KEY, gnutls_digest_algorithm_t DIG, unsigned
          int FLAGS)
     CRQ: should contain a 'gnutls_x509_crq_t' structure

     KEY: holds a private key

     DIG: The message digest to use, i.e., 'GNUTLS_DIG_SHA1'

     FLAGS: must be 0

     This function will sign the certificate request with a private key.
     This must be the same key as the one used in
     'gnutls_x509_crt_set_key()' since a certificate request is self
     signed.

     This must be the last step in a certificate request generation
     since all the previously set parameters are now signed.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, otherwise a negative
     error code.  'GNUTLS_E_ASN1_VALUE_NOT_FOUND' is returned if you
     didn't set all information in the certificate request (e.g., the
     version using 'gnutls_x509_crq_set_version()' ).

     *Since:* 2.12.0

gnutls_x509_crq_set_pubkey
--------------------------

 -- Function: int gnutls_x509_crq_set_pubkey (gnutls_x509_crq_t CRQ,
          gnutls_pubkey_t KEY)
     CRQ: should contain a 'gnutls_x509_crq_t' structure

     KEY: holds a public key

     This function will set the public parameters from the given public
     key to the request.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0

gnutls_x509_crt_privkey_sign
----------------------------

 -- Function: int gnutls_x509_crt_privkey_sign (gnutls_x509_crt_t CRT,
          gnutls_x509_crt_t ISSUER, gnutls_privkey_t ISSUER_KEY,
          gnutls_digest_algorithm_t DIG, unsigned int FLAGS)
     CRT: a certificate of type 'gnutls_x509_crt_t'

     ISSUER: is the certificate of the certificate issuer

     ISSUER_KEY: holds the issuer's private key

     DIG: The message digest to use, 'GNUTLS_DIG_SHA1' is a safe choice

     FLAGS: must be 0

     This function will sign the certificate with the issuer's private
     key, and will copy the issuer's information into the certificate.

     This must be the last step in a certificate generation since all
     the previously set parameters are now signed.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

gnutls_x509_crt_set_pubkey
--------------------------

 -- Function: int gnutls_x509_crt_set_pubkey (gnutls_x509_crt_t CRT,
          gnutls_pubkey_t KEY)
     CRT: should contain a 'gnutls_x509_crt_t' structure

     KEY: holds a public key

     This function will set the public parameters from the given public
     key to the request.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 2.12.0


File: gnutls.info,  Node: DANE API,  Next: Cryptographic API,  Prev: Abstract key API,  Up: API reference

E.10 DANE API
=============

The following functions are to be used for DANE certificate
verification.  Their prototypes lie in 'gnutls/dane.h'.  Note that you
need to link with the 'libgnutls-dane' library to use them.

dane_cert_type_name
-------------------

 -- Function: const char * dane_cert_type_name (dane_cert_type_t TYPE)
     TYPE: is a DANE match type

     Convert a 'dane_cert_type_t' value to a string.

     *Returns:* a string that contains the name of the specified type,
     or 'NULL' .

dane_cert_usage_name
--------------------

 -- Function: const char * dane_cert_usage_name (dane_cert_usage_t
          USAGE)
     USAGE: - undescribed -

     Convert a 'dane_cert_usage_t' value to a string.

     *Returns:* a string that contains the name of the specified type,
     or 'NULL' .

dane_match_type_name
--------------------

 -- Function: const char * dane_match_type_name (dane_match_type_t TYPE)
     TYPE: is a DANE match type

     Convert a 'dane_match_type_t' value to a string.

     *Returns:* a string that contains the name of the specified type,
     or 'NULL' .

dane_query_data
---------------

 -- Function: int dane_query_data (dane_query_t Q, unsigned int IDX,
          unsigned int * USAGE, unsigned int * TYPE, unsigned int *
          MATCH, gnutls_datum_t * DATA)
     Q: The query result structure

     IDX: The index of the query response.

     USAGE: The certificate usage (see 'dane_cert_usage_t' )

     TYPE: The certificate type (see 'dane_cert_type_t' )

     MATCH: The DANE matching type (see 'dane_match_type_t' )

     DATA: The DANE data.

     This function will provide the DANE data from the query response.

     *Returns:* On success, 'DANE_E_SUCCESS' (0) is returned, otherwise
     a negative error value.

dane_query_deinit
-----------------

 -- Function: void dane_query_deinit (dane_query_t Q)
     Q: The structure to be deinitialized

     This function will deinitialize a DANE query result structure.

dane_query_entries
------------------

 -- Function: unsigned int dane_query_entries (dane_query_t Q)
     Q: The query result structure

     This function will return the number of entries in a query.

     *Returns:* The number of entries.

dane_query_status
-----------------

 -- Function: dane_query_status_t dane_query_status (dane_query_t Q)
     Q: The query result structure

     This function will return the status of the query response.  See
     'dane_query_status_t' for the possible types.

     *Returns:* The status type.

dane_query_tlsa
---------------

 -- Function: int dane_query_tlsa (dane_state_t S, dane_query_t * R,
          const char * HOST, const char * PROTO, unsigned int PORT)
     S: The DANE state structure

     R: A structure to place the result

     HOST: The host name to resolve.

     PROTO: The protocol type (tcp, udp, etc.)

     PORT: The service port number (eg.  443).

     This function will query the DNS server for the TLSA (DANE) data
     for the given host.

     *Returns:* On success, 'DANE_E_SUCCESS' (0) is returned, otherwise
     a negative error value.

dane_query_to_raw_tlsa
----------------------

 -- Function: int dane_query_to_raw_tlsa (dane_query_t Q, unsigned int *
          DATA_ENTRIES, char *** DANE_DATA, int ** DANE_DATA_LEN, int *
          SECURE, int * BOGUS)
     Q: The query result structure

     DATA_ENTRIES: Pointer set to the number of entries in the query

     DANE_DATA: Pointer to contain an array of DNS rdata items,
     terminated with a NULL pointer; caller must guarantee that the
     referenced data remains valid until 'dane_query_deinit()' is
     called.

     DANE_DATA_LEN: Pointer to contain the length n bytes of the
     dane_data items

     SECURE: Pointer set true if the result is validated securely, false
     if validation failed or the domain queried has no security info

     BOGUS: Pointer set true if the result was not secure due to a
     security failure

     This function will provide the DANE data from the query response.

     The pointers dane_data and dane_data_len are allocated with
     'gnutls_malloc()' to contain the data from the query result
     structure (individual 'dane_data' items simply point to the
     original data and are not allocated separately).  The returned
     'dane_data' are only valid during the lifetime of 'q' .

     *Returns:* On success, 'DANE_E_SUCCESS' (0) is returned, otherwise
     a negative error value.

dane_raw_tlsa
-------------

 -- Function: int dane_raw_tlsa (dane_state_t S, dane_query_t * R, char
          *const * DANE_DATA, const int * DANE_DATA_LEN, int SECURE, int
          BOGUS)
     S: The DANE state structure

     R: A structure to place the result

     DANE_DATA: array of DNS rdata items, terminated with a NULL
     pointer; caller must guarantee that the referenced data remains
     valid until 'dane_query_deinit()' is called.

     DANE_DATA_LEN: the length n bytes of the dane_data items

     SECURE: true if the result is validated securely, false if
     validation failed or the domain queried has no security info

     BOGUS: if the result was not secure (secure = 0) due to a security
     failure, and the result is due to a security failure, bogus is
     true.

     This function will fill in the TLSA (DANE) structure from the given
     raw DNS record data.  The 'dane_data' must be valid during the
     lifetime of the query.

     *Returns:* On success, 'DANE_E_SUCCESS' (0) is returned, otherwise
     a negative error value.

dane_state_deinit
-----------------

 -- Function: void dane_state_deinit (dane_state_t S)
     S: The structure to be deinitialized

     This function will deinitialize a DANE query structure.

dane_state_init
---------------

 -- Function: int dane_state_init (dane_state_t * S, unsigned int FLAGS)
     S: The structure to be initialized

     FLAGS: flags from the 'dane_state_flags' enumeration

     This function will initialize a DANE query structure.

     *Returns:* On success, 'DANE_E_SUCCESS' (0) is returned, otherwise
     a negative error value.

dane_state_set_dlv_file
-----------------------

 -- Function: int dane_state_set_dlv_file (dane_state_t S, const char *
          FILE)
     S: The structure to be deinitialized

     FILE: The file holding the DLV keys.

     This function will set a file with trusted keys for DLV (DNSSEC
     Lookaside Validation).

dane_strerror
-------------

 -- Function: const char * dane_strerror (int ERROR)
     ERROR: is a DANE error code, a negative error code

     This function is similar to strerror.  The difference is that it
     accepts an error number returned by a gnutls function; In case of
     an unknown error a descriptive string is sent instead of 'NULL' .

     Error codes are always a negative error code.

     *Returns:* A string explaining the DANE error message.

dane_verification_status_print
------------------------------

 -- Function: int dane_verification_status_print (unsigned int STATUS,
          gnutls_datum_t * OUT, unsigned int FLAGS)
     STATUS: The status flags to be printed

     OUT: Newly allocated datum with (0) terminated string.

     FLAGS: should be zero

     This function will pretty print the status of a verification
     process - eg.  the one obtained by 'dane_verify_crt()' .

     The output 'out' needs to be deallocated using 'gnutls_free()' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

dane_verify_crt
---------------

 -- Function: int dane_verify_crt (dane_state_t S, const gnutls_datum_t
          * CHAIN, unsigned CHAIN_SIZE, gnutls_certificate_type_t
          CHAIN_TYPE, const char * HOSTNAME, const char * PROTO,
          unsigned int PORT, unsigned int SFLAGS, unsigned int VFLAGS,
          unsigned int * VERIFY)
     S: A DANE state structure (may be NULL)

     CHAIN: A certificate chain

     CHAIN_SIZE: The size of the chain

     CHAIN_TYPE: The type of the certificate chain

     HOSTNAME: The hostname associated with the chain

     PROTO: The protocol of the service connecting (e.g.  tcp)

     PORT: The port of the service connecting (e.g.  443)

     SFLAGS: Flags for the the initialization of 's' (if NULL)

     VFLAGS: Verification flags; an OR'ed list of 'dane_verify_flags_t'
     .

     VERIFY: An OR'ed list of 'dane_verify_status_t' .

     This function will verify the given certificate chain against the
     CA constrains and/or the certificate available via DANE. If no
     information via DANE can be obtained the flag
     'DANE_VERIFY_NO_DANE_INFO' is set.  If a DNSSEC signature is not
     available for the DANE record then the verify flag
     'DANE_VERIFY_NO_DNSSEC_DATA' is set.

     Due to the many possible options of DANE, there is no single threat
     model countered.  When notifying the user about DANE verification
     results it may be better to mention: DANE verification did not
     reject the certificate, rather than mentioning a successful DANE
     verication.

     Note that this function is designed to be run in addition to PKIX -
     certificate chain - verification.  To be run independently the
     'DANE_VFLAG_ONLY_CHECK_EE_USAGE' flag should be specified; then the
     function will check whether the key of the peer matches the key
     advertized in the DANE entry.

     If the 'q' parameter is provided it will be used for caching
     entries.

     *Returns:* On success, 'DANE_E_SUCCESS' (0) is returned, otherwise
     a negative error value.

dane_verify_crt_raw
-------------------

 -- Function: int dane_verify_crt_raw (dane_state_t S, const
          gnutls_datum_t * CHAIN, unsigned CHAIN_SIZE,
          gnutls_certificate_type_t CHAIN_TYPE, dane_query_t R, unsigned
          int SFLAGS, unsigned int VFLAGS, unsigned int * VERIFY)
     S: A DANE state structure (may be NULL)

     CHAIN: A certificate chain

     CHAIN_SIZE: The size of the chain

     CHAIN_TYPE: The type of the certificate chain

     R: DANE data to check against

     SFLAGS: Flags for the the initialization of 's' (if NULL)

     VFLAGS: Verification flags; an OR'ed list of 'dane_verify_flags_t'
     .

     VERIFY: An OR'ed list of 'dane_verify_status_t' .

     This function will verify the given certificate chain against the
     CA constrains and/or the certificate available via DANE. If no
     information via DANE can be obtained the flag
     'DANE_VERIFY_NO_DANE_INFO' is set.  If a DNSSEC signature is not
     available for the DANE record then the verify flag
     'DANE_VERIFY_NO_DNSSEC_DATA' is set.

     Due to the many possible options of DANE, there is no single threat
     model countered.  When notifying the user about DANE verification
     results it may be better to mention: DANE verification did not
     reject the certificate, rather than mentioning a successful DANE
     verication.

     Note that this function is designed to be run in addition to PKIX -
     certificate chain - verification.  To be run independently the
     'DANE_VFLAG_ONLY_CHECK_EE_USAGE' flag should be specified; then the
     function will check whether the key of the peer matches the key
     advertized in the DANE entry.

     If the 'q' parameter is provided it will be used for caching
     entries.

     *Returns:* On success, 'DANE_E_SUCCESS' (0) is returned, otherwise
     a negative error value.

dane_verify_session_crt
-----------------------

 -- Function: int dane_verify_session_crt (dane_state_t S,
          gnutls_session_t SESSION, const char * HOSTNAME, const char *
          PROTO, unsigned int PORT, unsigned int SFLAGS, unsigned int
          VFLAGS, unsigned int * VERIFY)
     S: A DANE state structure (may be NULL)

     SESSION: A gnutls session

     HOSTNAME: The hostname associated with the chain

     PROTO: The protocol of the service connecting (e.g.  tcp)

     PORT: The port of the service connecting (e.g.  443)

     SFLAGS: Flags for the the initialization of 's' (if NULL)

     VFLAGS: Verification flags; an OR'ed list of 'dane_verify_flags_t'
     .

     VERIFY: An OR'ed list of 'dane_verify_status_t' .

     This function will verify session's certificate chain against the
     CA constrains and/or the certificate available via DANE. See
     'dane_verify_crt()' for more information.

     This will not verify the chain for validity; unless the DANE
     verification is restricted to end certificates, this must be be
     performed separately using 'gnutls_certificate_verify_peers3()' .

     *Returns:* On success, 'DANE_E_SUCCESS' (0) is returned, otherwise
     a negative error value.


File: gnutls.info,  Node: Cryptographic API,  Next: Compatibility API,  Prev: DANE API,  Up: API reference

E.11 Cryptographic API
======================

The following functions are to be used for low-level cryptographic
operations.  Their prototypes lie in 'gnutls/crypto.h'.

gnutls_cipher_add_auth
----------------------

 -- Function: int gnutls_cipher_add_auth (gnutls_cipher_hd_t HANDLE,
          const void * TEXT, size_t TEXT_SIZE)
     HANDLE: is a 'gnutls_cipher_hd_t' structure.

     TEXT: the data to be authenticated

     TEXT_SIZE: The length of the data

     This function operates on authenticated encryption with associated
     data (AEAD) ciphers and authenticate the input data.  This function
     can only be called once and before any encryption operations.

     *Returns:* Zero or a negative error code on error.

     *Since:* 3.0

gnutls_cipher_decrypt
---------------------

 -- Function: int gnutls_cipher_decrypt (gnutls_cipher_hd_t HANDLE, void
          * CIPHERTEXT, size_t CIPHERTEXTLEN)
     HANDLE: is a 'gnutls_cipher_hd_t' structure.

     CIPHERTEXT: the data to encrypt

     CIPHERTEXTLEN: The length of data to encrypt

     This function will decrypt the given data using the algorithm
     specified by the context.

     Note that in AEAD ciphers, this will not check the tag.  You will
     need to compare the tag sent with the value returned from
     'gnutls_cipher_tag()' .

     *Returns:* Zero or a negative error code on error.

     *Since:* 2.10.0

gnutls_cipher_decrypt2
----------------------

 -- Function: int gnutls_cipher_decrypt2 (gnutls_cipher_hd_t HANDLE,
          const void * CIPHERTEXT, size_t CIPHERTEXTLEN, void * TEXT,
          size_t TEXTLEN)
     HANDLE: is a 'gnutls_cipher_hd_t' structure.

     CIPHERTEXT: the data to encrypt

     CIPHERTEXTLEN: The length of data to encrypt

     TEXT: the decrypted data

     TEXTLEN: The available length for decrypted data

     This function will decrypt the given data using the algorithm
     specified by the context.

     Note that in AEAD ciphers, this will not check the tag.  You will
     need to compare the tag sent with the value returned from
     'gnutls_cipher_tag()' .

     *Returns:* Zero or a negative error code on error.

     *Since:* 2.12.0

gnutls_cipher_deinit
--------------------

 -- Function: void gnutls_cipher_deinit (gnutls_cipher_hd_t HANDLE)
     HANDLE: is a 'gnutls_cipher_hd_t' structure.

     This function will deinitialize all resources occupied by the given
     encryption context.

     *Since:* 2.10.0

gnutls_cipher_encrypt
---------------------

 -- Function: int gnutls_cipher_encrypt (gnutls_cipher_hd_t HANDLE, void
          * TEXT, size_t TEXTLEN)
     HANDLE: is a 'gnutls_cipher_hd_t' structure.

     TEXT: the data to encrypt

     TEXTLEN: The length of data to encrypt

     This function will encrypt the given data using the algorithm
     specified by the context.

     *Returns:* Zero or a negative error code on error.

     *Since:* 2.10.0

gnutls_cipher_encrypt2
----------------------

 -- Function: int gnutls_cipher_encrypt2 (gnutls_cipher_hd_t HANDLE,
          const void * TEXT, size_t TEXTLEN, void * CIPHERTEXT, size_t
          CIPHERTEXTLEN)
     HANDLE: is a 'gnutls_cipher_hd_t' structure.

     TEXT: the data to encrypt

     TEXTLEN: The length of data to encrypt

     CIPHERTEXT: the encrypted data

     CIPHERTEXTLEN: The available length for encrypted data

     This function will encrypt the given data using the algorithm
     specified by the context.

     *Returns:* Zero or a negative error code on error.

     *Since:* 2.12.0

gnutls_cipher_get_block_size
----------------------------

 -- Function: int gnutls_cipher_get_block_size
          (gnutls_cipher_algorithm_t ALGORITHM)
     ALGORITHM: is an encryption algorithm

     *Returns:* the block size of the encryption algorithm.

     *Since:* 2.10.0

gnutls_cipher_get_iv_size
-------------------------

 -- Function: int gnutls_cipher_get_iv_size (gnutls_cipher_algorithm_t
          ALGORITHM)
     ALGORITHM: is an encryption algorithm

     Get block size for encryption algorithm.

     *Returns:* block size for encryption algorithm.

     *Since:* 3.2.0

gnutls_cipher_get_tag_size
--------------------------

 -- Function: int gnutls_cipher_get_tag_size (gnutls_cipher_algorithm_t
          ALGORITHM)
     ALGORITHM: is an encryption algorithm

     *Returns:* the tag size of the authenticated encryption algorithm.

     *Since:* 3.2.2

gnutls_cipher_init
------------------

 -- Function: int gnutls_cipher_init (gnutls_cipher_hd_t * HANDLE,
          gnutls_cipher_algorithm_t CIPHER, const gnutls_datum_t * KEY,
          const gnutls_datum_t * IV)
     HANDLE: is a 'gnutls_cipher_hd_t' structure.

     CIPHER: the encryption algorithm to use

     KEY: The key to be used for encryption

     IV: The IV to use (if not applicable set NULL)

     This function will initialize an context that can be used for
     encryption/decryption of data.  This will effectively use the
     current crypto backend in use by gnutls or the cryptographic
     accelerator in use.

     *Returns:* Zero or a negative error code on error.

     *Since:* 2.10.0

gnutls_cipher_set_iv
--------------------

 -- Function: void gnutls_cipher_set_iv (gnutls_cipher_hd_t HANDLE, void
          * IV, size_t IVLEN)
     HANDLE: is a 'gnutls_cipher_hd_t' structure.

     IV: the IV to set

     IVLEN: The length of the IV

     This function will set the IV to be used for the next encryption
     block.

     *Since:* 3.0

gnutls_cipher_tag
-----------------

 -- Function: int gnutls_cipher_tag (gnutls_cipher_hd_t HANDLE, void *
          TAG, size_t TAG_SIZE)
     HANDLE: is a 'gnutls_cipher_hd_t' structure.

     TAG: will hold the tag

     TAG_SIZE: The length of the tag to return

     This function operates on authenticated encryption with associated
     data (AEAD) ciphers and will return the output tag.

     *Returns:* Zero or a negative error code on error.

     *Since:* 3.0

gnutls_hash
-----------

 -- Function: int gnutls_hash (gnutls_hash_hd_t HANDLE, const void *
          TEXT, size_t TEXTLEN)
     HANDLE: is a 'gnutls_cipher_hd_t' structure.

     TEXT: the data to hash

     TEXTLEN: The length of data to hash

     This function will hash the given data using the algorithm
     specified by the context.

     *Returns:* Zero or a negative error code on error.

     *Since:* 2.10.0

gnutls_hash_deinit
------------------

 -- Function: void gnutls_hash_deinit (gnutls_hash_hd_t HANDLE, void *
          DIGEST)
     HANDLE: is a 'gnutls_hash_hd_t' structure.

     DIGEST: is the output value of the hash

     This function will deinitialize all resources occupied by the given
     hash context.

     *Since:* 2.10.0

gnutls_hash_fast
----------------

 -- Function: int gnutls_hash_fast (gnutls_digest_algorithm_t ALGORITHM,
          const void * TEXT, size_t TEXTLEN, void * DIGEST)
     ALGORITHM: the hash algorithm to use

     TEXT: the data to hash

     TEXTLEN: The length of data to hash

     DIGEST: is the output value of the hash

     This convenience function will hash the given data and return
     output on a single call.

     *Returns:* Zero or a negative error code on error.

     *Since:* 2.10.0

gnutls_hash_get_len
-------------------

 -- Function: int gnutls_hash_get_len (gnutls_digest_algorithm_t
          ALGORITHM)
     ALGORITHM: the hash algorithm to use

     This function will return the length of the output data of the
     given hash algorithm.

     *Returns:* The length or zero on error.

     *Since:* 2.10.0

gnutls_hash_init
----------------

 -- Function: int gnutls_hash_init (gnutls_hash_hd_t * DIG,
          gnutls_digest_algorithm_t ALGORITHM)
     DIG: is a 'gnutls_hash_hd_t' structure.

     ALGORITHM: the hash algorithm to use

     This function will initialize an context that can be used to
     produce a Message Digest of data.  This will effectively use the
     current crypto backend in use by gnutls or the cryptographic
     accelerator in use.

     *Returns:* Zero or a negative error code on error.

     *Since:* 2.10.0

gnutls_hash_output
------------------

 -- Function: void gnutls_hash_output (gnutls_hash_hd_t HANDLE, void *
          DIGEST)
     HANDLE: is a 'gnutls_hash_hd_t' structure.

     DIGEST: is the output value of the hash

     This function will output the current hash value and reset the
     state of the hash.

     *Since:* 2.10.0

gnutls_hmac
-----------

 -- Function: int gnutls_hmac (gnutls_hmac_hd_t HANDLE, const void *
          TEXT, size_t TEXTLEN)
     HANDLE: is a 'gnutls_cipher_hd_t' structure.

     TEXT: the data to hash

     TEXTLEN: The length of data to hash

     This function will hash the given data using the algorithm
     specified by the context.

     *Returns:* Zero or a negative error code on error.

     *Since:* 2.10.0

gnutls_hmac_deinit
------------------

 -- Function: void gnutls_hmac_deinit (gnutls_hmac_hd_t HANDLE, void *
          DIGEST)
     HANDLE: is a 'gnutls_hmac_hd_t' structure.

     DIGEST: is the output value of the MAC

     This function will deinitialize all resources occupied by the given
     hmac context.

     *Since:* 2.10.0

gnutls_hmac_fast
----------------

 -- Function: int gnutls_hmac_fast (gnutls_mac_algorithm_t ALGORITHM,
          const void * KEY, size_t KEYLEN, const void * TEXT, size_t
          TEXTLEN, void * DIGEST)
     ALGORITHM: the hash algorithm to use

     KEY: the key to use

     KEYLEN: The length of the key

     TEXT: the data to hash

     TEXTLEN: The length of data to hash

     DIGEST: is the output value of the hash

     This convenience function will hash the given data and return
     output on a single call.

     *Returns:* Zero or a negative error code on error.

     *Since:* 2.10.0

gnutls_hmac_get_len
-------------------

 -- Function: int gnutls_hmac_get_len (gnutls_mac_algorithm_t ALGORITHM)
     ALGORITHM: the hmac algorithm to use

     This function will return the length of the output data of the
     given hmac algorithm.

     *Returns:* The length or zero on error.

     *Since:* 2.10.0

gnutls_hmac_init
----------------

 -- Function: int gnutls_hmac_init (gnutls_hmac_hd_t * DIG,
          gnutls_mac_algorithm_t ALGORITHM, const void * KEY, size_t
          KEYLEN)
     DIG: is a 'gnutls_hmac_hd_t' structure.

     ALGORITHM: the HMAC algorithm to use

     KEY: The key to be used for encryption

     KEYLEN: The length of the key

     This function will initialize an context that can be used to
     produce a Message Authentication Code (MAC) of data.  This will
     effectively use the current crypto backend in use by gnutls or the
     cryptographic accelerator in use.

     Note that despite the name of this function, it can be used for
     other MAC algorithms than HMAC.

     *Returns:* Zero or a negative error code on error.

     *Since:* 2.10.0

gnutls_hmac_output
------------------

 -- Function: void gnutls_hmac_output (gnutls_hmac_hd_t HANDLE, void *
          DIGEST)
     HANDLE: is a 'gnutls_hmac_hd_t' structure.

     DIGEST: is the output value of the MAC

     This function will output the current MAC value and reset the state
     of the MAC.

     *Since:* 2.10.0

gnutls_hmac_set_nonce
---------------------

 -- Function: void gnutls_hmac_set_nonce (gnutls_hmac_hd_t HANDLE, const
          void * NONCE, size_t NONCE_LEN)
     HANDLE: is a 'gnutls_cipher_hd_t' structure.

     NONCE: the data to set as nonce

     NONCE_LEN: The length of data

     This function will set the nonce in the MAC algorithm.

     *Since:* 3.2.0

gnutls_mac_get_nonce_size
-------------------------

 -- Function: size_t gnutls_mac_get_nonce_size (gnutls_mac_algorithm_t
          ALGORITHM)
     ALGORITHM: is an encryption algorithm

     Returns the size of the nonce used by the MAC in TLS.

     *Returns:* length (in bytes) of the given MAC nonce size, or 0.

     *Since:* 3.2.0

gnutls_rnd
----------

 -- Function: int gnutls_rnd (gnutls_rnd_level_t LEVEL, void * DATA,
          size_t LEN)
     LEVEL: a security level

     DATA: place to store random bytes

     LEN: The requested size

     This function will generate random data and store it to output
     buffer.

     This function is thread-safe and also fork-safe.

     *Returns:* Zero on success, or a negative error code on error.

     *Since:* 2.12.0

gnutls_rnd_refresh
------------------

 -- Function: void gnutls_rnd_refresh ()

     This function refreshes the random generator state.  That is the
     current precise time, CPU usage, and other values are input into
     its state.

     On a slower rate input from /dev/urandom is mixed too.

     *Since:* 3.1.7


File: gnutls.info,  Node: Compatibility API,  Prev: Cryptographic API,  Up: API reference

E.12 Compatibility API
======================

The following functions are carried over from old GnuTLS released.  They
might be removed at a later version.  Their prototypes lie in
'gnutls/compat.h'.

gnutls_certificate_client_set_retrieve_function
-----------------------------------------------

 -- Function: void gnutls_certificate_client_set_retrieve_function
          (gnutls_certificate_credentials_t CRED,
          gnutls_certificate_client_retrieve_function * FUNC)
     CRED: is a 'gnutls_certificate_credentials_t' structure.

     FUNC: is the callback function

     This function sets a callback to be called in order to retrieve the
     certificate to be used in the handshake.  You are advised to use
     'gnutls_certificate_set_retrieve_function2()' because it is much
     more efficient in the processing it requires from gnutls.

     The callback's function prototype is: int
     (*callback)(gnutls_session_t, const gnutls_datum_t* req_ca_dn, int
     nreqs, const gnutls_pk_algorithm_t* pk_algos, int pk_algos_length,
     gnutls_retr_st* st);

     'req_ca_cert' is only used in X.509 certificates.  Contains a list
     with the CA names that the server considers trusted.  Normally we
     should send a certificate that is signed by one of these CAs.
     These names are DER encoded.  To get a more meaningful value use
     the function 'gnutls_x509_rdn_get()' .

     'pk_algos' contains a list with server's acceptable signature
     algorithms.  The certificate returned should support the server's
     given algorithms.

     'st' should contain the certificates and private keys.

     If the callback function is provided then gnutls will call it, in
     the handshake, if a certificate is requested by the server (and
     after the certificate request message has been received).

     The callback function should set the certificate list to be sent,
     and return 0 on success.  If no certificate was selected then the
     number of certificates should be set to zero.  The value (-1)
     indicates error and the handshake will be terminated.

gnutls_certificate_server_set_retrieve_function
-----------------------------------------------

 -- Function: void gnutls_certificate_server_set_retrieve_function
          (gnutls_certificate_credentials_t CRED,
          gnutls_certificate_server_retrieve_function * FUNC)
     CRED: is a 'gnutls_certificate_credentials_t' structure.

     FUNC: is the callback function

     This function sets a callback to be called in order to retrieve the
     certificate to be used in the handshake.  You are advised to use
     'gnutls_certificate_set_retrieve_function2()' because it is much
     more efficient in the processing it requires from gnutls.

     The callback's function prototype is: int
     (*callback)(gnutls_session_t, gnutls_retr_st* st);

     'st' should contain the certificates and private keys.

     If the callback function is provided then gnutls will call it, in
     the handshake, after the certificate request message has been
     received.

     The callback function should set the certificate list to be sent,
     and return 0 on success.  The value (-1) indicates error and the
     handshake will be terminated.

gnutls_certificate_set_rsa_export_params
----------------------------------------

 -- Function: void gnutls_certificate_set_rsa_export_params
          (gnutls_certificate_credentials_t RES, gnutls_rsa_params_t
          RSA_PARAMS)
     RES: is a gnutls_certificate_credentials_t structure

     RSA_PARAMS: is a structure that holds temporary RSA parameters.

     This function will set the temporary RSA parameters for a
     certificate server to use.  These parameters will be used in
     RSA-EXPORT cipher suites.

gnutls_certificate_type_set_priority
------------------------------------

 -- Function: int gnutls_certificate_type_set_priority (gnutls_session_t
          SESSION, const int * LIST)
     SESSION: is a 'gnutls_session_t' structure.

     LIST: is a 0 terminated list of gnutls_certificate_type_t elements.

     Sets the priority on the certificate types supported by gnutls.
     Priority is higher for elements specified before others.  After
     specifying the types you want, you must append a 0.  Note that the
     certificate type priority is set on the client.  The server does
     not use the cert type priority except for disabling types that were
     not specified.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_cipher_set_priority
--------------------------

 -- Function: int gnutls_cipher_set_priority (gnutls_session_t SESSION,
          const int * LIST)
     SESSION: is a 'gnutls_session_t' structure.

     LIST: is a 0 terminated list of gnutls_cipher_algorithm_t elements.

     Sets the priority on the ciphers supported by gnutls.  Priority is
     higher for elements specified before others.  After specifying the
     ciphers you want, you must append a 0.  Note that the priority is
     set on the client.  The server does not use the algorithm's
     priority except for disabling algorithms that were not specified.

     *Returns:* 'GNUTLS_E_SUCCESS' (0) on success, or a negative error
     code.

gnutls_compression_set_priority
-------------------------------

 -- Function: int gnutls_compression_set_priority (gnutls_session_t
          SESSION, const int * LIST)
     SESSION: is a 'gnutls_session_t' structure.

     LIST: is a 0 terminated list of gnutls_compression_method_t
     elements.

     Sets the priority on the compression algorithms supported by
     gnutls.  Priority is higher for elements specified before others.
     After specifying the algorithms you want, you must append a 0.
     Note that the priority is set on the client.  The server does not
     use the algorithm's priority except for disabling algorithms that
     were not specified.

     TLS 1.0 does not define any compression algorithms except NULL.
     Other compression algorithms are to be considered as gnutls
     extensions.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_global_set_mem_functions
-------------------------------

 -- Function: void gnutls_global_set_mem_functions
          (gnutls_alloc_function ALLOC_FUNC, gnutls_alloc_function
          SECURE_ALLOC_FUNC, gnutls_is_secure_function IS_SECURE_FUNC,
          gnutls_realloc_function REALLOC_FUNC, gnutls_free_function
          FREE_FUNC)
     ALLOC_FUNC: it's the default memory allocation function.  Like
     'malloc()' .

     SECURE_ALLOC_FUNC: This is the memory allocation function that will
     be used for sensitive data.

     IS_SECURE_FUNC: a function that returns 0 if the memory given is
     not secure.  May be NULL.

     REALLOC_FUNC: A realloc function

     FREE_FUNC: The function that frees allocated data.  Must accept a
     NULL pointer.

     *Deprecated:* since 3.3.0 it is no longer possible to replace the
     internally used memory allocation functions

     This is the function where you set the memory allocation functions
     gnutls is going to use.  By default the libc's allocation functions
     ('malloc()' , 'free()' ), are used by gnutls, to allocate both
     sensitive and not sensitive data.  This function is provided to set
     the memory allocation functions to something other than the
     defaults

     This function must be called before 'gnutls_global_init()' is
     called.  This function is not thread safe.

gnutls_kx_set_priority
----------------------

 -- Function: int gnutls_kx_set_priority (gnutls_session_t SESSION,
          const int * LIST)
     SESSION: is a 'gnutls_session_t' structure.

     LIST: is a 0 terminated list of gnutls_kx_algorithm_t elements.

     Sets the priority on the key exchange algorithms supported by
     gnutls.  Priority is higher for elements specified before others.
     After specifying the algorithms you want, you must append a 0.
     Note that the priority is set on the client.  The server does not
     use the algorithm's priority except for disabling algorithms that
     were not specified.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_mac_set_priority
-----------------------

 -- Function: int gnutls_mac_set_priority (gnutls_session_t SESSION,
          const int * LIST)
     SESSION: is a 'gnutls_session_t' structure.

     LIST: is a 0 terminated list of gnutls_mac_algorithm_t elements.

     Sets the priority on the mac algorithms supported by gnutls.
     Priority is higher for elements specified before others.  After
     specifying the algorithms you want, you must append a 0.  Note that
     the priority is set on the client.  The server does not use the
     algorithm's priority except for disabling algorithms that were not
     specified.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_openpgp_privkey_sign_hash
--------------------------------

 -- Function: int gnutls_openpgp_privkey_sign_hash
          (gnutls_openpgp_privkey_t KEY, const gnutls_datum_t * HASH,
          gnutls_datum_t * SIGNATURE)
     KEY: Holds the key

     HASH: holds the data to be signed

     SIGNATURE: will contain newly allocated signature

     This function will sign the given hash using the private key.  You
     should use 'gnutls_openpgp_privkey_set_preferred_key_id()' before
     calling this function to set the subkey to use.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Deprecated:* Use 'gnutls_privkey_sign_hash()' instead.

gnutls_privkey_sign_raw_data
----------------------------

 -- Function: int gnutls_privkey_sign_raw_data (gnutls_privkey_t KEY,
          unsigned FLAGS, const gnutls_datum_t * DATA, gnutls_datum_t *
          SIGNATURE)
     KEY: Holds the key

     FLAGS: should be zero

     DATA: holds the data to be signed

     SIGNATURE: will contain the signature allocate with
     'gnutls_malloc()'

     This function will sign the given data using a signature algorithm
     supported by the private key.  Note that this is a low-level
     function and does not apply any preprocessing or hash on the signed
     data.  For example on an RSA key the input 'data' should be of the
     DigestInfo PKCS '1' 1.5 format.  Use it only if you know what are
     you doing.

     Note this function is equivalent to using the
     'GNUTLS_PRIVKEY_SIGN_FLAG_TLS1_RSA' flag with
     'gnutls_privkey_sign_hash()' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Since:* 3.1.10

gnutls_protocol_set_priority
----------------------------

 -- Function: int gnutls_protocol_set_priority (gnutls_session_t
          SESSION, const int * LIST)
     SESSION: is a 'gnutls_session_t' structure.

     LIST: is a 0 terminated list of gnutls_protocol_t elements.

     Sets the priority on the protocol versions supported by gnutls.
     This function actually enables or disables protocols.  Newer
     protocol versions always have highest priority.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_rsa_export_get_modulus_bits
----------------------------------

 -- Function: int gnutls_rsa_export_get_modulus_bits (gnutls_session_t
          SESSION)
     SESSION: is a gnutls session

     Get the export RSA parameter's modulus size.

     *Returns:* The bits used in the last RSA-EXPORT key exchange with
     the peer, or a negative error code in case of error.

gnutls_rsa_export_get_pubkey
----------------------------

 -- Function: int gnutls_rsa_export_get_pubkey (gnutls_session_t
          SESSION, gnutls_datum_t * EXPONENT, gnutls_datum_t * MODULUS)
     SESSION: is a gnutls session

     EXPONENT: will hold the exponent.

     MODULUS: will hold the modulus.

     This function will return the peer's public key exponent and
     modulus used in the last RSA-EXPORT authentication.  The output
     parameters must be freed with 'gnutls_free()' .

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise an error code is returned.

gnutls_rsa_params_cpy
---------------------

 -- Function: int gnutls_rsa_params_cpy (gnutls_rsa_params_t DST,
          gnutls_rsa_params_t SRC)
     DST: Is the destination structure, which should be initialized.

     SRC: Is the source structure

     This function will copy the RSA parameters structure from source to
     destination.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an negative error
     code.

gnutls_rsa_params_deinit
------------------------

 -- Function: void gnutls_rsa_params_deinit (gnutls_rsa_params_t
          RSA_PARAMS)
     RSA_PARAMS: Is a structure that holds the parameters

     This function will deinitialize the RSA parameters structure.

gnutls_rsa_params_export_pkcs1
------------------------------

 -- Function: int gnutls_rsa_params_export_pkcs1 (gnutls_rsa_params_t
          PARAMS, gnutls_x509_crt_fmt_t FORMAT, unsigned char *
          PARAMS_DATA, size_t * PARAMS_DATA_SIZE)
     PARAMS: Holds the RSA parameters

     FORMAT: the format of output params.  One of PEM or DER.

     PARAMS_DATA: will contain a PKCS1 RSAPrivateKey structure PEM or
     DER encoded

     PARAMS_DATA_SIZE: holds the size of params_data (and will be
     replaced by the actual size of parameters)

     This function will export the given RSA parameters to a PKCS1
     RSAPrivateKey structure.  If the buffer provided is not long enough
     to hold the output, then GNUTLS_E_SHORT_MEMORY_BUFFER will be
     returned.

     If the structure is PEM encoded, it will have a header of "BEGIN
     RSA PRIVATE KEY".

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an negative error
     code.

gnutls_rsa_params_export_raw
----------------------------

 -- Function: int gnutls_rsa_params_export_raw (gnutls_rsa_params_t RSA,
          gnutls_datum_t * M, gnutls_datum_t * E, gnutls_datum_t * D,
          gnutls_datum_t * P, gnutls_datum_t * Q, gnutls_datum_t * U,
          unsigned int * BITS)
     RSA: a structure that holds the rsa parameters

     M: will hold the modulus

     E: will hold the public exponent

     D: will hold the private exponent

     P: will hold the first prime (p)

     Q: will hold the second prime (q)

     U: will hold the coefficient

     BITS: if non null will hold the prime's number of bits

     This function will export the RSA parameters found in the given
     structure.  The new parameters will be allocated using
     'gnutls_malloc()' and will be stored in the appropriate datum.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an negative error
     code.

gnutls_rsa_params_generate2
---------------------------

 -- Function: int gnutls_rsa_params_generate2 (gnutls_rsa_params_t
          PARAMS, unsigned int BITS)
     PARAMS: The structure where the parameters will be stored

     BITS: is the prime's number of bits

     This function will generate new temporary RSA parameters for use in
     RSA-EXPORT ciphersuites.  This function is normally slow.

     Note that if the parameters are to be used in export cipher suites
     the bits value should be 512 or less.  Also note that the
     generation of new RSA parameters is only useful to servers.
     Clients use the parameters sent by the server, thus it's no use
     calling this in client side.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an negative error
     code.

gnutls_rsa_params_import_pkcs1
------------------------------

 -- Function: int gnutls_rsa_params_import_pkcs1 (gnutls_rsa_params_t
          PARAMS, const gnutls_datum_t * PKCS1_PARAMS,
          gnutls_x509_crt_fmt_t FORMAT)
     PARAMS: A structure where the parameters will be copied to

     PKCS1_PARAMS: should contain a PKCS1 RSAPrivateKey structure PEM or
     DER encoded

     FORMAT: the format of params.  PEM or DER.

     This function will extract the RSAPrivateKey found in a PKCS1
     formatted structure.

     If the structure is PEM encoded, it should have a header of "BEGIN
     RSA PRIVATE KEY".

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an negative error
     code.

gnutls_rsa_params_import_raw
----------------------------

 -- Function: int gnutls_rsa_params_import_raw (gnutls_rsa_params_t
          RSA_PARAMS, const gnutls_datum_t * M, const gnutls_datum_t *
          E, const gnutls_datum_t * D, const gnutls_datum_t * P, const
          gnutls_datum_t * Q, const gnutls_datum_t * U)
     RSA_PARAMS: Is a structure will hold the parameters

     M: holds the modulus

     E: holds the public exponent

     D: holds the private exponent

     P: holds the first prime (p)

     Q: holds the second prime (q)

     U: holds the coefficient

     This function will replace the parameters in the given structure.
     The new parameters should be stored in the appropriate
     gnutls_datum.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an negative error
     code.

gnutls_rsa_params_init
----------------------

 -- Function: int gnutls_rsa_params_init (gnutls_rsa_params_t *
          RSA_PARAMS)
     RSA_PARAMS: Is a structure that will hold the parameters

     This function will initialize the temporary RSA parameters
     structure.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an negative error
     code.

gnutls_set_default_export_priority
----------------------------------

 -- Function: int gnutls_set_default_export_priority (gnutls_session_t
          SESSION)
     SESSION: is a 'gnutls_session_t' structure.

     Sets some default priority on the ciphers, key exchange methods,
     macs and compression methods.  This function also includes weak
     algorithms.

     This is the same as calling:

     gnutls_priority_set_direct (session, "EXPORT", NULL);

     This function is kept around for backwards compatibility, but
     because of its wide use it is still fully supported.  If you wish
     to allow users to provide a string that specify which ciphers to
     use (which is recommended), you should use
     'gnutls_priority_set_direct()' or 'gnutls_priority_set()' instead.

     *Returns:* 'GNUTLS_E_SUCCESS' on success, or an error code.

gnutls_sign_callback_get
------------------------

 -- Function: gnutls_sign_func gnutls_sign_callback_get
          (gnutls_session_t SESSION, void ** USERDATA)
     SESSION: is a gnutls session

     USERDATA: if non-'NULL' , will be set to abstract callback pointer.

     Retrieve the callback function, and its userdata pointer.

     *Returns:* The function pointer set by 'gnutls_sign_callback_set()'
     , or if not set, 'NULL' .

     *Deprecated:* Use the PKCS 11 interfaces instead.

gnutls_sign_callback_set
------------------------

 -- Function: void gnutls_sign_callback_set (gnutls_session_t SESSION,
          gnutls_sign_func SIGN_FUNC, void * USERDATA)
     SESSION: is a gnutls session

     SIGN_FUNC: function pointer to application's sign callback.

     USERDATA: void pointer that will be passed to sign callback.

     Set the callback function.  The function must have this prototype:

     typedef int (*gnutls_sign_func) (gnutls_session_t session, void
     *userdata, gnutls_certificate_type_t cert_type, const
     gnutls_datum_t * cert, const gnutls_datum_t * hash, gnutls_datum_t
     * signature);

     The 'userdata' parameter is passed to the 'sign_func' verbatim, and
     can be used to store application-specific data needed in the
     callback function.  See also 'gnutls_sign_callback_get()' .

     *Deprecated:* Use the PKCS 11 or 'gnutls_privkey_t' interfacess
     like 'gnutls_privkey_import_ext()' instead.

gnutls_x509_crl_sign
--------------------

 -- Function: int gnutls_x509_crl_sign (gnutls_x509_crl_t CRL,
          gnutls_x509_crt_t ISSUER, gnutls_x509_privkey_t ISSUER_KEY)
     CRL: should contain a gnutls_x509_crl_t structure

     ISSUER: is the certificate of the certificate issuer

     ISSUER_KEY: holds the issuer's private key

     This function is the same a 'gnutls_x509_crl_sign2()' with no
     flags, and SHA1 as the hash algorithm.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Deprecated:* Use 'gnutls_x509_crl_privkey_sign()' .

gnutls_x509_crq_sign
--------------------

 -- Function: int gnutls_x509_crq_sign (gnutls_x509_crq_t CRQ,
          gnutls_x509_privkey_t KEY)
     CRQ: should contain a 'gnutls_x509_crq_t' structure

     KEY: holds a private key

     This function is the same a 'gnutls_x509_crq_sign2()' with no
     flags, and SHA1 as the hash algorithm.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Deprecated:* Use 'gnutls_x509_crq_privkey_sign()' instead.

gnutls_x509_crt_get_preferred_hash_algorithm
--------------------------------------------

 -- Function: int gnutls_x509_crt_get_preferred_hash_algorithm
          (gnutls_x509_crt_t CRT, gnutls_digest_algorithm_t * HASH,
          unsigned int * MAND)
     CRT: Holds the certificate

     HASH: The result of the call with the hash algorithm used for
     signature

     MAND: If non-zero it means that the algorithm MUST use this hash.
     May be NULL.

     This function will read the certifcate and return the appropriate
     digest algorithm to use for signing with this certificate.  Some
     certificates (i.e.  DSA might not be able to sign without the
     preferred algorithm).

     *Deprecated:* Please use
     'gnutls_pubkey_get_preferred_hash_algorithm()' .

     *Returns:* the 0 if the hash algorithm is found.  A negative error
     code is returned on error.

     *Since:* 2.12.0

gnutls_x509_crt_get_verify_algorithm
------------------------------------

 -- Function: int gnutls_x509_crt_get_verify_algorithm
          (gnutls_x509_crt_t CRT, const gnutls_datum_t * SIGNATURE,
          gnutls_digest_algorithm_t * HASH)
     CRT: Holds the certificate

     SIGNATURE: contains the signature

     HASH: The result of the call with the hash algorithm used for
     signature

     This function will read the certifcate and the signed data to
     determine the hash algorithm used to generate the signature.

     *Deprecated:* Use 'gnutls_pubkey_get_verify_algorithm()' instead.

     *Returns:* the 0 if the hash algorithm is found.  A negative error
     code is returned on error.

     *Since:* 2.8.0

gnutls_x509_crt_verify_data
---------------------------

 -- Function: int gnutls_x509_crt_verify_data (gnutls_x509_crt_t CRT,
          unsigned int FLAGS, const gnutls_datum_t * DATA, const
          gnutls_datum_t * SIGNATURE)
     CRT: Holds the certificate

     FLAGS: should be 0 for now

     DATA: holds the data to be signed

     SIGNATURE: contains the signature

     This function will verify the given signed data, using the
     parameters from the certificate.

     Deprecated.  This function cannot be easily used securely.  Use
     'gnutls_pubkey_verify_data2()' instead.

     *Returns:* In case of a verification failure
     'GNUTLS_E_PK_SIG_VERIFY_FAILED' is returned, and zero or positive
     code on success.

gnutls_x509_crt_verify_hash
---------------------------

 -- Function: int gnutls_x509_crt_verify_hash (gnutls_x509_crt_t CRT,
          unsigned int FLAGS, const gnutls_datum_t * HASH, const
          gnutls_datum_t * SIGNATURE)
     CRT: Holds the certificate

     FLAGS: should be 0 for now

     HASH: holds the hash digest to be verified

     SIGNATURE: contains the signature

     This function will verify the given signed digest, using the
     parameters from the certificate.

     Deprecated.  This function cannot be easily used securely.  Use
     'gnutls_pubkey_verify_hash2()' instead.

     *Returns:* In case of a verification failure
     'GNUTLS_E_PK_SIG_VERIFY_FAILED' is returned, and zero or positive
     code on success.

gnutls_x509_privkey_sign_data
-----------------------------

 -- Function: int gnutls_x509_privkey_sign_data (gnutls_x509_privkey_t
          KEY, gnutls_digest_algorithm_t DIGEST, unsigned int FLAGS,
          const gnutls_datum_t * DATA, void * SIGNATURE, size_t *
          SIGNATURE_SIZE)
     KEY: Holds the key

     DIGEST: should be MD5 or SHA1

     FLAGS: should be 0 for now

     DATA: holds the data to be signed

     SIGNATURE: will contain the signature

     SIGNATURE_SIZE: holds the size of signature (and will be replaced
     by the new size)

     This function will sign the given data using a signature algorithm
     supported by the private key.  Signature algorithms are always used
     together with a hash functions.  Different hash functions may be
     used for the RSA algorithm, but only SHA-1 for the DSA keys.

     If the buffer provided is not long enough to hold the output, then
     * 'signature_size' is updated and 'GNUTLS_E_SHORT_MEMORY_BUFFER'
     will be returned.

     Use 'gnutls_x509_crt_get_preferred_hash_algorithm()' to determine
     the hash algorithm.

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     *Deprecated:* Use 'gnutls_privkey_sign_data()' .

gnutls_x509_privkey_sign_hash
-----------------------------

 -- Function: int gnutls_x509_privkey_sign_hash (gnutls_x509_privkey_t
          KEY, const gnutls_datum_t * HASH, gnutls_datum_t * SIGNATURE)
     KEY: Holds the key

     HASH: holds the data to be signed

     SIGNATURE: will contain newly allocated signature

     This function will sign the given hash using the private key.  Do
     not use this function directly unless you know what it is.  Typical
     signing requires the data to be hashed and stored in special
     formats (e.g.  BER Digest-Info for RSA).

     *Returns:* On success, 'GNUTLS_E_SUCCESS' (0) is returned,
     otherwise a negative error value.

     Deprecated in: 2.12.0


File: gnutls.info,  Node: Copying Information,  Next: Bibliography,  Prev: API reference,  Up: Top

Appendix F Copying Information
******************************

GNU Free Documentation License
==============================

                     Version 1.3, 3 November 2008

     Copyright (C) 2000, 2001, 2002, 2007, 2008 Free Software Foundation, Inc.
     <http://fsf.org/>

     Everyone is permitted to copy and distribute verbatim copies
     of this license document, but changing it is not allowed.

  0. PREAMBLE

     The purpose of this License is to make a manual, textbook, or other
     functional and useful document "free" in the sense of freedom: to
     assure everyone the effective freedom to copy and redistribute it,
     with or without modifying it, either commercially or
     noncommercially.  Secondarily, this License preserves for the
     author and publisher a way to get credit for their work, while not
     being considered responsible for modifications made by others.

     This License is a kind of "copyleft", which means that derivative
     works of the document must themselves be free in the same sense.
     It complements the GNU General Public License, which is a copyleft
     license designed for free software.

     We have designed this License in order to use it for manuals for
     free software, because free software needs free documentation: a
     free program should come with manuals providing the same freedoms
     that the software does.  But this License is not limited to
     software manuals; it can be used for any textual work, regardless
     of subject matter or whether it is published as a printed book.  We
     recommend this License principally for works whose purpose is
     instruction or reference.

  1. APPLICABILITY AND DEFINITIONS

     This License applies to any manual or other work, in any medium,
     that contains a notice placed by the copyright holder saying it can
     be distributed under the terms of this License.  Such a notice
     grants a world-wide, royalty-free license, unlimited in duration,
     to use that work under the conditions stated herein.  The
     "Document", below, refers to any such manual or work.  Any member
     of the public is a licensee, and is addressed as "you".  You accept
     the license if you copy, modify or distribute the work in a way
     requiring permission under copyright law.

     A "Modified Version" of the Document means any work containing the
     Document or a portion of it, either copied verbatim, or with
     modifications and/or translated into another language.

     A "Secondary Section" is a named appendix or a front-matter section
     of the Document that deals exclusively with the relationship of the
     publishers or authors of the Document to the Document's overall
     subject (or to related matters) and contains nothing that could
     fall directly within that overall subject.  (Thus, if the Document
     is in part a textbook of mathematics, a Secondary Section may not
     explain any mathematics.)  The relationship could be a matter of
     historical connection with the subject or with related matters, or
     of legal, commercial, philosophical, ethical or political position
     regarding them.

     The "Invariant Sections" are certain Secondary Sections whose
     titles are designated, as being those of Invariant Sections, in the
     notice that says that the Document is released under this License.
     If a section does not fit the above definition of Secondary then it
     is not allowed to be designated as Invariant.  The Document may
     contain zero Invariant Sections.  If the Document does not identify
     any Invariant Sections then there are none.

     The "Cover Texts" are certain short passages of text that are
     listed, as Front-Cover Texts or Back-Cover Texts, in the notice
     that says that the Document is released under this License.  A
     Front-Cover Text may be at most 5 words, and a Back-Cover Text may
     be at most 25 words.

     A "Transparent" copy of the Document means a machine-readable copy,
     represented in a format whose specification is available to the
     general public, that is suitable for revising the document
     straightforwardly with generic text editors or (for images composed
     of pixels) generic paint programs or (for drawings) some widely
     available drawing editor, and that is suitable for input to text
     formatters or for automatic translation to a variety of formats
     suitable for input to text formatters.  A copy made in an otherwise
     Transparent file format whose markup, or absence of markup, has
     been arranged to thwart or discourage subsequent modification by
     readers is not Transparent.  An image format is not Transparent if
     used for any substantial amount of text.  A copy that is not
     "Transparent" is called "Opaque".

     Examples of suitable formats for Transparent copies include plain
     ASCII without markup, Texinfo input format, LaTeX input format,
     SGML or XML using a publicly available DTD, and standard-conforming
     simple HTML, PostScript or PDF designed for human modification.
     Examples of transparent image formats include PNG, XCF and JPG.
     Opaque formats include proprietary formats that can be read and
     edited only by proprietary word processors, SGML or XML for which
     the DTD and/or processing tools are not generally available, and
     the machine-generated HTML, PostScript or PDF produced by some word
     processors for output purposes only.

     The "Title Page" means, for a printed book, the title page itself,
     plus such following pages as are needed to hold, legibly, the
     material this License requires to appear in the title page.  For
     works in formats which do not have any title page as such, "Title
     Page" means the text near the most prominent appearance of the
     work's title, preceding the beginning of the body of the text.

     The "publisher" means any person or entity that distributes copies
     of the Document to the public.

     A section "Entitled XYZ" means a named subunit of the Document
     whose title either is precisely XYZ or contains XYZ in parentheses
     following text that translates XYZ in another language.  (Here XYZ
     stands for a specific section name mentioned below, such as
     "Acknowledgements", "Dedications", "Endorsements", or "History".)
     To "Preserve the Title" of such a section when you modify the
     Document means that it remains a section "Entitled XYZ" according
     to this definition.

     The Document may include Warranty Disclaimers next to the notice
     which states that this License applies to the Document.  These
     Warranty Disclaimers are considered to be included by reference in
     this License, but only as regards disclaiming warranties: any other
     implication that these Warranty Disclaimers may have is void and
     has no effect on the meaning of this License.

  2. VERBATIM COPYING

     You may copy and distribute the Document in any medium, either
     commercially or noncommercially, provided that this License, the
     copyright notices, and the license notice saying this License
     applies to the Document are reproduced in all copies, and that you
     add no other conditions whatsoever to those of this License.  You
     may not use technical measures to obstruct or control the reading
     or further copying of the copies you make or distribute.  However,
     you may accept compensation in exchange for copies.  If you
     distribute a large enough number of copies you must also follow the
     conditions in section 3.

     You may also lend copies, under the same conditions stated above,
     and you may publicly display copies.

  3. COPYING IN QUANTITY

     If you publish printed copies (or copies in media that commonly
     have printed covers) of the Document, numbering more than 100, and
     the Document's license notice requires Cover Texts, you must
     enclose the copies in covers that carry, clearly and legibly, all
     these Cover Texts: Front-Cover Texts on the front cover, and
     Back-Cover Texts on the back cover.  Both covers must also clearly
     and legibly identify you as the publisher of these copies.  The
     front cover must present the full title with all words of the title
     equally prominent and visible.  You may add other material on the
     covers in addition.  Copying with changes limited to the covers, as
     long as they preserve the title of the Document and satisfy these
     conditions, can be treated as verbatim copying in other respects.

     If the required texts for either cover are too voluminous to fit
     legibly, you should put the first ones listed (as many as fit
     reasonably) on the actual cover, and continue the rest onto
     adjacent pages.

     If you publish or distribute Opaque copies of the Document
     numbering more than 100, you must either include a machine-readable
     Transparent copy along with each Opaque copy, or state in or with
     each Opaque copy a computer-network location from which the general
     network-using public has access to download using public-standard
     network protocols a complete Transparent copy of the Document, free
     of added material.  If you use the latter option, you must take
     reasonably prudent steps, when you begin distribution of Opaque
     copies in quantity, to ensure that this Transparent copy will
     remain thus accessible at the stated location until at least one
     year after the last time you distribute an Opaque copy (directly or
     through your agents or retailers) of that edition to the public.

     It is requested, but not required, that you contact the authors of
     the Document well before redistributing any large number of copies,
     to give them a chance to provide you with an updated version of the
     Document.

  4. MODIFICATIONS

     You may copy and distribute a Modified Version of the Document
     under the conditions of sections 2 and 3 above, provided that you
     release the Modified Version under precisely this License, with the
     Modified Version filling the role of the Document, thus licensing
     distribution and modification of the Modified Version to whoever
     possesses a copy of it.  In addition, you must do these things in
     the Modified Version:

       A. Use in the Title Page (and on the covers, if any) a title
          distinct from that of the Document, and from those of previous
          versions (which should, if there were any, be listed in the
          History section of the Document).  You may use the same title
          as a previous version if the original publisher of that
          version gives permission.

       B. List on the Title Page, as authors, one or more persons or
          entities responsible for authorship of the modifications in
          the Modified Version, together with at least five of the
          principal authors of the Document (all of its principal
          authors, if it has fewer than five), unless they release you
          from this requirement.

       C. State on the Title page the name of the publisher of the
          Modified Version, as the publisher.

       D. Preserve all the copyright notices of the Document.

       E. Add an appropriate copyright notice for your modifications
          adjacent to the other copyright notices.

       F. Include, immediately after the copyright notices, a license
          notice giving the public permission to use the Modified
          Version under the terms of this License, in the form shown in
          the Addendum below.

       G. Preserve in that license notice the full lists of Invariant
          Sections and required Cover Texts given in the Document's
          license notice.

       H. Include an unaltered copy of this License.

       I. Preserve the section Entitled "History", Preserve its Title,
          and add to it an item stating at least the title, year, new
          authors, and publisher of the Modified Version as given on the
          Title Page.  If there is no section Entitled "History" in the
          Document, create one stating the title, year, authors, and
          publisher of the Document as given on its Title Page, then add
          an item describing the Modified Version as stated in the
          previous sentence.

       J. Preserve the network location, if any, given in the Document
          for public access to a Transparent copy of the Document, and
          likewise the network locations given in the Document for
          previous versions it was based on.  These may be placed in the
          "History" section.  You may omit a network location for a work
          that was published at least four years before the Document
          itself, or if the original publisher of the version it refers
          to gives permission.

       K. For any section Entitled "Acknowledgements" or "Dedications",
          Preserve the Title of the section, and preserve in the section
          all the substance and tone of each of the contributor
          acknowledgements and/or dedications given therein.

       L. Preserve all the Invariant Sections of the Document, unaltered
          in their text and in their titles.  Section numbers or the
          equivalent are not considered part of the section titles.

       M. Delete any section Entitled "Endorsements".  Such a section
          may not be included in the Modified Version.

       N. Do not retitle any existing section to be Entitled
          "Endorsements" or to conflict in title with any Invariant
          Section.

       O. Preserve any Warranty Disclaimers.

     If the Modified Version includes new front-matter sections or
     appendices that qualify as Secondary Sections and contain no
     material copied from the Document, you may at your option designate
     some or all of these sections as invariant.  To do this, add their
     titles to the list of Invariant Sections in the Modified Version's
     license notice.  These titles must be distinct from any other
     section titles.

     You may add a section Entitled "Endorsements", provided it contains
     nothing but endorsements of your Modified Version by various
     parties--for example, statements of peer review or that the text
     has been approved by an organization as the authoritative
     definition of a standard.

     You may add a passage of up to five words as a Front-Cover Text,
     and a passage of up to 25 words as a Back-Cover Text, to the end of
     the list of Cover Texts in the Modified Version.  Only one passage
     of Front-Cover Text and one of Back-Cover Text may be added by (or
     through arrangements made by) any one entity.  If the Document
     already includes a cover text for the same cover, previously added
     by you or by arrangement made by the same entity you are acting on
     behalf of, you may not add another; but you may replace the old
     one, on explicit permission from the previous publisher that added
     the old one.

     The author(s) and publisher(s) of the Document do not by this
     License give permission to use their names for publicity for or to
     assert or imply endorsement of any Modified Version.

  5. COMBINING DOCUMENTS

     You may combine the Document with other documents released under
     this License, under the terms defined in section 4 above for
     modified versions, provided that you include in the combination all
     of the Invariant Sections of all of the original documents,
     unmodified, and list them all as Invariant Sections of your
     combined work in its license notice, and that you preserve all
     their Warranty Disclaimers.

     The combined work need only contain one copy of this License, and
     multiple identical Invariant Sections may be replaced with a single
     copy.  If there are multiple Invariant Sections with the same name
     but different contents, make the title of each such section unique
     by adding at the end of it, in parentheses, the name of the
     original author or publisher of that section if known, or else a
     unique number.  Make the same adjustment to the section titles in
     the list of Invariant Sections in the license notice of the
     combined work.

     In the combination, you must combine any sections Entitled
     "History" in the various original documents, forming one section
     Entitled "History"; likewise combine any sections Entitled
     "Acknowledgements", and any sections Entitled "Dedications".  You
     must delete all sections Entitled "Endorsements."

  6. COLLECTIONS OF DOCUMENTS

     You may make a collection consisting of the Document and other
     documents released under this License, and replace the individual
     copies of this License in the various documents with a single copy
     that is included in the collection, provided that you follow the
     rules of this License for verbatim copying of each of the documents
     in all other respects.

     You may extract a single document from such a collection, and
     distribute it individually under this License, provided you insert
     a copy of this License into the extracted document, and follow this
     License in all other respects regarding verbatim copying of that
     document.

  7. AGGREGATION WITH INDEPENDENT WORKS

     A compilation of the Document or its derivatives with other
     separate and independent documents or works, in or on a volume of a
     storage or distribution medium, is called an "aggregate" if the
     copyright resulting from the compilation is not used to limit the
     legal rights of the compilation's users beyond what the individual
     works permit.  When the Document is included in an aggregate, this
     License does not apply to the other works in the aggregate which
     are not themselves derivative works of the Document.

     If the Cover Text requirement of section 3 is applicable to these
     copies of the Document, then if the Document is less than one half
     of the entire aggregate, the Document's Cover Texts may be placed
     on covers that bracket the Document within the aggregate, or the
     electronic equivalent of covers if the Document is in electronic
     form.  Otherwise they must appear on printed covers that bracket
     the whole aggregate.

  8. TRANSLATION

     Translation is considered a kind of modification, so you may
     distribute translations of the Document under the terms of section
     4.  Replacing Invariant Sections with translations requires special
     permission from their copyright holders, but you may include
     translations of some or all Invariant Sections in addition to the
     original versions of these Invariant Sections.  You may include a
     translation of this License, and all the license notices in the
     Document, and any Warranty Disclaimers, provided that you also
     include the original English version of this License and the
     original versions of those notices and disclaimers.  In case of a
     disagreement between the translation and the original version of
     this License or a notice or disclaimer, the original version will
     prevail.

     If a section in the Document is Entitled "Acknowledgements",
     "Dedications", or "History", the requirement (section 4) to
     Preserve its Title (section 1) will typically require changing the
     actual title.

  9. TERMINATION

     You may not copy, modify, sublicense, or distribute the Document
     except as expressly provided under this License.  Any attempt
     otherwise to copy, modify, sublicense, or distribute it is void,
     and will automatically terminate your rights under this License.

     However, if you cease all violation of this License, then your
     license from a particular copyright holder is reinstated (a)
     provisionally, unless and until the copyright holder explicitly and
     finally terminates your license, and (b) permanently, if the
     copyright holder fails to notify you of the violation by some
     reasonable means prior to 60 days after the cessation.

     Moreover, your license from a particular copyright holder is
     reinstated permanently if the copyright holder notifies you of the
     violation by some reasonable means, this is the first time you have
     received notice of violation of this License (for any work) from
     that copyright holder, and you cure the violation prior to 30 days
     after your receipt of the notice.

     Termination of your rights under this section does not terminate
     the licenses of parties who have received copies or rights from you
     under this License.  If your rights have been terminated and not
     permanently reinstated, receipt of a copy of some or all of the
     same material does not give you any rights to use it.

  10. FUTURE REVISIONS OF THIS LICENSE

     The Free Software Foundation may publish new, revised versions of
     the GNU Free Documentation License from time to time.  Such new
     versions will be similar in spirit to the present version, but may
     differ in detail to address new problems or concerns.  See
     <http://www.gnu.org/copyleft/>.

     Each version of the License is given a distinguishing version
     number.  If the Document specifies that a particular numbered
     version of this License "or any later version" applies to it, you
     have the option of following the terms and conditions either of
     that specified version or of any later version that has been
     published (not as a draft) by the Free Software Foundation.  If the
     Document does not specify a version number of this License, you may
     choose any version ever published (not as a draft) by the Free
     Software Foundation.  If the Document specifies that a proxy can
     decide which future versions of this License can be used, that
     proxy's public statement of acceptance of a version permanently
     authorizes you to choose that version for the Document.

  11. RELICENSING

     "Massive Multiauthor Collaboration Site" (or "MMC Site") means any
     World Wide Web server that publishes copyrightable works and also
     provides prominent facilities for anybody to edit those works.  A
     public wiki that anybody can edit is an example of such a server.
     A "Massive Multiauthor Collaboration" (or "MMC") contained in the
     site means any set of copyrightable works thus published on the MMC
     site.

     "CC-BY-SA" means the Creative Commons Attribution-Share Alike 3.0
     license published by Creative Commons Corporation, a not-for-profit
     corporation with a principal place of business in San Francisco,
     California, as well as future copyleft versions of that license
     published by that same organization.

     "Incorporate" means to publish or republish a Document, in whole or
     in part, as part of another Document.

     An MMC is "eligible for relicensing" if it is licensed under this
     License, and if all works that were first published under this
     License somewhere other than this MMC, and subsequently
     incorporated in whole or in part into the MMC, (1) had no cover
     texts or invariant sections, and (2) were thus incorporated prior
     to November 1, 2008.

     The operator of an MMC Site may republish an MMC contained in the
     site under CC-BY-SA on the same site at any time before August 1,
     2009, provided the MMC is eligible for relicensing.

ADDENDUM: How to use this License for your documents
====================================================

To use this License in a document you have written, include a copy of
the License in the document and put the following copyright and license
notices just after the title page:

       Copyright (C)  YEAR  YOUR NAME.
       Permission is granted to copy, distribute and/or modify this document
       under the terms of the GNU Free Documentation License, Version 1.3
       or any later version published by the Free Software Foundation;
       with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
       Texts.  A copy of the license is included in the section entitled ``GNU
       Free Documentation License''.

If you have Invariant Sections, Front-Cover Texts and Back-Cover Texts,
replace the "with...Texts." line with this:

         with the Invariant Sections being LIST THEIR TITLES, with
         the Front-Cover Texts being LIST, and with the Back-Cover Texts
         being LIST.

If you have Invariant Sections without Cover Texts, or some other
combination of the three, merge those two alternatives to suit the
situation.

If your document contains nontrivial examples of program code, we
recommend releasing these examples in parallel under your choice of free
software license, such as the GNU General Public License, to permit
their use in free software.


File: gnutls.info,  Node: Bibliography,  Next: Function and Data Index,  Prev: Copying Information,  Up: Top

Bibliography
************

[CBCATT]
     Bodo Moeller, "Security of CBC Ciphersuites in SSL/TLS: Problems
     and Countermeasures", 2002, available from
     <http://www.openssl.org/~bodo/tls-cbc.txt>.

[GPGH]
     Mike Ashley, "The GNU Privacy Handbook", 2002, available from
     <http://www.gnupg.org/gph/en/manual.pdf>.

[GUTPKI]
     Peter Gutmann, "Everything you never wanted to know about PKI but
     were forced to find out", Available from
     <http://www.cs.auckland.ac.nz/~pgut001/>.

[KEYPIN]
     Chris Evans and Chris Palmer, "Public Key Pinning Extension for
     HTTP", Available from
     <http://tools.ietf.org/html/draft-ietf-websec-key-pinning-01>.

[NISTSP80057]
     NIST Special Publication 800-57, "Recommendation for Key Management
     - Part 1: General (Revised)", March 2007, available from
     <http://csrc.nist.gov/publications/nistpubs/800-57/sp800-57-Part1-revised2_Mar08-2007.pdf>.

[RFC2246]
     Tim Dierks and Christopher Allen, "The TLS Protocol Version 1.0",
     January 1999, Available from <http://www.ietf.org/rfc/rfc2246.txt>.

[RFC4418]
     Ted Krovetz, "UMAC: Message Authentication Code using Universal
     Hashing", March 2006, Available from
     <http://www.ietf.org/rfc/rfc4418.txt>.

[RFC4680]
     S. Santesson, "TLS Handshake Message for Supplemental Data",
     September 2006, Available from
     <http://www.ietf.org/rfc/rfc4680.txt>.

[RFC4514]
     Kurt D. Zeilenga, "Lightweight Directory Access Protocol (LDAP):
     String Representation of Distinguished Names", June 2006, Available
     from <http://www.ietf.org/rfc/rfc4513.txt>.

[RFC4346]
     Tim Dierks and Eric Rescorla, "The TLS Protocol Version 1.1", Match
     2006, Available from <http://www.ietf.org/rfc/rfc4346.txt>.

[RFC4347]
     Eric Rescorla and Nagendra Modadugu, "Datagram Transport Layer
     Security", April 2006, Available from
     <http://www.ietf.org/rfc/rfc4347.txt>.

[RFC5246]
     Tim Dierks and Eric Rescorla, "The TLS Protocol Version 1.2",
     August 2008, Available from <http://www.ietf.org/rfc/rfc5246.txt>.

[RFC2440]
     Jon Callas, Lutz Donnerhacke, Hal Finney and Rodney Thayer,
     "OpenPGP Message Format", November 1998, Available from
     <http://www.ietf.org/rfc/rfc2440.txt>.

[RFC4880]
     Jon Callas, Lutz Donnerhacke, Hal Finney, David Shaw and Rodney
     Thayer, "OpenPGP Message Format", November 2007, Available from
     <http://www.ietf.org/rfc/rfc4880.txt>.

[RFC4211]
     J. Schaad, "Internet X.509 Public Key Infrastructure Certificate
     Request Message Format (CRMF)", September 2005, Available from
     <http://www.ietf.org/rfc/rfc4211.txt>.

[RFC2817]
     Rohit Khare and Scott Lawrence, "Upgrading to TLS Within HTTP/1.1",
     May 2000, Available from <http://www.ietf.org/rfc/rfc2817.txt>

[RFC2818]
     Eric Rescorla, "HTTP Over TLS", May 2000, Available from
     <http://www.ietf/rfc/rfc2818.txt>.

[RFC2945]
     Tom Wu, "The SRP Authentication and Key Exchange System", September
     2000, Available from <http://www.ietf.org/rfc/rfc2945.txt>.

[RFC2986]
     Magnus Nystrom and Burt Kaliski, "PKCS 10 v1.7: Certification
     Request Syntax Specification", November 2000, Available from
     <http://www.ietf.org/rfc/rfc2986.txt>.

[PKIX]
     D. Cooper, S. Santesson, S. Farrel, S. Boeyen, R. Housley, W. Polk,
     "Internet X.509 Public Key Infrastructure Certificate and
     Certificate Revocation List (CRL) Profile", May 2008, available
     from <http://www.ietf.org/rfc/rfc5280.txt>.

[RFC3749]
     Scott Hollenbeck, "Transport Layer Security Protocol Compression
     Methods", May 2004, available from
     <http://www.ietf.org/rfc/rfc3749.txt>.

[RFC3820]
     Steven Tuecke, Von Welch, Doug Engert, Laura Pearlman, and Mary
     Thompson, "Internet X.509 Public Key Infrastructure (PKI) Proxy
     Certificate Profile", June 2004, available from
     <http://www.ietf.org/rfc/rfc3820>.

[RFC6520]
     R. Seggelmann, M. Tuexen, and M. Williams, "Transport Layer
     Security (TLS) and Datagram Transport Layer Security (DTLS)
     Heartbeat Extension", February 2012, available from
     <http://www.ietf.org/rfc/rfc6520>.

[RFC5746]
     E. Rescorla, M. Ray, S. Dispensa, and N. Oskov, "Transport Layer
     Security (TLS) Renegotiation Indication Extension", February 2010,
     available from <http://www.ietf.org/rfc/rfc5746>.

[RFC5280]
     D. Cooper, S. Santesson, S. Farrell, S. Boeyen, R. Housley, and W.
     Polk, "Internet X.509 Public Key Infrastructure Certificate and
     Certificate Revocation List (CRL) Profile", May 2008, available
     from <http://www.ietf.org/rfc/rfc5280>.

[TLSTKT]
     Joseph Salowey, Hao Zhou, Pasi Eronen, Hannes Tschofenig,
     "Transport Layer Security (TLS) Session Resumption without
     Server-Side State", January 2008, available from
     <http://www.ietf.org/rfc/rfc5077>.

[PKCS12]
     RSA Laboratories, "PKCS 12 v1.0: Personal Information Exchange
     Syntax", June 1999, Available from <http://www.rsa.com>.

[PKCS11]
     RSA Laboratories, "PKCS #11 Base Functionality v2.30: Cryptoki –
     Draft 4", July 2009, Available from <http://www.rsa.com>.

[RESCORLA]
     Eric Rescorla, "SSL and TLS: Designing and Building Secure
     Systems", 2001

[SELKEY]
     Arjen Lenstra and Eric Verheul, "Selecting Cryptographic Key
     Sizes", 2003, available from
     <http://www.win.tue.nl/~klenstra/key.pdf>.

[SSL3]
     Alan Freier, Philip Karlton and Paul Kocher, "The Secure Sockets
     Layer (SSL) Protocol Version 3.0", August 2011, Available from
     <http://www.ietf.org/rfc/rfc6101.txt>.

[STEVENS]
     Richard Stevens, "UNIX Network Programming, Volume 1", Prentice
     Hall PTR, January 1998

[TLSEXT]
     Simon Blake-Wilson, Magnus Nystrom, David Hopwood, Jan Mikkelsen
     and Tim Wright, "Transport Layer Security (TLS) Extensions", June
     2003, Available from <http://www.ietf.org/rfc/rfc3546.txt>.

[TLSPGP]
     Nikos Mavrogiannopoulos, "Using OpenPGP keys for TLS
     authentication", January 2011.  Available from
     <http://www.ietf.org/rfc/rfc6091.txt>.

[TLSSRP]
     David Taylor, Trevor Perrin, Tom Wu and Nikos Mavrogiannopoulos,
     "Using SRP for TLS Authentication", November 2007.  Available from
     <http://www.ietf.org/rfc/rfc5054.txt>.

[TLSPSK]
     Pasi Eronen and Hannes Tschofenig, "Pre-shared key Ciphersuites for
     TLS", December 2005, Available from
     <http://www.ietf.org/rfc/rfc4279.txt>.

[TOMSRP]
     Tom Wu, "The Stanford SRP Authentication Project", Available at
     <http://srp.stanford.edu/>.

[WEGER]
     Arjen Lenstra and Xiaoyun Wang and Benne de Weger, "Colliding X.509
     Certificates", Cryptology ePrint Archive, Report 2005/067,
     Available at <http://eprint.iacr.org/>.

[ECRYPT]
     European Network of Excellence in Cryptology II, "ECRYPT II Yearly
     Report on Algorithms and Keysizes (2009-2010)", Available at
     <http://www.ecrypt.eu.org/documents/D.SPA.13.pdf>.

[RFC5056]
     N. Williams, "On the Use of Channel Bindings to Secure Channels",
     November 2007, available from <http://www.ietf.org/rfc/rfc5056>.

[RFC5929]
     J. Altman, N. Williams, L. Zhu, "Channel Bindings for TLS", July
     2010, available from <http://www.ietf.org/rfc/rfc5929>.

[PKCS11URI]
     J. Pechanec, D. Moffat, "The PKCS#11 URI Scheme", September 2013,
     Work in progress, available from
     <http://tools.ietf.org/html/draft-pechanec-pkcs11uri-13>.

[TPMURI]
     C. Latze, N. Mavrogiannopoulos, "The TPMKEY URI Scheme", January
     2013, Work in progress, available from
     <http://tools.ietf.org/html/draft-mavrogiannopoulos-tpmuri-01>.

[ANDERSON]
     R. J. Anderson, "Security Engineering: A Guide to Building
     Dependable Distributed Systems", John Wiley \& Sons, Inc., 2001.

[RFC4821]
     M. Mathis, J. Heffner, "Packetization Layer Path MTU Discovery",
     March 2007, available from <http://www.ietf.org/rfc/rfc4821.txt>.

[RFC2560]
     M. Myers et al, "X.509 Internet Public Key Infrastructure Online
     Certificate Status Protocol - OCSP", June 1999, Available from
     <http://www.ietf.org/rfc/rfc2560.txt>.

[RIVESTCRL]
     R. L. Rivest, "Can We Eliminate Certificate Revocation Lists?",
     Proceedings of Financial Cryptography '98; Springer Lecture Notes
     in Computer Science No.  1465 (Rafael Hirschfeld, ed.), February
     1998), pages 178-183, available from
     <http://people.csail.mit.edu/rivest/Rivest-CanWeEliminateCertificateRevocationLists.pdf>.


File: gnutls.info,  Node: Function and Data Index,  Next: Concept Index,  Prev: Bibliography,  Up: Top

Function and Data Index
***********************

 [index ]
* Menu:

* dane_cert_type_name:                   DANE API.           (line   13)
* dane_cert_usage_name:                  DANE API.           (line   24)
* dane_match_type_name:                  DANE API.           (line   36)
* dane_query_data:                       DANE API.           (line   47)
* dane_query_deinit:                     DANE API.           (line   70)
* dane_query_entries:                    DANE API.           (line   78)
* dane_query_status:                     DANE API.           (line   88)
* dane_query_tlsa:                       DANE API.           (line   99)
* dane_query_to_raw_tlsa:                DANE API.           (line  120)
* dane_raw_tlsa:                         DANE API.           (line  155)
* dane_state_deinit:                     DANE API.           (line  185)
* dane_state_init:                       DANE API.           (line  193)
* dane_state_set_dlv_file:               DANE API.           (line  206)
* dane_strerror:                         DANE API.           (line  218)
* dane_verification_status_print:        DANE API.           (line  232)
* dane_verify_crt:                       Certificate verification.
                                                             (line  165)
* dane_verify_crt <1>:                   DANE API.           (line  251)
* dane_verify_crt_raw:                   DANE API.           (line  305)
* dane_verify_session_crt:               DANE API.           (line  354)
* gnutls_alert_get:                      Handling alerts.    (line   18)
* gnutls_alert_get <1>:                  Core TLS API.       (line   11)
* gnutls_alert_get_name:                 Handling alerts.    (line   31)
* gnutls_alert_get_name <1>:             Core TLS API.       (line   27)
* gnutls_alert_get_strname:              Core TLS API.       (line   40)
* gnutls_alert_send:                     Handling alerts.    (line   45)
* gnutls_alert_send <1>:                 Core TLS API.       (line   54)
* gnutls_alert_send_appropriate:         Core TLS API.       (line   78)
* gnutls_alpn_get_selected_protocol:     Core TLS API.       (line  101)
* gnutls_alpn_set_protocols:             Core TLS API.       (line  119)
* gnutls_anon_allocate_client_credentials: Core TLS API.     (line  145)
* gnutls_anon_allocate_server_credentials: Core TLS API.     (line  157)
* gnutls_anon_free_client_credentials:   Core TLS API.       (line  169)
* gnutls_anon_free_server_credentials:   Core TLS API.       (line  179)
* gnutls_anon_set_params_function:       Core TLS API.       (line  189)
* gnutls_anon_set_server_dh_params:      Core TLS API.       (line  203)
* gnutls_anon_set_server_params_function: Core TLS API.      (line  217)
* gnutls_auth_client_get_type:           Core TLS API.       (line  231)
* gnutls_auth_get_type:                  Core TLS API.       (line  245)
* gnutls_auth_server_get_type:           Core TLS API.       (line  263)
* gnutls_bye:                            Data transfer and termination.
                                                             (line  152)
* gnutls_bye <1>:                        Core TLS API.       (line  277)
* gnutls_certificate_activation_time_peers: Core TLS API.    (line  313)
* gnutls_certificate_allocate_credentials: Core TLS API.     (line  328)
* gnutls_certificate_client_get_request_status: Core TLS API.
                                                             (line  341)
* gnutls_certificate_client_set_retrieve_function: Compatibility API.
                                                             (line   13)
* gnutls_certificate_expiration_time_peers: Core TLS API.    (line  353)
* gnutls_certificate_free_cas:           Core TLS API.       (line  384)
* gnutls_certificate_free_ca_names:      Core TLS API.       (line  367)
* gnutls_certificate_free_credentials:   Core TLS API.       (line  396)
* gnutls_certificate_free_crls:          Core TLS API.       (line  410)
* gnutls_certificate_free_keys:          Core TLS API.       (line  420)
* gnutls_certificate_get_crt_raw:        Core TLS API.       (line  432)
* gnutls_certificate_get_issuer:         Core TLS API.       (line  458)
* gnutls_certificate_get_ours:           Core TLS API.       (line  484)
* gnutls_certificate_get_peers:          Core TLS API.       (line  499)
* gnutls_certificate_get_peers_subkey_id: Core TLS API.      (line  521)
* gnutls_certificate_send_x509_rdn_sequence: Certificate credentials.
                                                             (line  177)
* gnutls_certificate_send_x509_rdn_sequence <1>: Core TLS API.
                                                             (line  538)
* gnutls_certificate_server_set_request: Certificate credentials.
                                                             (line  165)
* gnutls_certificate_server_set_request <1>: Core TLS API.   (line  556)
* gnutls_certificate_server_set_retrieve_function: Compatibility API.
                                                             (line   54)
* gnutls_certificate_set_dh_params:      Core TLS API.       (line  571)
* gnutls_certificate_set_key:            Certificate credentials.
                                                             (line   67)
* gnutls_certificate_set_key <1>:        Abstract key API.   (line   12)
* gnutls_certificate_set_ocsp_status_request_file: Core TLS API.
                                                             (line  588)
* gnutls_certificate_set_ocsp_status_request_function: Core TLS API.
                                                             (line  612)
* gnutls_certificate_set_openpgp_key:    OpenPGP API.        (line   12)
* gnutls_certificate_set_openpgp_keyring_file: OpenPGP certificates.
                                                             (line  159)
* gnutls_certificate_set_openpgp_keyring_file <1>: OpenPGP API.
                                                             (line  140)
* gnutls_certificate_set_openpgp_keyring_mem: OpenPGP API.   (line  160)
* gnutls_certificate_set_openpgp_key_file: OpenPGP API.      (line   37)
* gnutls_certificate_set_openpgp_key_file2: OpenPGP API.     (line   58)
* gnutls_certificate_set_openpgp_key_mem: OpenPGP API.       (line   88)
* gnutls_certificate_set_openpgp_key_mem2: OpenPGP API.      (line  110)
* gnutls_certificate_set_params_function: Parameter generation.
                                                             (line   39)
* gnutls_certificate_set_params_function <1>: Core TLS API.  (line  646)
* gnutls_certificate_set_pin_function:   Certificate credentials.
                                                             (line   43)
* gnutls_certificate_set_pin_function <1>: Core TLS API.     (line  661)
* gnutls_certificate_set_retrieve_function: Core TLS API.    (line  682)
* gnutls_certificate_set_retrieve_function2: Abstract key API.
                                                             (line   53)
* gnutls_certificate_set_rsa_export_params: Compatibility API.
                                                             (line   82)
* gnutls_certificate_set_trust_list:     X509 certificate API.
                                                             (line   12)
* gnutls_certificate_set_verify_flags:   Core TLS API.       (line  727)
* gnutls_certificate_set_verify_function: Certificate credentials.
                                                             (line  250)
* gnutls_certificate_set_verify_function <1>: Core TLS API.  (line  740)
* gnutls_certificate_set_verify_limits:  Core TLS API.       (line  769)
* gnutls_certificate_set_x509_crl:       Core TLS API.       (line  788)
* gnutls_certificate_set_x509_crl_file:  Core TLS API.       (line  812)
* gnutls_certificate_set_x509_crl_mem:   Core TLS API.       (line  834)
* gnutls_certificate_set_x509_key:       Core TLS API.       (line  856)
* gnutls_certificate_set_x509_key_file:  Core TLS API.       (line  890)
* gnutls_certificate_set_x509_key_file2: Core TLS API.       (line  933)
* gnutls_certificate_set_x509_key_mem:   Core TLS API.       (line  981)
* gnutls_certificate_set_x509_key_mem2:  Core TLS API.       (line 1015)
* gnutls_certificate_set_x509_simple_pkcs12_file: Core TLS API.
                                                             (line 1054)
* gnutls_certificate_set_x509_simple_pkcs12_mem: Core TLS API.
                                                             (line 1095)
* gnutls_certificate_set_x509_system_trust: Using a PKCS11 token with TLS.
                                                             (line   14)
* gnutls_certificate_set_x509_system_trust <1>: Core TLS API.
                                                             (line 1138)
* gnutls_certificate_set_x509_trust:     Core TLS API.       (line 1156)
* gnutls_certificate_set_x509_trust_dir: Core TLS API.       (line 1183)
* gnutls_certificate_set_x509_trust_file: Core TLS API.      (line 1205)
* gnutls_certificate_set_x509_trust_mem: Core TLS API.       (line 1235)
* gnutls_certificate_type_get:           Core TLS API.       (line 1260)
* gnutls_certificate_type_get_id:        Core TLS API.       (line 1273)
* gnutls_certificate_type_get_name:      Core TLS API.       (line 1285)
* gnutls_certificate_type_list:          Core TLS API.       (line 1297)
* gnutls_certificate_type_set_priority:  Compatibility API.  (line   96)
* gnutls_certificate_verification_status_print: Core TLS API.
                                                             (line 1308)
* gnutls_certificate_verify_flags:       Verifying a certificate in the context of TLS session.
                                                             (line    6)
* gnutls_certificate_verify_flags <1>:   Certificate verification.
                                                             (line    6)
* gnutls_certificate_verify_peers:       Core TLS API.       (line 1333)
* gnutls_certificate_verify_peers2:      Core TLS API.       (line 1376)
* gnutls_certificate_verify_peers3:      Certificate credentials.
                                                             (line  217)
* gnutls_certificate_verify_peers3 <1>:  Core TLS API.       (line 1411)
* gnutls_check_version:                  Core TLS API.       (line 1447)
* gnutls_cipher_add_auth:                Cryptographic API.  (line   12)
* gnutls_cipher_decrypt:                 Cryptographic API.  (line   31)
* gnutls_cipher_decrypt2:                Cryptographic API.  (line   53)
* gnutls_cipher_deinit:                  Cryptographic API.  (line   80)
* gnutls_cipher_encrypt:                 Cryptographic API.  (line   91)
* gnutls_cipher_encrypt2:                Cryptographic API.  (line  109)
* gnutls_cipher_get:                     Core TLS API.       (line 1464)
* gnutls_cipher_get_block_size:          Cryptographic API.  (line  132)
* gnutls_cipher_get_id:                  Core TLS API.       (line 1476)
* gnutls_cipher_get_iv_size:             Cryptographic API.  (line  143)
* gnutls_cipher_get_key_size:            Core TLS API.       (line 1488)
* gnutls_cipher_get_name:                Core TLS API.       (line 1500)
* gnutls_cipher_get_tag_size:            Cryptographic API.  (line  156)
* gnutls_cipher_init:                    Cryptographic API.  (line  167)
* gnutls_cipher_list:                    Core TLS API.       (line 1512)
* gnutls_cipher_set_iv:                  Cryptographic API.  (line  190)
* gnutls_cipher_set_priority:            Compatibility API.  (line  114)
* gnutls_cipher_suite_get_name:          Core TLS API.       (line 1528)
* gnutls_cipher_suite_info:              Core TLS API.       (line 1546)
* gnutls_cipher_tag:                     Cryptographic API.  (line  206)
* gnutls_compression_get:                Core TLS API.       (line 1576)
* gnutls_compression_get_id:             Core TLS API.       (line 1588)
* gnutls_compression_get_name:           Core TLS API.       (line 1600)
* gnutls_compression_list:               Core TLS API.       (line 1612)
* gnutls_compression_set_priority:       Compatibility API.  (line  132)
* gnutls_credentials_clear:              Core TLS API.       (line 1623)
* gnutls_credentials_get:                Core TLS API.       (line 1631)
* gnutls_credentials_set:                Session initialization.
                                                             (line   50)
* gnutls_credentials_set <1>:            Core TLS API.       (line 1658)
* gnutls_db_check_entry:                 Core TLS API.       (line 1693)
* gnutls_db_check_entry_time:            Core TLS API.       (line 1707)
* gnutls_db_get_default_cache_expiration: Core TLS API.      (line 1718)
* gnutls_db_get_ptr:                     Core TLS API.       (line 1726)
* gnutls_db_remove_session:              Core TLS API.       (line 1737)
* gnutls_db_set_cache_expiration:        Core TLS API.       (line 1751)
* gnutls_db_set_ptr:                     Core TLS API.       (line 1763)
* gnutls_db_set_remove_function:         Core TLS API.       (line 1775)
* gnutls_db_set_retrieve_function:       Core TLS API.       (line 1790)
* gnutls_db_set_store_function:          Core TLS API.       (line 1810)
* gnutls_deinit:                         Data transfer and termination.
                                                             (line  185)
* gnutls_deinit <1>:                     Core TLS API.       (line 1825)
* gnutls_dh_get_group:                   Core TLS API.       (line 1835)
* gnutls_dh_get_peers_public_bits:       Core TLS API.       (line 1855)
* gnutls_dh_get_prime_bits:              Core TLS API.       (line 1869)
* gnutls_dh_get_pubkey:                  Core TLS API.       (line 1885)
* gnutls_dh_get_secret_bits:             Core TLS API.       (line 1902)
* gnutls_dh_params_cpy:                  Core TLS API.       (line 1915)
* gnutls_dh_params_deinit:               Core TLS API.       (line 1930)
* gnutls_dh_params_export2_pkcs3:        Core TLS API.       (line 1939)
* gnutls_dh_params_export_pkcs3:         Core TLS API.       (line 1963)
* gnutls_dh_params_export_raw:           Core TLS API.       (line 1990)
* gnutls_dh_params_generate2:            Core TLS API.       (line 2012)
* gnutls_dh_params_import_pkcs3:         Core TLS API.       (line 2035)
* gnutls_dh_params_import_raw:           Core TLS API.       (line 2057)
* gnutls_dh_params_init:                 Core TLS API.       (line 2076)
* gnutls_dh_set_prime_bits:              Core TLS API.       (line 2087)
* gnutls_digest_get_id:                  Core TLS API.       (line 2115)
* gnutls_digest_get_name:                Core TLS API.       (line 2128)
* gnutls_digest_list:                    Core TLS API.       (line 2140)
* gnutls_dtls_cookie_send:               Datagram TLS API.   (line   11)
* gnutls_dtls_cookie_verify:             Datagram TLS API.   (line   45)
* gnutls_dtls_get_data_mtu:              Datagram TLS API.   (line   74)
* gnutls_dtls_get_mtu:                   Datagram TLS API.   (line   89)
* gnutls_dtls_get_timeout:               Setting up the transport layer.
                                                             (line  160)
* gnutls_dtls_get_timeout <1>:           Datagram TLS API.   (line  104)
* gnutls_dtls_prestate_set:              Datagram TLS API.   (line  121)
* gnutls_dtls_set_data_mtu:              Datagram TLS API.   (line  139)
* gnutls_dtls_set_mtu:                   Datagram TLS API.   (line  165)
* gnutls_dtls_set_timeouts:              Datagram TLS API.   (line  182)
* gnutls_ecc_curve_get:                  Core TLS API.       (line 2154)
* gnutls_ecc_curve_get_name:             Core TLS API.       (line 2168)
* gnutls_ecc_curve_get_size:             Core TLS API.       (line 2182)
* gnutls_ecc_curve_list:                 Core TLS API.       (line 2194)
* gnutls_error_is_fatal:                 Data transfer and termination.
                                                             (line   78)
* gnutls_error_is_fatal <1>:             Core TLS API.       (line 2206)
* gnutls_error_to_alert:                 Handling alerts.    (line   66)
* gnutls_error_to_alert <1>:             Core TLS API.       (line 2226)
* gnutls_est_record_overhead_size:       Core TLS API.       (line 2245)
* gnutls_fingerprint:                    Core TLS API.       (line 2272)
* gnutls_fips140_mode_enabled:           Core TLS API.       (line 2299)
* gnutls_global_deinit:                  Core TLS API.       (line 2310)
* gnutls_global_init:                    Core TLS API.       (line 2318)
* gnutls_global_set_audit_log_function:  Debugging and auditing.
                                                             (line   57)
* gnutls_global_set_audit_log_function <1>: Core TLS API.    (line 2346)
* gnutls_global_set_log_function:        Core TLS API.       (line 2365)
* gnutls_global_set_log_level:           Core TLS API.       (line 2380)
* gnutls_global_set_mem_functions:       Compatibility API.  (line  155)
* gnutls_global_set_mutex:               Thread safety.      (line   41)
* gnutls_global_set_mutex <1>:           Core TLS API.       (line 2393)
* gnutls_global_set_time_function:       Core TLS API.       (line 2418)
* gnutls_handshake:                      TLS handshake.      (line   10)
* gnutls_handshake <1>:                  Core TLS API.       (line 2432)
* gnutls_handshake_description_get_name: Core TLS API.       (line 2472)
* gnutls_handshake_get_last_in:          Core TLS API.       (line 2484)
* gnutls_handshake_get_last_out:         Core TLS API.       (line 2501)
* gnutls_handshake_set_hook_function:    Core TLS API.       (line 2518)
* gnutls_handshake_set_max_packet_length: Core TLS API.      (line 2554)
* gnutls_handshake_set_post_client_hello_function: Core TLS API.
                                                             (line 2572)
* gnutls_handshake_set_private_extensions: Core TLS API.     (line 2603)
* gnutls_handshake_set_random:           Core TLS API.       (line 2622)
* gnutls_handshake_set_timeout:          TLS handshake.      (line   47)
* gnutls_handshake_set_timeout <1>:      Core TLS API.       (line 2644)
* gnutls_hash:                           Cryptographic API.  (line  224)
* gnutls_hash_deinit:                    Cryptographic API.  (line  242)
* gnutls_hash_fast:                      Cryptographic API.  (line  256)
* gnutls_hash_get_len:                   Cryptographic API.  (line  276)
* gnutls_hash_init:                      Cryptographic API.  (line  290)
* gnutls_hash_output:                    Cryptographic API.  (line  308)
* gnutls_heartbeat_allowed:              Core TLS API.       (line 2659)
* gnutls_heartbeat_enable:               Core TLS API.       (line 2676)
* gnutls_heartbeat_get_timeout:          Core TLS API.       (line 2699)
* gnutls_heartbeat_ping:                 Core TLS API.       (line 2715)
* gnutls_heartbeat_pong:                 Core TLS API.       (line 2743)
* gnutls_heartbeat_set_timeouts:         Core TLS API.       (line 2759)
* gnutls_hex2bin:                        Core TLS API.       (line 2784)
* gnutls_hex_decode:                     Core TLS API.       (line 2805)
* gnutls_hex_encode:                     Core TLS API.       (line 2824)
* gnutls_hmac:                           Cryptographic API.  (line  322)
* gnutls_hmac_deinit:                    Cryptographic API.  (line  340)
* gnutls_hmac_fast:                      Cryptographic API.  (line  354)
* gnutls_hmac_get_len:                   Cryptographic API.  (line  379)
* gnutls_hmac_init:                      Cryptographic API.  (line  392)
* gnutls_hmac_output:                    Cryptographic API.  (line  418)
* gnutls_hmac_set_nonce:                 Cryptographic API.  (line  432)
* gnutls_init:                           Session initialization.
                                                             (line   14)
* gnutls_init <1>:                       Core TLS API.       (line 2843)
* gnutls_key_generate:                   Core TLS API.       (line 2874)
* gnutls_kx_get:                         Core TLS API.       (line 2891)
* gnutls_kx_get_id:                      Core TLS API.       (line 2903)
* gnutls_kx_get_name:                    Core TLS API.       (line 2915)
* gnutls_kx_list:                        Core TLS API.       (line 2927)
* gnutls_kx_set_priority:                Compatibility API.  (line  190)
* gnutls_load_file:                      Core TLS API.       (line 2939)
* gnutls_mac_get:                        Core TLS API.       (line 2957)
* gnutls_mac_get_id:                     Core TLS API.       (line 2969)
* gnutls_mac_get_key_size:               Core TLS API.       (line 2982)
* gnutls_mac_get_name:                   Core TLS API.       (line 2994)
* gnutls_mac_get_nonce_size:             Cryptographic API.  (line  447)
* gnutls_mac_list:                       Core TLS API.       (line 3006)
* gnutls_mac_set_priority:               Compatibility API.  (line  208)
* gnutls_ocsp_req_add_cert:              OCSP API.           (line   12)
* gnutls_ocsp_req_add_cert_id:           OCSP API.           (line   36)
* gnutls_ocsp_req_deinit:                OCSP API.           (line   69)
* gnutls_ocsp_req_export:                OCSP API.           (line   77)
* gnutls_ocsp_req_get_cert_id:           OCSP API.           (line   91)
* gnutls_ocsp_req_get_extension:         OCSP API.           (line  131)
* gnutls_ocsp_req_get_nonce:             OCSP API.           (line  165)
* gnutls_ocsp_req_get_version:           OCSP API.           (line  184)
* gnutls_ocsp_req_import:                OCSP API.           (line  196)
* gnutls_ocsp_req_init:                  OCSP API.           (line  212)
* gnutls_ocsp_req_print:                 OCSP API.           (line  223)
* gnutls_ocsp_req_randomize_nonce:       OCSP API.           (line  246)
* gnutls_ocsp_req_set_extension:         OCSP API.           (line  259)
* gnutls_ocsp_req_set_nonce:             OCSP API.           (line  280)
* gnutls_ocsp_resp_check_crt:            OCSP API.           (line  298)
* gnutls_ocsp_resp_deinit:               OCSP API.           (line  318)
* gnutls_ocsp_resp_export:               OCSP API.           (line  326)
* gnutls_ocsp_resp_get_certs:            OCSP API.           (line  340)
* gnutls_ocsp_resp_get_extension:        OCSP API.           (line  367)
* gnutls_ocsp_resp_get_nonce:            OCSP API.           (line  401)
* gnutls_ocsp_resp_get_produced:         OCSP API.           (line  421)
* gnutls_ocsp_resp_get_responder:        OCSP API.           (line  433)
* gnutls_ocsp_resp_get_response:         OCSP API.           (line  453)
* gnutls_ocsp_resp_get_signature:        OCSP API.           (line  480)
* gnutls_ocsp_resp_get_signature_algorithm: OCSP API.        (line  494)
* gnutls_ocsp_resp_get_single:           OCSP certificate status checking.
                                                             (line  155)
* gnutls_ocsp_resp_get_single <1>:       OCSP API.           (line  508)
* gnutls_ocsp_resp_get_status:           OCSP API.           (line  559)
* gnutls_ocsp_resp_get_version:          OCSP API.           (line  571)
* gnutls_ocsp_resp_import:               OCSP API.           (line  583)
* gnutls_ocsp_resp_init:                 OCSP API.           (line  599)
* gnutls_ocsp_resp_print:                OCSP API.           (line  610)
* gnutls_ocsp_resp_verify:               OCSP API.           (line  633)
* gnutls_ocsp_resp_verify_direct:        OCSP API.           (line  671)
* gnutls_ocsp_status_request_enable_client: Core TLS API.    (line 3018)
* gnutls_ocsp_status_request_get:        Core TLS API.       (line 3043)
* gnutls_ocsp_status_request_is_checked: Core TLS API.       (line 3062)
* gnutls_openpgp_crt_check_hostname:     OpenPGP API.        (line  182)
* gnutls_openpgp_crt_check_hostname2:    OpenPGP API.        (line  197)
* gnutls_openpgp_crt_deinit:             OpenPGP API.        (line  219)
* gnutls_openpgp_crt_export:             OpenPGP API.        (line  227)
* gnutls_openpgp_crt_export2:            OpenPGP API.        (line  248)
* gnutls_openpgp_crt_get_auth_subkey:    OpenPGP API.        (line  266)
* gnutls_openpgp_crt_get_creation_time:  OpenPGP API.        (line  285)
* gnutls_openpgp_crt_get_expiration_time: OpenPGP API.       (line  296)
* gnutls_openpgp_crt_get_fingerprint:    OpenPGP API.        (line  308)
* gnutls_openpgp_crt_get_key_id:         OpenPGP API.        (line  325)
* gnutls_openpgp_crt_get_key_usage:      OpenPGP API.        (line  340)
* gnutls_openpgp_crt_get_name:           OpenPGP API.        (line  355)
* gnutls_openpgp_crt_get_pk_algorithm:   OpenPGP API.        (line  376)
* gnutls_openpgp_crt_get_pk_dsa_raw:     OpenPGP API.        (line  396)
* gnutls_openpgp_crt_get_pk_rsa_raw:     OpenPGP API.        (line  421)
* gnutls_openpgp_crt_get_preferred_key_id: OpenPGP API.      (line  442)
* gnutls_openpgp_crt_get_revoked_status: OpenPGP API.        (line  456)
* gnutls_openpgp_crt_get_subkey_count:   OpenPGP API.        (line  470)
* gnutls_openpgp_crt_get_subkey_creation_time: OpenPGP API.  (line  485)
* gnutls_openpgp_crt_get_subkey_expiration_time: OpenPGP API.
                                                             (line  500)
* gnutls_openpgp_crt_get_subkey_fingerprint: OpenPGP API.    (line  516)
* gnutls_openpgp_crt_get_subkey_id:      OpenPGP API.        (line  538)
* gnutls_openpgp_crt_get_subkey_idx:     OpenPGP API.        (line  553)
* gnutls_openpgp_crt_get_subkey_pk_algorithm: OpenPGP API.   (line  568)
* gnutls_openpgp_crt_get_subkey_pk_dsa_raw: OpenPGP API.     (line  594)
* gnutls_openpgp_crt_get_subkey_pk_rsa_raw: OpenPGP API.     (line  621)
* gnutls_openpgp_crt_get_subkey_revoked_status: OpenPGP API. (line  644)
* gnutls_openpgp_crt_get_subkey_usage:   OpenPGP API.        (line  661)
* gnutls_openpgp_crt_get_version:        OpenPGP API.        (line  683)
* gnutls_openpgp_crt_import:             OpenPGP API.        (line  695)
* gnutls_openpgp_crt_init:               OpenPGP API.        (line  712)
* gnutls_openpgp_crt_print:              OpenPGP API.        (line  722)
* gnutls_openpgp_crt_set_preferred_key_id: OpenPGP API.      (line  743)
* gnutls_openpgp_crt_verify_ring:        OpenPGP certificates.
                                                             (line  113)
* gnutls_openpgp_crt_verify_ring <1>:    OpenPGP API.        (line  761)
* gnutls_openpgp_crt_verify_self:        OpenPGP certificates.
                                                             (line  137)
* gnutls_openpgp_crt_verify_self <1>:    OpenPGP API.        (line  788)
* gnutls_openpgp_keyring_check_id:       OpenPGP API.        (line  805)
* gnutls_openpgp_keyring_deinit:         OpenPGP API.        (line  822)
* gnutls_openpgp_keyring_get_crt:        OpenPGP API.        (line  831)
* gnutls_openpgp_keyring_get_crt_count:  OpenPGP API.        (line  850)
* gnutls_openpgp_keyring_import:         OpenPGP API.        (line  863)
* gnutls_openpgp_keyring_init:           OpenPGP API.        (line  881)
* gnutls_openpgp_privkey_deinit:         OpenPGP API.        (line  892)
* gnutls_openpgp_privkey_export:         OpenPGP API.        (line  901)
* gnutls_openpgp_privkey_export2:        OpenPGP API.        (line  930)
* gnutls_openpgp_privkey_export_dsa_raw: OpenPGP API.        (line  955)
* gnutls_openpgp_privkey_export_rsa_raw: OpenPGP API.        (line  983)
* gnutls_openpgp_privkey_export_subkey_dsa_raw: OpenPGP API. (line 1013)
* gnutls_openpgp_privkey_export_subkey_rsa_raw: OpenPGP API. (line 1043)
* gnutls_openpgp_privkey_get_fingerprint: OpenPGP API.       (line 1075)
* gnutls_openpgp_privkey_get_key_id:     OpenPGP API.        (line 1094)
* gnutls_openpgp_privkey_get_pk_algorithm: OpenPGP API.      (line 1109)
* gnutls_openpgp_privkey_get_preferred_key_id: OpenPGP API.  (line 1132)
* gnutls_openpgp_privkey_get_revoked_status: OpenPGP API.    (line 1146)
* gnutls_openpgp_privkey_get_subkey_count: OpenPGP API.      (line 1160)
* gnutls_openpgp_privkey_get_subkey_creation_time: OpenPGP API.
                                                             (line 1175)
* gnutls_openpgp_privkey_get_subkey_expiration_time: OpenPGP API.
                                                             (line 1190)
* gnutls_openpgp_privkey_get_subkey_fingerprint: OpenPGP API.
                                                             (line 1206)
* gnutls_openpgp_privkey_get_subkey_id:  OpenPGP API.        (line 1228)
* gnutls_openpgp_privkey_get_subkey_idx: OpenPGP API.        (line 1246)
* gnutls_openpgp_privkey_get_subkey_pk_algorithm: OpenPGP API.
                                                             (line 1262)
* gnutls_openpgp_privkey_get_subkey_revoked_status: OpenPGP API.
                                                             (line 1288)
* gnutls_openpgp_privkey_import:         OpenPGP API.        (line 1304)
* gnutls_openpgp_privkey_init:           OpenPGP API.        (line 1327)
* gnutls_openpgp_privkey_sec_param:      OpenPGP API.        (line 1338)
* gnutls_openpgp_privkey_set_preferred_key_id: OpenPGP API.  (line 1353)
* gnutls_openpgp_privkey_sign_hash:      Compatibility API.  (line  226)
* gnutls_openpgp_send_cert:              Core TLS API.       (line 3080)
* gnutls_openpgp_set_recv_key_function:  OpenPGP API.        (line 1372)
* gnutls_packet_deinit:                  Core TLS API.       (line 3095)
* gnutls_packet_get:                     Core TLS API.       (line 3106)
* gnutls_pcert_deinit:                   Abstract key API.   (line  103)
* gnutls_pcert_import_openpgp:           Abstract key API.   (line  113)
* gnutls_pcert_import_openpgp_raw:       Abstract key API.   (line  133)
* gnutls_pcert_import_x509:              Abstract key API.   (line  158)
* gnutls_pcert_import_x509_raw:          Abstract key API.   (line  178)
* gnutls_pcert_list_import_x509_raw:     Abstract key API.   (line  201)
* gnutls_pem_base64_decode:              Core TLS API.       (line 3124)
* gnutls_pem_base64_decode_alloc:        Core TLS API.       (line 3148)
* gnutls_pem_base64_encode:              Core TLS API.       (line 3170)
* gnutls_pem_base64_encode_alloc:        Core TLS API.       (line 3193)
* gnutls_perror:                         Core TLS API.       (line 3214)
* gnutls_pkcs11_add_provider:            PKCS 11 API.        (line   12)
* gnutls_pkcs11_copy_secret_key:         PKCS 11 API.        (line   35)
* gnutls_pkcs11_copy_x509_crt:           Writing objects.    (line   36)
* gnutls_pkcs11_copy_x509_crt <1>:       PKCS 11 API.        (line   60)
* gnutls_pkcs11_copy_x509_privkey:       Writing objects.    (line   13)
* gnutls_pkcs11_copy_x509_privkey <1>:   PKCS 11 API.        (line   82)
* gnutls_pkcs11_crt_is_known:            PKCS 11 API.        (line  108)
* gnutls_pkcs11_deinit:                  PKCS 11 API.        (line  139)
* gnutls_pkcs11_delete_url:              Writing objects.    (line   55)
* gnutls_pkcs11_delete_url <1>:          PKCS 11 API.        (line  150)
* gnutls_pkcs11_get_pin_function:        PKCS 11 API.        (line  167)
* gnutls_pkcs11_get_raw_issuer:          PKCS 11 API.        (line  181)
* gnutls_pkcs11_init:                    PKCS11 Initialization.
                                                             (line   30)
* gnutls_pkcs11_init <1>:                PKCS 11 API.        (line  207)
* gnutls_pkcs11_obj_deinit:              PKCS 11 API.        (line  233)
* gnutls_pkcs11_obj_export:              PKCS 11 API.        (line  243)
* gnutls_pkcs11_obj_export2:             PKCS 11 API.        (line  268)
* gnutls_pkcs11_obj_export3:             PKCS 11 API.        (line  288)
* gnutls_pkcs11_obj_export_url:          PKCS 11 API.        (line  310)
* gnutls_pkcs11_obj_flags_get_str:       PKCS 11 API.        (line  328)
* gnutls_pkcs11_obj_get_exts:            PKCS 11 API.        (line  344)
* gnutls_pkcs11_obj_get_flags:           PKCS 11 API.        (line  368)
* gnutls_pkcs11_obj_get_info:            Reading objects.    (line   27)
* gnutls_pkcs11_obj_get_info <1>:        PKCS 11 API.        (line  386)
* gnutls_pkcs11_obj_get_type:            PKCS 11 API.        (line  411)
* gnutls_pkcs11_obj_import_url:          PKCS 11 API.        (line  425)
* gnutls_pkcs11_obj_init:                PKCS 11 API.        (line  447)
* gnutls_pkcs11_obj_list_import_url:     PKCS 11 API.        (line  460)
* gnutls_pkcs11_obj_list_import_url2:    PKCS 11 API.        (line  486)
* gnutls_pkcs11_obj_set_pin_function:    PKCS 11 API.        (line  517)
* gnutls_pkcs11_privkey_deinit:          PKCS 11 API.        (line  535)
* gnutls_pkcs11_privkey_export_pubkey:   PKCS 11 API.        (line  544)
* gnutls_pkcs11_privkey_export_url:      PKCS 11 API.        (line  569)
* gnutls_pkcs11_privkey_generate:        PKCS 11 API.        (line  586)
* gnutls_pkcs11_privkey_generate2:       PKCS 11 API.        (line  611)
* gnutls_pkcs11_privkey_get_info:        PKCS 11 API.        (line  647)
* gnutls_pkcs11_privkey_get_pk_algorithm: PKCS 11 API.       (line  670)
* gnutls_pkcs11_privkey_import_url:      PKCS 11 API.        (line  686)
* gnutls_pkcs11_privkey_init:            PKCS 11 API.        (line  706)
* gnutls_pkcs11_privkey_set_pin_function: PKCS 11 API.       (line  718)
* gnutls_pkcs11_privkey_status:          PKCS 11 API.        (line  736)
* gnutls_pkcs11_reinit:                  PKCS 11 API.        (line  750)
* gnutls_pkcs11_set_pin_function:        PKCS 11 API.        (line  767)
* gnutls_pkcs11_set_token_function:      PKCS 11 API.        (line  782)
* gnutls_pkcs11_token_get_flags:         PKCS 11 API.        (line  796)
* gnutls_pkcs11_token_get_info:          PKCS 11 API.        (line  816)
* gnutls_pkcs11_token_get_mechanism:     PKCS 11 API.        (line  839)
* gnutls_pkcs11_token_get_random:        PKCS 11 API.        (line  859)
* gnutls_pkcs11_token_get_url:           PKCS 11 API.        (line  877)
* gnutls_pkcs11_token_init:              PKCS 11 API.        (line  897)
* gnutls_pkcs11_token_set_pin:           PKCS 11 API.        (line  916)
* gnutls_pkcs11_type_get_name:           PKCS 11 API.        (line  936)
* gnutls_pkcs12_bag_decrypt:             PKCS 12 API.        (line   12)
* gnutls_pkcs12_bag_deinit:              PKCS 12 API.        (line   27)
* gnutls_pkcs12_bag_encrypt:             PKCS 12 API.        (line   35)
* gnutls_pkcs12_bag_get_count:           PKCS 12 API.        (line   52)
* gnutls_pkcs12_bag_get_data:            PKCS 12 API.        (line   64)
* gnutls_pkcs12_bag_get_friendly_name:   PKCS 12 API.        (line   82)
* gnutls_pkcs12_bag_get_key_id:          PKCS 12 API.        (line  101)
* gnutls_pkcs12_bag_get_type:            PKCS 12 API.        (line  120)
* gnutls_pkcs12_bag_init:                PKCS 12 API.        (line  133)
* gnutls_pkcs12_bag_set_crl:             PKCS 12 API.        (line  146)
* gnutls_pkcs12_bag_set_crt:             PKCS 12 API.        (line  161)
* gnutls_pkcs12_bag_set_data:            PKCS 12 API.        (line  176)
* gnutls_pkcs12_bag_set_friendly_name:   PKCS 12 API.        (line  193)
* gnutls_pkcs12_bag_set_key_id:          PKCS 12 API.        (line  213)
* gnutls_pkcs12_deinit:                  PKCS 12 API.        (line  233)
* gnutls_pkcs12_export:                  PKCS 12 API.        (line  241)
* gnutls_pkcs12_export2:                 PKCS 12 API.        (line  269)
* gnutls_pkcs12_generate_mac:            PKCS 12 API.        (line  293)
* gnutls_pkcs12_get_bag:                 PKCS 12 API.        (line  307)
* gnutls_pkcs12_import:                  PKCS 12 API.        (line  327)
* gnutls_pkcs12_init:                    PKCS 12 API.        (line  350)
* gnutls_pkcs12_set_bag:                 PKCS 12 API.        (line  363)
* gnutls_pkcs12_simple_parse:            Managing encrypted keys.
                                                             (line  143)
* gnutls_pkcs12_simple_parse <1>:        PKCS 12 API.        (line  377)
* gnutls_pkcs12_verify_mac:              PKCS 12 API.        (line  443)
* gnutls_pkcs7_deinit:                   X509 certificate API.
                                                             (line   36)
* gnutls_pkcs7_delete_crl:               X509 certificate API.
                                                             (line   44)
* gnutls_pkcs7_delete_crt:               X509 certificate API.
                                                             (line   59)
* gnutls_pkcs7_export:                   X509 certificate API.
                                                             (line   74)
* gnutls_pkcs7_export2:                  X509 certificate API.
                                                             (line  101)
* gnutls_pkcs7_get_crl_count:            X509 certificate API.
                                                             (line  124)
* gnutls_pkcs7_get_crl_raw:              X509 certificate API.
                                                             (line  136)
* gnutls_pkcs7_get_crt_count:            X509 certificate API.
                                                             (line  157)
* gnutls_pkcs7_get_crt_raw:              X509 certificate API.
                                                             (line  169)
* gnutls_pkcs7_import:                   X509 certificate API.
                                                             (line  194)
* gnutls_pkcs7_init:                     X509 certificate API.
                                                             (line  214)
* gnutls_pkcs7_set_crl:                  X509 certificate API.
                                                             (line  227)
* gnutls_pkcs7_set_crl_raw:              X509 certificate API.
                                                             (line  242)
* gnutls_pkcs7_set_crt:                  X509 certificate API.
                                                             (line  256)
* gnutls_pkcs7_set_crt_raw:              X509 certificate API.
                                                             (line  272)
* gnutls_pk_algorithm_get_name:          Core TLS API.       (line 3223)
* gnutls_pk_bits_to_sec_param:           Selecting cryptographic key sizes.
                                                             (line   85)
* gnutls_pk_bits_to_sec_param <1>:       Core TLS API.       (line 3235)
* gnutls_pk_get_id:                      Core TLS API.       (line 3252)
* gnutls_pk_get_name:                    Core TLS API.       (line 3267)
* gnutls_pk_list:                        Core TLS API.       (line 3281)
* gnutls_pk_to_sign:                     Core TLS API.       (line 3295)
* gnutls_prf:                            Core TLS API.       (line 3310)
* gnutls_prf_raw:                        Core TLS API.       (line 3353)
* gnutls_priority_certificate_type_list: Core TLS API.       (line 3392)
* gnutls_priority_cipher_list:           Core TLS API.       (line 3408)
* gnutls_priority_compression_list:      Core TLS API.       (line 3423)
* gnutls_priority_deinit:                Core TLS API.       (line 3439)
* gnutls_priority_ecc_curve_list:        Core TLS API.       (line 3448)
* gnutls_priority_get_cipher_suite_index: Core TLS API.      (line 3463)
* gnutls_priority_init:                  Core TLS API.       (line 3486)
* gnutls_priority_kx_list:               Core TLS API.       (line 3581)
* gnutls_priority_mac_list:              Core TLS API.       (line 3597)
* gnutls_priority_protocol_list:         Core TLS API.       (line 3612)
* gnutls_priority_set:                   Core TLS API.       (line 3628)
* gnutls_priority_set_direct:            Core TLS API.       (line 3642)
* gnutls_priority_sign_list:             Core TLS API.       (line 3666)
* gnutls_privkey_decrypt_data:           Operations.         (line  133)
* gnutls_privkey_decrypt_data <1>:       Abstract key API.   (line  232)
* gnutls_privkey_deinit:                 Abstract key API.   (line  255)
* gnutls_privkey_export_dsa_raw:         Abstract key API.   (line  265)
* gnutls_privkey_export_ecc_raw:         Abstract key API.   (line  292)
* gnutls_privkey_export_rsa_raw:         Abstract key API.   (line  317)
* gnutls_privkey_generate:               Abstract key API.   (line  351)
* gnutls_privkey_get_pk_algorithm:       Abstract key API.   (line  380)
* gnutls_privkey_get_type:               Abstract key API.   (line  399)
* gnutls_privkey_import_dsa_raw:         Abstract key API.   (line  414)
* gnutls_privkey_import_ecc_raw:         Abstract key API.   (line  440)
* gnutls_privkey_import_ext:             Abstract key API.   (line  465)
* gnutls_privkey_import_ext2:            Abstract private keys.
                                                             (line   48)
* gnutls_privkey_import_ext2 <1>:        Abstract key API.   (line  495)
* gnutls_privkey_import_openpgp:         Abstract key API.   (line  532)
* gnutls_privkey_import_openpgp_raw:     Abstract key API.   (line  559)
* gnutls_privkey_import_pkcs11:          Abstract key API.   (line  584)
* gnutls_privkey_import_pkcs11_url:      Abstract key API.   (line  610)
* gnutls_privkey_import_rsa_raw:         Abstract key API.   (line  627)
* gnutls_privkey_import_tpm_raw:         Abstract key API.   (line  660)
* gnutls_privkey_import_tpm_url:         Using keys.         (line   16)
* gnutls_privkey_import_tpm_url <1>:     Abstract key API.   (line  690)
* gnutls_privkey_import_url:             Abstract private keys.
                                                             (line   23)
* gnutls_privkey_import_url <1>:         Abstract key API.   (line  721)
* gnutls_privkey_import_x509:            Abstract key API.   (line  741)
* gnutls_privkey_import_x509_raw:        Managing encrypted keys.
                                                             (line   27)
* gnutls_privkey_import_x509_raw <1>:    Abstract key API.   (line  767)
* gnutls_privkey_init:                   Abstract key API.   (line  794)
* gnutls_privkey_set_pin_function:       Abstract key API.   (line  807)
* gnutls_privkey_sign_data:              Operations.         (line   74)
* gnutls_privkey_sign_data <1>:          Abstract key API.   (line  827)
* gnutls_privkey_sign_hash:              Operations.         (line  102)
* gnutls_privkey_sign_hash <1>:          Abstract key API.   (line  858)
* gnutls_privkey_sign_raw_data:          Compatibility API.  (line  247)
* gnutls_privkey_status:                 Abstract key API.   (line  892)
* gnutls_privkey_verify_params:          Abstract key API.   (line  908)
* gnutls_protocol_get_id:                Core TLS API.       (line 3682)
* gnutls_protocol_get_name:              Core TLS API.       (line 3694)
* gnutls_protocol_get_version:           Core TLS API.       (line 3706)
* gnutls_protocol_list:                  Core TLS API.       (line 3717)
* gnutls_protocol_set_priority:          Compatibility API.  (line  278)
* gnutls_psk_allocate_client_credentials: Core TLS API.      (line 3729)
* gnutls_psk_allocate_server_credentials: Core TLS API.      (line 3742)
* gnutls_psk_client_get_hint:            Core TLS API.       (line 3755)
* gnutls_psk_free_client_credentials:    Core TLS API.       (line 3771)
* gnutls_psk_free_server_credentials:    Core TLS API.       (line 3781)
* gnutls_psk_server_get_username:        Core TLS API.       (line 3791)
* gnutls_psk_set_client_credentials:     Core TLS API.       (line 3803)
* gnutls_psk_set_client_credentials_function: PSK credentials.
                                                             (line   22)
* gnutls_psk_set_client_credentials_function <1>: Core TLS API.
                                                             (line 3828)
* gnutls_psk_set_params_function:        Core TLS API.       (line 3852)
* gnutls_psk_set_server_credentials_file: PSK credentials.   (line   58)
* gnutls_psk_set_server_credentials_file <1>: Core TLS API.  (line 3866)
* gnutls_psk_set_server_credentials_function: Core TLS API.  (line 3883)
* gnutls_psk_set_server_credentials_hint: Core TLS API.      (line 3908)
* gnutls_psk_set_server_dh_params:       Core TLS API.       (line 3927)
* gnutls_psk_set_server_params_function: Core TLS API.       (line 3941)
* gnutls_pubkey_deinit:                  Abstract key API.   (line  921)
* gnutls_pubkey_encrypt_data:            Operations.         (line   56)
* gnutls_pubkey_encrypt_data <1>:        Abstract key API.   (line  931)
* gnutls_pubkey_export:                  Abstract key API.   (line  952)
* gnutls_pubkey_export2:                 Abstract public keys.
                                                             (line   20)
* gnutls_pubkey_export2 <1>:             Abstract key API.   (line  983)
* gnutls_pubkey_export_dsa_raw:          Abstract key API.   (line 1008)
* gnutls_pubkey_export_ecc_raw:          Abstract key API.   (line 1033)
* gnutls_pubkey_export_ecc_x962:         Abstract key API.   (line 1056)
* gnutls_pubkey_export_rsa_raw:          Abstract key API.   (line 1076)
* gnutls_pubkey_get_key_id:              Abstract key API.   (line 1096)
* gnutls_pubkey_get_key_usage:           Abstract key API.   (line 1125)
* gnutls_pubkey_get_openpgp_key_id:      Abstract key API.   (line 1142)
* gnutls_pubkey_get_pk_algorithm:        Abstract key API.   (line 1175)
* gnutls_pubkey_get_preferred_hash_algorithm: Abstract key API.
                                                             (line 1194)
* gnutls_pubkey_get_verify_algorithm:    Abstract key API.   (line 1222)
* gnutls_pubkey_import:                  Abstract key API.   (line 1243)
* gnutls_pubkey_import_dsa_raw:          Abstract key API.   (line 1264)
* gnutls_pubkey_import_ecc_raw:          Abstract key API.   (line 1289)
* gnutls_pubkey_import_ecc_x962:         Abstract key API.   (line 1311)
* gnutls_pubkey_import_openpgp:          Abstract key API.   (line 1331)
* gnutls_pubkey_import_openpgp_raw:      Abstract key API.   (line 1352)
* gnutls_pubkey_import_pkcs11:           Abstract key API.   (line 1377)
* gnutls_pubkey_import_pkcs11_url:       Abstract key API.   (line 1396)
* gnutls_pubkey_import_privkey:          Abstract key API.   (line 1415)
* gnutls_pubkey_import_rsa_raw:          Abstract key API.   (line 1436)
* gnutls_pubkey_import_tpm_raw:          Abstract key API.   (line 1456)
* gnutls_pubkey_import_tpm_url:          Using keys.         (line   44)
* gnutls_pubkey_import_tpm_url <1>:      Abstract key API.   (line 1483)
* gnutls_pubkey_import_url:              Abstract key API.   (line 1511)
* gnutls_pubkey_import_x509:             Abstract key API.   (line 1530)
* gnutls_pubkey_import_x509_crq:         Abstract key API.   (line 1549)
* gnutls_pubkey_import_x509_raw:         Abstract key API.   (line 1568)
* gnutls_pubkey_init:                    Abstract key API.   (line 1590)
* gnutls_pubkey_print:                   Abstract key API.   (line 1603)
* gnutls_pubkey_set_key_usage:           Abstract key API.   (line 1628)
* gnutls_pubkey_set_pin_function:        Abstract key API.   (line 1646)
* gnutls_pubkey_verify_data:             Abstract key API.   (line 1666)
* gnutls_pubkey_verify_data2:            Operations.         (line    9)
* gnutls_pubkey_verify_data2 <1>:        Abstract key API.   (line 1692)
* gnutls_pubkey_verify_hash:             Abstract key API.   (line 1717)
* gnutls_pubkey_verify_hash2:            Operations.         (line   31)
* gnutls_pubkey_verify_hash2 <1>:        Abstract key API.   (line 1743)
* gnutls_pubkey_verify_params:           Abstract key API.   (line 1771)
* gnutls_random_art:                     Core TLS API.       (line 3955)
* gnutls_range_split:                    Core TLS API.       (line 3980)
* gnutls_record_can_use_length_hiding:   Core TLS API.       (line 4006)
* gnutls_record_check_corked:            Core TLS API.       (line 4024)
* gnutls_record_check_pending:           Data transfer and termination.
                                                             (line  135)
* gnutls_record_check_pending <1>:       Core TLS API.       (line 4038)
* gnutls_record_cork:                    Buffered data transfer.
                                                             (line   12)
* gnutls_record_cork <1>:                Core TLS API.       (line 4051)
* gnutls_record_disable_padding:         Core TLS API.       (line 4065)
* gnutls_record_get_direction:           Asynchronous operation.
                                                             (line   40)
* gnutls_record_get_direction <1>:       Core TLS API.       (line 4080)
* gnutls_record_get_discarded:           Datagram TLS API.   (line  212)
* gnutls_record_get_max_size:            Core TLS API.       (line 4103)
* gnutls_record_overhead_size:           Core TLS API.       (line 4115)
* gnutls_record_recv:                    Data transfer and termination.
                                                             (line   49)
* gnutls_record_recv <1>:                Core TLS API.       (line 4127)
* gnutls_record_recv_packet:             Core TLS API.       (line 4159)
* gnutls_record_recv_seq:                Data transfer and termination.
                                                             (line  104)
* gnutls_record_recv_seq <1>:            Core TLS API.       (line 4183)
* gnutls_record_send:                    Data transfer and termination.
                                                             (line   12)
* gnutls_record_send <1>:                Core TLS API.       (line 4210)
* gnutls_record_send_range:              Core TLS API.       (line 4250)
* gnutls_record_set_max_empty_records:   Core TLS API.       (line 4280)
* gnutls_record_set_max_size:            Core TLS API.       (line 4300)
* gnutls_record_set_timeout:             Core TLS API.       (line 4324)
* gnutls_record_uncork:                  Buffered data transfer.
                                                             (line   23)
* gnutls_record_uncork <1>:              Core TLS API.       (line 4339)
* gnutls_rehandshake:                    Core TLS API.       (line 4364)
* gnutls_rnd:                            Random number generation.
                                                             (line   21)
* gnutls_rnd <1>:                        Cryptographic API.  (line  460)
* gnutls_rnd_refresh:                    Cryptographic API.  (line  480)
* gnutls_rsa_export_get_modulus_bits:    Compatibility API.  (line  293)
* gnutls_rsa_export_get_pubkey:          Compatibility API.  (line  305)
* gnutls_rsa_params_cpy:                 Compatibility API.  (line  323)
* gnutls_rsa_params_deinit:              Compatibility API.  (line  338)
* gnutls_rsa_params_export_pkcs1:        Compatibility API.  (line  347)
* gnutls_rsa_params_export_raw:          Compatibility API.  (line  374)
* gnutls_rsa_params_generate2:           Compatibility API.  (line  404)
* gnutls_rsa_params_import_pkcs1:        Compatibility API.  (line  425)
* gnutls_rsa_params_import_raw:          Compatibility API.  (line  447)
* gnutls_rsa_params_init:                Compatibility API.  (line  475)
* gnutls_safe_renegotiation_status:      Core TLS API.       (line 4395)
* gnutls_sec_param_get_name:             Core TLS API.       (line 4410)
* gnutls_sec_param_to_pk_bits:           Selecting cryptographic key sizes.
                                                             (line   69)
* gnutls_sec_param_to_pk_bits <1>:       Core TLS API.       (line 4424)
* gnutls_sec_param_to_symmetric_bits:    Core TLS API.       (line 4443)
* gnutls_server_name_get:                Core TLS API.       (line 4457)
* gnutls_server_name_set:                Core TLS API.       (line 4494)
* gnutls_session_channel_binding:        Core TLS API.       (line 4521)
* gnutls_session_enable_compatibility_mode: Core TLS API.    (line 4542)
* gnutls_session_force_valid:            Core TLS API.       (line 4560)
* gnutls_session_get_data:               Core TLS API.       (line 4571)
* gnutls_session_get_data2:              Core TLS API.       (line 4593)
* gnutls_session_get_desc:               Core TLS API.       (line 4615)
* gnutls_session_get_id:                 Core TLS API.       (line 4629)
* gnutls_session_get_id2:                Core TLS API.       (line 4653)
* gnutls_session_get_ptr:                Core TLS API.       (line 4670)
* gnutls_session_get_random:             Core TLS API.       (line 4682)
* gnutls_session_is_resumed:             Session resumption. (line   27)
* gnutls_session_is_resumed <1>:         Core TLS API.       (line 4702)
* gnutls_session_resumption_requested:   Session resumption. (line   90)
* gnutls_session_resumption_requested <1>: Core TLS API.     (line 4713)
* gnutls_session_set_data:               Core TLS API.       (line 4726)
* gnutls_session_set_id:                 Core TLS API.       (line 4749)
* gnutls_session_set_premaster:          Core TLS API.       (line 4768)
* gnutls_session_set_ptr:                Core TLS API.       (line 4803)
* gnutls_session_ticket_enable_client:   Core TLS API.       (line 4816)
* gnutls_session_ticket_enable_server:   Session resumption. (line   62)
* gnutls_session_ticket_enable_server <1>: Core TLS API.     (line 4831)
* gnutls_session_ticket_key_generate:    Session resumption. (line   77)
* gnutls_session_ticket_key_generate <1>: Core TLS API.      (line 4849)
* gnutls_set_default_export_priority:    Compatibility API.  (line  488)
* gnutls_set_default_priority:           Core TLS API.       (line 4865)
* gnutls_sign_algorithm_get:             Core TLS API.       (line 4877)
* gnutls_sign_algorithm_get_client:      Core TLS API.       (line 4890)
* gnutls_sign_algorithm_get_requested:   Core TLS API.       (line 4904)
* gnutls_sign_callback_get:              Compatibility API.  (line  511)
* gnutls_sign_callback_set:              Compatibility API.  (line  527)
* gnutls_sign_get_hash_algorithm:        Core TLS API.       (line 4931)
* gnutls_sign_get_id:                    Core TLS API.       (line 4946)
* gnutls_sign_get_name:                  Core TLS API.       (line 4958)
* gnutls_sign_get_pk_algorithm:          Core TLS API.       (line 4970)
* gnutls_sign_is_secure:                 Core TLS API.       (line 4985)
* gnutls_sign_list:                      Core TLS API.       (line 4995)
* gnutls_srp_allocate_client_credentials: Core TLS API.      (line 5005)
* gnutls_srp_allocate_server_credentials: Core TLS API.      (line 5018)
* gnutls_srp_base64_decode:              Core TLS API.       (line 5031)
* gnutls_srp_base64_decode_alloc:        Core TLS API.       (line 5053)
* gnutls_srp_base64_encode:              Core TLS API.       (line 5073)
* gnutls_srp_base64_encode_alloc:        Core TLS API.       (line 5095)
* gnutls_srp_free_client_credentials:    Core TLS API.       (line 5116)
* gnutls_srp_free_server_credentials:    Core TLS API.       (line 5126)
* gnutls_srp_server_get_username:        Core TLS API.       (line 5136)
* gnutls_srp_set_client_credentials:     Core TLS API.       (line 5149)
* gnutls_srp_set_client_credentials_function: SRP credentials.
                                                             (line   19)
* gnutls_srp_set_client_credentials_function <1>: Core TLS API.
                                                             (line 5170)
* gnutls_srp_set_prime_bits:             Core TLS API.       (line 5200)
* gnutls_srp_set_server_credentials_file: SRP credentials.   (line   53)
* gnutls_srp_set_server_credentials_file <1>: Core TLS API.  (line 5221)
* gnutls_srp_set_server_credentials_function: SRP credentials.
                                                             (line   70)
* gnutls_srp_set_server_credentials_function <1>: Core TLS API.
                                                             (line 5241)
* gnutls_srp_set_server_fake_salt_seed:  Core TLS API.       (line 5279)
* gnutls_srp_verifier:                   Authentication using SRP.
                                                             (line   43)
* gnutls_srp_verifier <1>:               Core TLS API.       (line 5316)
* gnutls_srtp_get_keys:                  SRTP.               (line   31)
* gnutls_srtp_get_keys <1>:              Core TLS API.       (line 5345)
* gnutls_srtp_get_mki:                   Core TLS API.       (line 5383)
* gnutls_srtp_get_profile_id:            Core TLS API.       (line 5401)
* gnutls_srtp_get_profile_name:          Core TLS API.       (line 5417)
* gnutls_srtp_get_selected_profile:      Core TLS API.       (line 5432)
* gnutls_srtp_set_mki:                   Core TLS API.       (line 5448)
* gnutls_srtp_set_profile:               Core TLS API.       (line 5465)
* gnutls_srtp_set_profile_direct:        Core TLS API.       (line 5482)
* gnutls_store_commitment:               Certificate verification.
                                                             (line   99)
* gnutls_store_commitment <1>:           Core TLS API.       (line 5503)
* gnutls_store_pubkey:                   Certificate verification.
                                                             (line   61)
* gnutls_store_pubkey <1>:               Core TLS API.       (line 5543)
* gnutls_strerror:                       Core TLS API.       (line 5580)
* gnutls_strerror_name:                  Core TLS API.       (line 5594)
* gnutls_subject_alt_names_deinit:       X509 certificate API.
                                                             (line  287)
* gnutls_subject_alt_names_get:          X509 certificate API.
                                                             (line  298)
* gnutls_subject_alt_names_init:         X509 certificate API.
                                                             (line  327)
* gnutls_subject_alt_names_set:          X509 certificate API.
                                                             (line  341)
* gnutls_supplemental_get_name:          Core TLS API.       (line 5609)
* gnutls_tdb_deinit:                     Core TLS API.       (line 5622)
* gnutls_tdb_init:                       Core TLS API.       (line 5631)
* gnutls_tdb_set_store_commitment_func:  Core TLS API.       (line 5642)
* gnutls_tdb_set_store_func:             Core TLS API.       (line 5662)
* gnutls_tdb_set_verify_func:            Core TLS API.       (line 5681)
* gnutls_tpm_get_registered:             TPM API.            (line   12)
* gnutls_tpm_key_list_deinit:            TPM API.            (line   27)
* gnutls_tpm_key_list_get_url:           TPM API.            (line   38)
* gnutls_tpm_privkey_delete:             Key generation.     (line   52)
* gnutls_tpm_privkey_delete <1>:         Using keys.         (line   82)
* gnutls_tpm_privkey_delete <2>:         TPM API.            (line   60)
* gnutls_tpm_privkey_generate:           Key generation.     (line    9)
* gnutls_tpm_privkey_generate <1>:       TPM API.            (line   76)
* gnutls_transport_get_int:              Core TLS API.       (line 5703)
* gnutls_transport_get_int2:             Core TLS API.       (line 5717)
* gnutls_transport_get_ptr:              Core TLS API.       (line 5734)
* gnutls_transport_get_ptr2:             Core TLS API.       (line 5747)
* gnutls_transport_set_errno:            Setting up the transport layer.
                                                             (line  101)
* gnutls_transport_set_errno <1>:        Core TLS API.       (line 5763)
* gnutls_transport_set_errno_function:   Core TLS API.       (line 5783)
* gnutls_transport_set_int:              Core TLS API.       (line 5801)
* gnutls_transport_set_int2:             Core TLS API.       (line 5815)
* gnutls_transport_set_ptr:              Core TLS API.       (line 5833)
* gnutls_transport_set_ptr2:             Core TLS API.       (line 5846)
* gnutls_transport_set_pull_function:    Setting up the transport layer.
                                                             (line   56)
* gnutls_transport_set_pull_function <1>: Core TLS API.      (line 5863)
* gnutls_transport_set_pull_timeout_function: Setting up the transport layer.
                                                             (line   71)
* gnutls_transport_set_pull_timeout_function <1>: Setting up the transport layer.
                                                             (line  138)
* gnutls_transport_set_pull_timeout_function <2>: Core TLS API.
                                                             (line 5881)
* gnutls_transport_set_push_function:    Setting up the transport layer.
                                                             (line   23)
* gnutls_transport_set_push_function <1>: Core TLS API.      (line 5906)
* gnutls_transport_set_vec_push_function: Setting up the transport layer.
                                                             (line   40)
* gnutls_transport_set_vec_push_function <1>: Core TLS API.  (line 5926)
* gnutls_url_is_supported:               Abstract public keys.
                                                             (line   54)
* gnutls_url_is_supported <1>:           Core TLS API.       (line 5945)
* gnutls_verify_stored_pubkey:           Certificate verification.
                                                             (line   18)
* gnutls_verify_stored_pubkey <1>:       Core TLS API.       (line 5959)
* gnutls_x509_aia_deinit:                X509 certificate API.
                                                             (line  364)
* gnutls_x509_aia_get:                   X509 certificate API.
                                                             (line  375)
* gnutls_x509_aia_init:                  X509 certificate API.
                                                             (line  410)
* gnutls_x509_aia_set:                   X509 certificate API.
                                                             (line  423)
* gnutls_x509_aki_deinit:                X509 certificate API.
                                                             (line  447)
* gnutls_x509_aki_get_cert_issuer:       X509 certificate API.
                                                             (line  458)
* gnutls_x509_aki_get_id:                X509 certificate API.
                                                             (line  491)
* gnutls_x509_aki_init:                  X509 certificate API.
                                                             (line  509)
* gnutls_x509_aki_set_cert_issuer:       X509 certificate API.
                                                             (line  522)
* gnutls_x509_aki_set_id:                X509 certificate API.
                                                             (line  550)
* gnutls_x509_crl_check_issuer:          X509 certificate API.
                                                             (line  567)
* gnutls_x509_crl_deinit:                X509 certificate API.
                                                             (line  582)
* gnutls_x509_crl_dist_points_deinit:    X509 certificate API.
                                                             (line  590)
* gnutls_x509_crl_dist_points_get:       X509 certificate API.
                                                             (line  602)
* gnutls_x509_crl_dist_points_init:      X509 certificate API.
                                                             (line  628)
* gnutls_x509_crl_dist_points_set:       X509 certificate API.
                                                             (line  642)
* gnutls_x509_crl_export:                X509 certificate API.
                                                             (line  666)
* gnutls_x509_crl_export2:               X509 certificate API.
                                                             (line  692)
* gnutls_x509_crl_get_authority_key_gn_serial: X509 certificate API.
                                                             (line  715)
* gnutls_x509_crl_get_authority_key_id:  X509 certificate API.
                                                             (line  752)
* gnutls_x509_crl_get_crt_count:         X509 certificate API.
                                                             (line  780)
* gnutls_x509_crl_get_crt_serial:        PKIX certificate revocation lists.
                                                             (line   55)
* gnutls_x509_crl_get_crt_serial <1>:    X509 certificate API.
                                                             (line  792)
* gnutls_x509_crl_get_dn_oid:            X509 certificate API.
                                                             (line  818)
* gnutls_x509_crl_get_extension_data:    X509 certificate API.
                                                             (line  841)
* gnutls_x509_crl_get_extension_data2:   X509 certificate API.
                                                             (line  871)
* gnutls_x509_crl_get_extension_info:    X509 certificate API.
                                                             (line  894)
* gnutls_x509_crl_get_extension_oid:     X509 certificate API.
                                                             (line  928)
* gnutls_x509_crl_get_issuer_dn:         X509 certificate API.
                                                             (line  953)
* gnutls_x509_crl_get_issuer_dn2:        X509 certificate API.
                                                             (line  975)
* gnutls_x509_crl_get_issuer_dn_by_oid:  X509 certificate API.
                                                             (line  994)
* gnutls_x509_crl_get_next_update:       X509 certificate API.
                                                             (line 1030)
* gnutls_x509_crl_get_number:            X509 certificate API.
                                                             (line 1044)
* gnutls_x509_crl_get_raw_issuer_dn:     X509 certificate API.
                                                             (line 1066)
* gnutls_x509_crl_get_signature:         X509 certificate API.
                                                             (line 1082)
* gnutls_x509_crl_get_signature_algorithm: X509 certificate API.
                                                             (line 1099)
* gnutls_x509_crl_get_this_update:       X509 certificate API.
                                                             (line 1112)
* gnutls_x509_crl_get_version:           X509 certificate API.
                                                             (line 1123)
* gnutls_x509_crl_import:                X509 certificate API.
                                                             (line 1133)
* gnutls_x509_crl_init:                  X509 certificate API.
                                                             (line 1153)
* gnutls_x509_crl_iter_crt_serial:       X509 certificate API.
                                                             (line 1168)
* gnutls_x509_crl_iter_deinit:           X509 certificate API.
                                                             (line 1201)
* gnutls_x509_crl_list_import:           X509 certificate API.
                                                             (line 1210)
* gnutls_x509_crl_list_import2:          X509 certificate API.
                                                             (line 1241)
* gnutls_x509_crl_print:                 X509 certificate API.
                                                             (line 1271)
* gnutls_x509_crl_privkey_sign:          PKIX certificate revocation lists.
                                                             (line  124)
* gnutls_x509_crl_privkey_sign <1>:      Abstract key API.   (line 1784)
* gnutls_x509_crl_set_authority_key_id:  X509 certificate API.
                                                             (line 1291)
* gnutls_x509_crl_set_crt:               X509 certificate API.
                                                             (line 1312)
* gnutls_x509_crl_set_crt_serial:        X509 certificate API.
                                                             (line 1330)
* gnutls_x509_crl_set_next_update:       X509 certificate API.
                                                             (line 1350)
* gnutls_x509_crl_set_number:            X509 certificate API.
                                                             (line 1364)
* gnutls_x509_crl_set_this_update:       X509 certificate API.
                                                             (line 1384)
* gnutls_x509_crl_set_version:           X509 certificate API.
                                                             (line 1398)
* gnutls_x509_crl_sign:                  Compatibility API.  (line  552)
* gnutls_x509_crl_sign2:                 PKIX certificate revocation lists.
                                                             (line  101)
* gnutls_x509_crl_sign2 <1>:             X509 certificate API.
                                                             (line 1414)
* gnutls_x509_crl_verify:                X509 certificate API.
                                                             (line 1440)
* gnutls_x509_crq_deinit:                X509 certificate API.
                                                             (line 1470)
* gnutls_x509_crq_export:                X509 certificate API.
                                                             (line 1479)
* gnutls_x509_crq_export2:               X509 certificate API.
                                                             (line 1507)
* gnutls_x509_crq_get_attribute_by_oid:  X509 certificate API.
                                                             (line 1531)
* gnutls_x509_crq_get_attribute_data:    X509 certificate API.
                                                             (line 1560)
* gnutls_x509_crq_get_attribute_info:    X509 certificate API.
                                                             (line 1589)
* gnutls_x509_crq_get_basic_constraints: X509 certificate API.
                                                             (line 1620)
* gnutls_x509_crq_get_challenge_password: X509 certificate API.
                                                             (line 1650)
* gnutls_x509_crq_get_dn:                X509 certificate API.
                                                             (line 1668)
* gnutls_x509_crq_get_dn2:               X509 certificate API.
                                                             (line 1689)
* gnutls_x509_crq_get_dn_by_oid:         X509 certificate API.
                                                             (line 1709)
* gnutls_x509_crq_get_dn_oid:            X509 certificate API.
                                                             (line 1743)
* gnutls_x509_crq_get_extension_by_oid:  X509 certificate API.
                                                             (line 1763)
* gnutls_x509_crq_get_extension_by_oid2: X509 certificate API.
                                                             (line 1793)
* gnutls_x509_crq_get_extension_data:    X509 certificate API.
                                                             (line 1821)
* gnutls_x509_crq_get_extension_data2:   X509 certificate API.
                                                             (line 1851)
* gnutls_x509_crq_get_extension_info:    X509 certificate API.
                                                             (line 1876)
* gnutls_x509_crq_get_key_id:            X509 certificate API.
                                                             (line 1910)
* gnutls_x509_crq_get_key_purpose_oid:   X509 certificate API.
                                                             (line 1939)
* gnutls_x509_crq_get_key_rsa_raw:       X509 certificate API.
                                                             (line 1967)
* gnutls_x509_crq_get_key_usage:         X509 certificate API.
                                                             (line 1987)
* gnutls_x509_crq_get_pk_algorithm:      X509 certificate API.
                                                             (line 2013)
* gnutls_x509_crq_get_private_key_usage_period: X509 certificate API.
                                                             (line 2033)
* gnutls_x509_crq_get_subject_alt_name:  X509 certificate API.
                                                             (line 2054)
* gnutls_x509_crq_get_subject_alt_othername_oid: X509 certificate API.
                                                             (line 2091)
* gnutls_x509_crq_get_version:           X509 certificate API.
                                                             (line 2127)
* gnutls_x509_crq_import:                X509 certificate API.
                                                             (line 2139)
* gnutls_x509_crq_init:                  X509 certificate API.
                                                             (line 2160)
* gnutls_x509_crq_print:                 X509 certificate API.
                                                             (line 2172)
* gnutls_x509_crq_privkey_sign:          Abstract key API.   (line 1812)
* gnutls_x509_crq_set_attribute_by_oid:  X509 certificate API.
                                                             (line 2194)
* gnutls_x509_crq_set_basic_constraints: X509 certificate API.
                                                             (line 2219)
* gnutls_x509_crq_set_challenge_password: X509 certificate API.
                                                             (line 2241)
* gnutls_x509_crq_set_dn:                X509 certificate API.
                                                             (line 2256)
* gnutls_x509_crq_set_dn_by_oid:         X509 certificate API.
                                                             (line 2273)
* gnutls_x509_crq_set_key:               PKCS 10 certificate requests.
                                                             (line   30)
* gnutls_x509_crq_set_key <1>:           X509 certificate API.
                                                             (line 2302)
* gnutls_x509_crq_set_key_purpose_oid:   X509 certificate API.
                                                             (line 2317)
* gnutls_x509_crq_set_key_rsa_raw:       X509 certificate API.
                                                             (line 2339)
* gnutls_x509_crq_set_key_usage:         X509 certificate API.
                                                             (line 2358)
* gnutls_x509_crq_set_private_key_usage_period: X509 certificate API.
                                                             (line 2374)
* gnutls_x509_crq_set_pubkey:            Operations.         (line  157)
* gnutls_x509_crq_set_pubkey <1>:        Abstract key API.   (line 1841)
* gnutls_x509_crq_set_subject_alt_name:  X509 certificate API.
                                                             (line 2391)
* gnutls_x509_crq_set_version:           X509 certificate API.
                                                             (line 2416)
* gnutls_x509_crq_sign:                  Compatibility API.  (line  571)
* gnutls_x509_crq_sign2:                 PKCS 10 certificate requests.
                                                             (line   42)
* gnutls_x509_crq_sign2 <1>:             X509 certificate API.
                                                             (line 2431)
* gnutls_x509_crq_verify:                X509 certificate API.
                                                             (line 2458)
* gnutls_x509_crt_check_hostname:        X509 certificate API.
                                                             (line 2477)
* gnutls_x509_crt_check_hostname2:       X509 certificate API.
                                                             (line 2495)
* gnutls_x509_crt_check_issuer:          X509 certificate API.
                                                             (line 2529)
* gnutls_x509_crt_check_revocation:      X509 certificate API.
                                                             (line 2548)
* gnutls_x509_crt_cpy_crl_dist_points:   X509 certificate API.
                                                             (line 2565)
* gnutls_x509_crt_deinit:                X509 certificate API.
                                                             (line 2581)
* gnutls_x509_crt_export:                X509 certificate API.
                                                             (line 2589)
* gnutls_x509_crt_export2:               X509 certificate API.
                                                             (line 2616)
* gnutls_x509_crt_get_activation_time:   X509 certificate API.
                                                             (line 2638)
* gnutls_x509_crt_get_authority_info_access: X509 certificate API.
                                                             (line 2650)
* gnutls_x509_crt_get_authority_key_gn_serial: X509 certificate API.
                                                             (line 2728)
* gnutls_x509_crt_get_authority_key_id:  X509 certificate API.
                                                             (line 2767)
* gnutls_x509_crt_get_basic_constraints: X509 certificate API.
                                                             (line 2794)
* gnutls_x509_crt_get_ca_status:         X509 certificate API.
                                                             (line 2822)
* gnutls_x509_crt_get_crl_dist_points:   X509 certificate API.
                                                             (line 2845)
* gnutls_x509_crt_get_dn:                X509 certificate API.
                                                             (line 2878)
* gnutls_x509_crt_get_dn2:               X.509 distinguished names.
                                                             (line   14)
* gnutls_x509_crt_get_dn2 <1>:           X509 certificate API.
                                                             (line 2900)
* gnutls_x509_crt_get_dn_by_oid:         X509 certificate API.
                                                             (line 2920)
* gnutls_x509_crt_get_dn_oid:            X509 certificate API.
                                                             (line 2959)
* gnutls_x509_crt_get_expiration_time:   X509 certificate API.
                                                             (line 2985)
* gnutls_x509_crt_get_extension_by_oid:  X509 certificate API.
                                                             (line 3000)
* gnutls_x509_crt_get_extension_by_oid2: X509 certificate API.
                                                             (line 3028)
* gnutls_x509_crt_get_extension_data:    X509 certificate API.
                                                             (line 3056)
* gnutls_x509_crt_get_extension_data2:   X509 certificate API.
                                                             (line 3084)
* gnutls_x509_crt_get_extension_info:    X509 certificate API.
                                                             (line 3107)
* gnutls_x509_crt_get_extension_oid:     X509 certificate API.
                                                             (line 3140)
* gnutls_x509_crt_get_fingerprint:       X509 certificate API.
                                                             (line 3166)
* gnutls_x509_crt_get_issuer:            X509 certificate API.
                                                             (line 3190)
* gnutls_x509_crt_get_issuer_alt_name:   X509 certificate API.
                                                             (line 3208)
* gnutls_x509_crt_get_issuer_alt_name2:  X509 certificate API.
                                                             (line 3251)
* gnutls_x509_crt_get_issuer_alt_othername_oid: X509 certificate API.
                                                             (line 3289)
* gnutls_x509_crt_get_issuer_dn:         X509 certificate API.
                                                             (line 3329)
* gnutls_x509_crt_get_issuer_dn2:        X509 certificate API.
                                                             (line 3351)
* gnutls_x509_crt_get_issuer_dn_by_oid:  X509 certificate API.
                                                             (line 3371)
* gnutls_x509_crt_get_issuer_dn_oid:     X509 certificate API.
                                                             (line 3410)
* gnutls_x509_crt_get_issuer_unique_id:  X509 certificate API.
                                                             (line 3436)
* gnutls_x509_crt_get_key_id:            X.509 public and private keys.
                                                             (line   13)
* gnutls_x509_crt_get_key_id <1>:        X509 certificate API.
                                                             (line 3460)
* gnutls_x509_crt_get_key_purpose_oid:   X509 certificate API.
                                                             (line 3487)
* gnutls_x509_crt_get_key_usage:         X509 certificate API.
                                                             (line 3517)
* gnutls_x509_crt_get_name_constraints:  X509 certificate API.
                                                             (line 3541)
* gnutls_x509_crt_get_pk_algorithm:      X509 certificate API.
                                                             (line 3575)
* gnutls_x509_crt_get_pk_dsa_raw:        X509 certificate API.
                                                             (line 3595)
* gnutls_x509_crt_get_pk_rsa_raw:        X509 certificate API.
                                                             (line 3618)
* gnutls_x509_crt_get_policy:            X509 certificate API.
                                                             (line 3636)
* gnutls_x509_crt_get_preferred_hash_algorithm: Compatibility API.
                                                             (line  588)
* gnutls_x509_crt_get_private_key_usage_period: X509 certificate API.
                                                             (line 3663)
* gnutls_x509_crt_get_proxy:             X509 certificate API.
                                                             (line 3685)
* gnutls_x509_crt_get_raw_dn:            X509 certificate API.
                                                             (line 3712)
* gnutls_x509_crt_get_raw_issuer_dn:     X509 certificate API.
                                                             (line 3729)
* gnutls_x509_crt_get_serial:            X509 certificate API.
                                                             (line 3745)
* gnutls_x509_crt_get_signature:         X509 certificate API.
                                                             (line 3765)
* gnutls_x509_crt_get_signature_algorithm: X509 certificate API.
                                                             (line 3783)
* gnutls_x509_crt_get_subject:           X509 certificate API.
                                                             (line 3797)
* gnutls_x509_crt_get_subject_alt_name:  X509 certificate API.
                                                             (line 3815)
* gnutls_x509_crt_get_subject_alt_name2: X509 certificate API.
                                                             (line 3855)
* gnutls_x509_crt_get_subject_alt_othername_oid: X509 certificate API.
                                                             (line 3891)
* gnutls_x509_crt_get_subject_key_id:    X509 certificate API.
                                                             (line 3929)
* gnutls_x509_crt_get_subject_unique_id: X509 certificate API.
                                                             (line 3951)
* gnutls_x509_crt_get_verify_algorithm:  Compatibility API.  (line  615)
* gnutls_x509_crt_get_version:           X509 certificate API.
                                                             (line 3973)
* gnutls_x509_crt_import:                X509 certificate API.
                                                             (line 3984)
* gnutls_x509_crt_import_pkcs11:         PKCS 11 API.        (line  952)
* gnutls_x509_crt_import_pkcs11_url:     PKCS 11 API.        (line  969)
* gnutls_x509_crt_init:                  X509 certificate API.
                                                             (line 4005)
* gnutls_x509_crt_list_import:           X509 certificate API.
                                                             (line 4016)
* gnutls_x509_crt_list_import2:          X509 certificate API.
                                                             (line 4052)
* gnutls_x509_crt_list_import_pkcs11:    PKCS 11 API.        (line  989)
* gnutls_x509_crt_list_verify:           X509 certificate API.
                                                             (line 4085)
* gnutls_x509_crt_print:                 X509 certificate API.
                                                             (line 4127)
* gnutls_x509_crt_privkey_sign:          Abstract key API.   (line 1858)
* gnutls_x509_crt_set_activation_time:   X509 certificate API.
                                                             (line 4152)
* gnutls_x509_crt_set_authority_info_access: X509 certificate API.
                                                             (line 4167)
* gnutls_x509_crt_set_authority_key_id:  X509 certificate API.
                                                             (line 4193)
* gnutls_x509_crt_set_basic_constraints: X509 certificate API.
                                                             (line 4211)
* gnutls_x509_crt_set_ca_status:         X509 certificate API.
                                                             (line 4231)
* gnutls_x509_crt_set_crl_dist_points:   X509 certificate API.
                                                             (line 4248)
* gnutls_x509_crt_set_crl_dist_points2:  X509 certificate API.
                                                             (line 4268)
* gnutls_x509_crt_set_crq:               X509 certificate API.
                                                             (line 4293)
* gnutls_x509_crt_set_crq_extensions:    X509 certificate API.
                                                             (line 4313)
* gnutls_x509_crt_set_dn:                X509 certificate API.
                                                             (line 4330)
* gnutls_x509_crt_set_dn_by_oid:         X509 certificate API.
                                                             (line 4347)
* gnutls_x509_crt_set_expiration_time:   X509 certificate API.
                                                             (line 4376)
* gnutls_x509_crt_set_extension_by_oid:  X509 certificate API.
                                                             (line 4393)
* gnutls_x509_crt_set_issuer_alt_name:   X509 certificate API.
                                                             (line 4417)
* gnutls_x509_crt_set_issuer_dn:         X509 certificate API.
                                                             (line 4443)
* gnutls_x509_crt_set_issuer_dn_by_oid:  X509 certificate API.
                                                             (line 4460)
* gnutls_x509_crt_set_key:               X509 certificate API.
                                                             (line 4493)
* gnutls_x509_crt_set_key_purpose_oid:   X509 certificate API.
                                                             (line 4508)
* gnutls_x509_crt_set_key_usage:         X509 certificate API.
                                                             (line 4528)
* gnutls_x509_crt_set_name_constraints:  X509 certificate API.
                                                             (line 4542)
* gnutls_x509_crt_set_pin_function:      X509 certificate API.
                                                             (line 4563)
* gnutls_x509_crt_set_policy:            X509 certificate API.
                                                             (line 4584)
* gnutls_x509_crt_set_private_key_usage_period: X509 certificate API.
                                                             (line 4608)
* gnutls_x509_crt_set_proxy:             X509 certificate API.
                                                             (line 4625)
* gnutls_x509_crt_set_proxy_dn:          X509 certificate API.
                                                             (line 4648)
* gnutls_x509_crt_set_pubkey:            Operations.         (line  171)
* gnutls_x509_crt_set_pubkey <1>:        Abstract key API.   (line 1883)
* gnutls_x509_crt_set_serial:            X509 certificate API.
                                                             (line 4674)
* gnutls_x509_crt_set_subject_alternative_name: X509 certificate API.
                                                             (line 4721)
* gnutls_x509_crt_set_subject_alt_name:  X509 certificate API.
                                                             (line 4696)
* gnutls_x509_crt_set_subject_key_id:    X509 certificate API.
                                                             (line 4743)
* gnutls_x509_crt_set_version:           X509 certificate API.
                                                             (line 4760)
* gnutls_x509_crt_sign:                  X509 certificate API.
                                                             (line 4782)
* gnutls_x509_crt_sign2:                 X509 certificate API.
                                                             (line 4799)
* gnutls_x509_crt_verify:                X509 certificate API.
                                                             (line 4824)
* gnutls_x509_crt_verify_data:           Compatibility API.  (line  638)
* gnutls_x509_crt_verify_hash:           Compatibility API.  (line  662)
* gnutls_x509_dn_deinit:                 X509 certificate API.
                                                             (line 4848)
* gnutls_x509_dn_export:                 X509 certificate API.
                                                             (line 4859)
* gnutls_x509_dn_export2:                X509 certificate API.
                                                             (line 4886)
* gnutls_x509_dn_get_rdn_ava:            X.509 distinguished names.
                                                             (line   50)
* gnutls_x509_dn_get_rdn_ava <1>:        X509 certificate API.
                                                             (line 4909)
* gnutls_x509_dn_import:                 X509 certificate API.
                                                             (line 4940)
* gnutls_x509_dn_init:                   X509 certificate API.
                                                             (line 4959)
* gnutls_x509_dn_oid_known:              X509 certificate API.
                                                             (line 4975)
* gnutls_x509_dn_oid_name:               X509 certificate API.
                                                             (line 4991)
* gnutls_x509_ext_deinit:                X509 certificate API.
                                                             (line 5008)
* gnutls_x509_ext_export_aia:            X509 certificate API.
                                                             (line 5018)
* gnutls_x509_ext_export_authority_key_id: X509 certificate API.
                                                             (line 5037)
* gnutls_x509_ext_export_basic_constraints: X509 certificate API.
                                                             (line 5056)
* gnutls_x509_ext_export_crl_dist_points: X509 certificate API.
                                                             (line 5077)
* gnutls_x509_ext_export_key_purposes:   X509 certificate API.
                                                             (line 5097)
* gnutls_x509_ext_export_key_usage:      X509 certificate API.
                                                             (line 5116)
* gnutls_x509_ext_export_name_constraints: X509 certificate API.
                                                             (line 5135)
* gnutls_x509_ext_export_policies:       X509 certificate API.
                                                             (line 5154)
* gnutls_x509_ext_export_private_key_usage_period: X509 certificate API.
                                                             (line 5174)
* gnutls_x509_ext_export_proxy:          X509 certificate API.
                                                             (line 5195)
* gnutls_x509_ext_export_subject_alt_names: X509 certificate API.
                                                             (line 5224)
* gnutls_x509_ext_export_subject_key_id: X509 certificate API.
                                                             (line 5243)
* gnutls_x509_ext_import_aia:            X509 certificate API.
                                                             (line 5262)
* gnutls_x509_ext_import_authority_key_id: X509 certificate API.
                                                             (line 5283)
* gnutls_x509_ext_import_basic_constraints: X509 certificate API.
                                                             (line 5304)
* gnutls_x509_ext_import_crl_dist_points: X509 certificate API.
                                                             (line 5323)
* gnutls_x509_ext_import_key_purposes:   X509 certificate API.
                                                             (line 5343)
* gnutls_x509_ext_import_key_usage:      X509 certificate API.
                                                             (line 5365)
* gnutls_x509_ext_import_name_constraints: X509 certificate API.
                                                             (line 5389)
* gnutls_x509_ext_import_policies:       X509 certificate API.
                                                             (line 5421)
* gnutls_x509_ext_import_private_key_usage_period: X509 certificate API.
                                                             (line 5440)
* gnutls_x509_ext_import_proxy:          X509 certificate API.
                                                             (line 5460)
* gnutls_x509_ext_import_subject_alt_names: X509 certificate API.
                                                             (line 5489)
* gnutls_x509_ext_import_subject_key_id: X509 certificate API.
                                                             (line 5514)
* gnutls_x509_ext_print:                 X509 certificate API.
                                                             (line 5533)
* gnutls_x509_key_purpose_deinit:        X509 certificate API.
                                                             (line 5555)
* gnutls_x509_key_purpose_get:           X509 certificate API.
                                                             (line 5566)
* gnutls_x509_key_purpose_init:          X509 certificate API.
                                                             (line 5589)
* gnutls_x509_key_purpose_set:           X509 certificate API.
                                                             (line 5603)
* gnutls_x509_name_constraints_add_excluded: X509 certificate API.
                                                             (line 5620)
* gnutls_x509_name_constraints_add_permitted: X509 certificate API.
                                                             (line 5641)
* gnutls_x509_name_constraints_check:    X509 certificate API.
                                                             (line 5662)
* gnutls_x509_name_constraints_check_crt: X509 certificate API.
                                                             (line 5686)
* gnutls_x509_name_constraints_deinit:   X509 certificate API.
                                                             (line 5711)
* gnutls_x509_name_constraints_get_excluded: X509 certificate API.
                                                             (line 5722)
* gnutls_x509_name_constraints_get_permitted: X509 certificate API.
                                                             (line 5752)
* gnutls_x509_name_constraints_init:     X509 certificate API.
                                                             (line 5782)
* gnutls_x509_othername_to_virtual:      X509 certificate API.
                                                             (line 5796)
* gnutls_x509_policies_deinit:           X509 certificate API.
                                                             (line 5818)
* gnutls_x509_policies_get:              X509 certificate API.
                                                             (line 5830)
* gnutls_x509_policies_init:             X509 certificate API.
                                                             (line 5852)
* gnutls_x509_policies_set:              X509 certificate API.
                                                             (line 5866)
* gnutls_x509_policy_release:            X509 certificate API.
                                                             (line 5883)
* gnutls_x509_privkey_cpy:               X509 certificate API.
                                                             (line 5896)
* gnutls_x509_privkey_deinit:            X509 certificate API.
                                                             (line 5911)
* gnutls_x509_privkey_export:            X509 certificate API.
                                                             (line 5920)
* gnutls_x509_privkey_export2:           X509 certificate API.
                                                             (line 5949)
* gnutls_x509_privkey_export2_pkcs8:     X509 certificate API.
                                                             (line 5974)
* gnutls_x509_privkey_export_dsa_raw:    X509 certificate API.
                                                             (line 6010)
* gnutls_x509_privkey_export_ecc_raw:    X509 certificate API.
                                                             (line 6036)
* gnutls_x509_privkey_export_pkcs8:      X509 certificate API.
                                                             (line 6061)
* gnutls_x509_privkey_export_rsa_raw:    X509 certificate API.
                                                             (line 6100)
* gnutls_x509_privkey_export_rsa_raw2:   X509 certificate API.
                                                             (line 6128)
* gnutls_x509_privkey_fix:               X509 certificate API.
                                                             (line 6163)
* gnutls_x509_privkey_generate:          X509 certificate API.
                                                             (line 6175)
* gnutls_x509_privkey_get_key_id:        X509 certificate API.
                                                             (line 6205)
* gnutls_x509_privkey_get_pk_algorithm:  X509 certificate API.
                                                             (line 6232)
* gnutls_x509_privkey_get_pk_algorithm2: X509 certificate API.
                                                             (line 6245)
* gnutls_x509_privkey_import:            X509 certificate API.
                                                             (line 6260)
* gnutls_x509_privkey_import2:           Managing encrypted keys.
                                                             (line   51)
* gnutls_x509_privkey_import2 <1>:       X509 certificate API.
                                                             (line 6282)
* gnutls_x509_privkey_import_dsa_raw:    X509 certificate API.
                                                             (line 6311)
* gnutls_x509_privkey_import_ecc_raw:    X509 certificate API.
                                                             (line 6337)
* gnutls_x509_privkey_import_openssl:    Managing encrypted keys.
                                                             (line  231)
* gnutls_x509_privkey_import_openssl <1>: X509 certificate API.
                                                             (line 6363)
* gnutls_x509_privkey_import_pkcs8:      X509 certificate API.
                                                             (line 6387)
* gnutls_x509_privkey_import_rsa_raw:    X509 certificate API.
                                                             (line 6424)
* gnutls_x509_privkey_import_rsa_raw2:   X509 certificate API.
                                                             (line 6453)
* gnutls_x509_privkey_init:              X509 certificate API.
                                                             (line 6487)
* gnutls_x509_privkey_sec_param:         X509 certificate API.
                                                             (line 6498)
* gnutls_x509_privkey_sign_data:         Compatibility API.  (line  686)
* gnutls_x509_privkey_sign_hash:         Compatibility API.  (line  723)
* gnutls_x509_privkey_verify_params:     X509 certificate API.
                                                             (line 6513)
* gnutls_x509_rdn_get:                   X509 certificate API.
                                                             (line 6525)
* gnutls_x509_rdn_get_by_oid:            X509 certificate API.
                                                             (line 6545)
* gnutls_x509_rdn_get_oid:               X509 certificate API.
                                                             (line 6573)
* gnutls_x509_trust_list_add_cas:        Verifying X.509 certificate paths.
                                                             (line    9)
* gnutls_x509_trust_list_add_cas <1>:    X509 certificate API.
                                                             (line 6596)
* gnutls_x509_trust_list_add_crls:       Verifying X.509 certificate paths.
                                                             (line   62)
* gnutls_x509_trust_list_add_crls <1>:   X509 certificate API.
                                                             (line 6622)
* gnutls_x509_trust_list_add_named_crt:  Verifying X.509 certificate paths.
                                                             (line   32)
* gnutls_x509_trust_list_add_named_crt <1>: X509 certificate API.
                                                             (line 6653)
* gnutls_x509_trust_list_add_system_trust: Verifying X.509 certificate paths.
                                                             (line  262)
* gnutls_x509_trust_list_add_system_trust <1>: X509 certificate API.
                                                             (line 6686)
* gnutls_x509_trust_list_add_trust_dir:  X509 certificate API.
                                                             (line 6710)
* gnutls_x509_trust_list_add_trust_file: Verifying X.509 certificate paths.
                                                             (line  210)
* gnutls_x509_trust_list_add_trust_file <1>: X509 certificate API.
                                                             (line 6737)
* gnutls_x509_trust_list_add_trust_mem:  Verifying X.509 certificate paths.
                                                             (line  238)
* gnutls_x509_trust_list_add_trust_mem <1>: X509 certificate API.
                                                             (line 6768)
* gnutls_x509_trust_list_deinit:         X509 certificate API.
                                                             (line 6795)
* gnutls_x509_trust_list_get_issuer:     X509 certificate API.
                                                             (line 6812)
* gnutls_x509_trust_list_init:           X509 certificate API.
                                                             (line 6839)
* gnutls_x509_trust_list_remove_cas:     X509 certificate API.
                                                             (line 6856)
* gnutls_x509_trust_list_remove_trust_file: X509 certificate API.
                                                             (line 6881)
* gnutls_x509_trust_list_remove_trust_mem: X509 certificate API.
                                                             (line 6903)
* gnutls_x509_trust_list_verify_crt:     Verifying X.509 certificate paths.
                                                             (line   90)
* gnutls_x509_trust_list_verify_crt <1>: X509 certificate API.
                                                             (line 6924)
* gnutls_x509_trust_list_verify_crt2:    Verifying X.509 certificate paths.
                                                             (line  122)
* gnutls_x509_trust_list_verify_crt2 <1>: X509 certificate API.
                                                             (line 6959)
* gnutls_x509_trust_list_verify_named_crt: Verifying X.509 certificate paths.
                                                             (line  173)
* gnutls_x509_trust_list_verify_named_crt <1>: X509 certificate API.
                                                             (line 7013)


File: gnutls.info,  Node: Concept Index,  Prev: Function and Data Index,  Up: Top

Concept Index
*************

 [index ]
* Menu:

* abstract types:                        Abstract key types.  (line   6)
* alert protocol:                        The TLS Alert Protocol.
                                                              (line   6)
* ALPN:                                  Application Layer Protocol Negotiation (ALPN).
                                                              (line   6)
* anonymous authentication:              Anonymous authentication.
                                                              (line   6)
* API reference:                         API reference.       (line   6)
* Application Layer Protocol Negotiation: Application Layer Protocol Negotiation (ALPN).
                                                              (line   6)
* authentication methods:                Authentication methods.
                                                              (line   6)
* bad_record_mac:                        On Record Padding.   (line   6)
* callback functions:                    Callback functions.  (line   6)
* certificate authentication:            Certificate authentication.
                                                              (line   6)
* certificate authentication <1>:        More on certificate authentication.
                                                              (line   6)
* certificate requests:                  PKCS 10 certificate requests.
                                                              (line   6)
* certificate revocation lists:          PKIX certificate revocation lists.
                                                              (line   6)
* certificate status:                    OCSP certificate status checking.
                                                              (line   6)
* Certificate status request:            OCSP status request. (line   6)
* Certificate verification:              Advanced certificate verification.
                                                              (line   6)
* certification:                         Certification.       (line   6)
* certtool:                              certtool Invocation. (line   6)
* certtool help:                         certtool Invocation. (line  21)
* channel bindings:                      Channel Bindings.    (line   6)
* ciphersuites:                          Supported ciphersuites.
                                                              (line   6)
* client certificate authentication:     Client Authentication.
                                                              (line   6)
* compression algorithms:                Compression algorithms used in the record layer.
                                                              (line   6)
* contributing:                          Contributing.        (line   6)
* CRL:                                   PKIX certificate revocation lists.
                                                              (line   6)
* DANE:                                  Verifying a certificate using DANE.
                                                              (line   6)
* DANE <1>:                              Certificate verification.
                                                              (line   6)
* danetool:                              danetool Invocation. (line   6)
* danetool help:                         danetool Invocation. (line  15)
* deriving keys:                         Deriving keys for other applications/protocols.
                                                              (line   6)
* digital signatures:                    Digital signatures.  (line   6)
* DNSSEC:                                Verifying a certificate using DANE.
                                                              (line   6)
* DNSSEC <1>:                            Certificate verification.
                                                              (line   6)
* download:                              Downloading and installing.
                                                              (line   6)
* Encrypted keys:                        Managing encrypted keys.
                                                              (line   6)
* error codes:                           Error codes.         (line   6)
* example programs:                      GnuTLS application examples.
                                                              (line   6)
* examples:                              GnuTLS application examples.
                                                              (line   6)
* exporting keying material:             Deriving keys for other applications/protocols.
                                                              (line   6)
* FDL, GNU Free Documentation License:   Copying Information. (line   6)
* fork:                                  Sessions and fork.   (line   6)
* generating parameters:                 Parameter generation.
                                                              (line   6)
* gnutls-cli:                            gnutls-cli Invocation.
                                                              (line   6)
* gnutls-cli help:                       gnutls-cli Invocation.
                                                              (line  17)
* gnutls-cli-debug:                      gnutls-cli-debug Invocation.
                                                              (line   6)
* gnutls-cli-debug help:                 gnutls-cli-debug Invocation.
                                                              (line  21)
* gnutls-serv:                           gnutls-serv Invocation.
                                                              (line   6)
* gnutls-serv help:                      gnutls-serv Invocation.
                                                              (line  16)
* hacking:                               Contributing.        (line   6)
* handshake protocol:                    The TLS Handshake Protocol.
                                                              (line   6)
* hardware security modules:             Smart cards and HSMs.
                                                              (line   6)
* hardware tokens:                       Smart cards and HSMs.
                                                              (line   6)
* hash functions:                        Hash and HMAC functions.
                                                              (line   6)
* heartbeat:                             HeartBeat.           (line   6)
* HMAC functions:                        Hash and HMAC functions.
                                                              (line   6)
* installation:                          Downloading and installing.
                                                              (line   6)
* internal architecture:                 Internal architecture of GnuTLS.
                                                              (line   6)
* key extraction:                        Deriving keys for other applications/protocols.
                                                              (line   6)
* Key pinning:                           Verifying a certificate using trust on first use authentication.
                                                              (line   6)
* Key pinning <1>:                       Certificate verification.
                                                              (line   6)
* key sizes:                             Selecting cryptographic key sizes.
                                                              (line   6)
* keying material exporters:             Deriving keys for other applications/protocols.
                                                              (line   6)
* maximum fragment length:               Maximum fragment length negotiation.
                                                              (line   6)
* OCSP:                                  OCSP certificate status checking.
                                                              (line   6)
* OCSP Functions:                        OCSP API.            (line   6)
* OCSP status request:                   OCSP status request. (line   6)
* ocsptool:                              ocsptool Invocation. (line   6)
* ocsptool help:                         ocsptool Invocation. (line  16)
* Online Certificate Status Protocol:    OCSP certificate status checking.
                                                              (line   6)
* OpenPGP API:                           OpenPGP API.         (line   6)
* OpenPGP certificates:                  OpenPGP certificates.
                                                              (line   6)
* OpenPGP server:                        Echo server with OpenPGP authentication.
                                                              (line   6)
* OpenSSL:                               Compatibility with the OpenSSL library.
                                                              (line   6)
* OpenSSL encrypted keys:                Managing encrypted keys.
                                                              (line 225)
* p11tool:                               p11tool Invocation.  (line   6)
* p11tool help:                          p11tool Invocation.  (line  25)
* parameter generation:                  Parameter generation.
                                                              (line   6)
* PCT:                                   On SSL 2 and older protocols.
                                                              (line  37)
* PKCS #10:                              PKCS 10 certificate requests.
                                                              (line   6)
* PKCS #11 tokens:                       Smart cards and HSMs.
                                                              (line   6)
* PKCS #12:                              Managing encrypted keys.
                                                              (line 120)
* PKCS #8:                               Managing encrypted keys.
                                                              (line  85)
* Priority strings:                      Priority Strings.    (line   6)
* PSK authentication:                    Authentication using PSK.
                                                              (line   6)
* psktool:                               psktool Invocation.  (line   6)
* psktool help:                          psktool Invocation.  (line  16)
* public key algorithms:                 Public key algorithms.
                                                              (line   6)
* random numbers:                        Random number generation.
                                                              (line   6)
* record padding:                        On Record Padding.   (line   6)
* record protocol:                       The TLS record protocol.
                                                              (line   6)
* renegotiation:                         Safe renegotiation.  (line   6)
* reporting bugs:                        Bug Reports.         (line   6)
* resuming sessions:                     Resuming Sessions.   (line   6)
* resuming sessions <1>:                 Session resumption.  (line   6)
* safe renegotiation:                    Safe renegotiation.  (line   6)
* Secure RTP:                            SRTP.                (line   6)
* server name indication:                Server name indication.
                                                              (line   6)
* session resumption:                    Resuming Sessions.   (line   6)
* session resumption <1>:                Session resumption.  (line   6)
* session tickets:                       Session tickets.     (line   6)
* Smart card example:                    Client using a smart card with TLS.
                                                              (line   6)
* smart cards:                           Smart cards and HSMs.
                                                              (line   6)
* SRP authentication:                    Authentication using SRP.
                                                              (line   6)
* srptool:                               srptool Invocation.  (line   6)
* srptool help:                          srptool Invocation.  (line  23)
* SRTP:                                  SRTP.                (line   6)
* SSH-style authentication:              Verifying a certificate using trust on first use authentication.
                                                              (line   6)
* SSH-style authentication <1>:          Certificate verification.
                                                              (line   6)
* SSL 2:                                 On SSL 2 and older protocols.
                                                              (line   6)
* symmetric algorithms:                  Symmetric algorithms.
                                                              (line   6)
* symmetric cryptography:                Symmetric algorithms.
                                                              (line   6)
* symmetric encryption algorithms:       Encryption algorithms used in the record layer.
                                                              (line   6)
* thread safety:                         Thread safety.       (line   6)
* tickets:                               Session tickets.     (line   6)
* TLS extensions:                        TLS Extensions.      (line   6)
* TLS extensions <1>:                    Maximum fragment length negotiation.
                                                              (line   6)
* TLS extensions <2>:                    Server name indication.
                                                              (line   6)
* TLS extensions <3>:                    Session tickets.     (line   6)
* TLS extensions <4>:                    HeartBeat.           (line   6)
* TLS layers:                            TLS layers.          (line   6)
* TPM:                                   Trusted Platform Module.
                                                              (line   6)
* tpmtool:                               tpmtool Invocation.  (line   6)
* tpmtool help:                          tpmtool Invocation.  (line  15)
* transport layer:                       The transport layer. (line   6)
* transport protocol:                    The transport layer. (line   6)
* Trust on first use:                    Verifying a certificate using trust on first use authentication.
                                                              (line   6)
* Trust on first use <1>:                Certificate verification.
                                                              (line   6)
* trusted platform module:               Trusted Platform Module.
                                                              (line   6)
* upgrading:                             Upgrading from previous versions.
                                                              (line   6)
* verifying certificate paths:           Verifying X.509 certificate paths.
                                                              (line   6)
* verifying certificate paths <1>:       Verifying a certificate in the context of TLS session.
                                                              (line   6)
* verifying certificate paths <2>:       Verifying a certificate using trust on first use authentication.
                                                              (line   6)
* verifying certificate paths <3>:       Verifying a certificate using DANE.
                                                              (line   6)
* verifying certificate with pkcs11:     Verification using PKCS11.
                                                              (line   6)
* X.509 certificates:                    X.509 certificates.  (line   6)
* X.509 distinguished name:              X.509 distinguished names.
                                                              (line   6)
* X.509 extensions:                      X.509 extensions.    (line   6)
* X.509 Functions:                       X509 certificate API.
                                                              (line   6)

