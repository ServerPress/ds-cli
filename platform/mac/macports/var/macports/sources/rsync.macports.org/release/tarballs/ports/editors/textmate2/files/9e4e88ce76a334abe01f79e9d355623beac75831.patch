From 9e4e88ce76a334abe01f79e9d355623beac75831 Mon Sep 17 00:00:00 2001
From: Ronald Wampler <rdwampler@gmail.com>
Date: Sat, 19 Sep 2015 10:13:51 -0400
Subject: [PATCH] Explicitly cast back to the CGEventFlags typedef
Upstream-Status: Backport

The SDK for 10.11 (Xcode 7 GM and Xcode 7.1 beta) declares this enum using CF_ENUM instead of CF_OPTIONS, which forces us to explicitly cast back to the typedef type. <rdar://22743357>

Hopefully, we can revert this after OS 10.11 is officially released.
---
 Frameworks/ns/src/ns.mm | 30 +++++++++++++++---------------
 1 file changed, 15 insertions(+), 15 deletions(-)

diff --git a/Frameworks/ns/src/ns.mm b/Frameworks/ns/src/ns.mm
index 0a0b0ea..d9f77f5 100644
--- ./Frameworks/ns/src/ns.mm
+++ ./Frameworks/ns/src/ns.mm
@@ -215,17 +215,17 @@ Remove numpad modifier unless key is among what is on standard numpad (incl. com
 	CGEventRef cgEvent = [anEvent CGEvent];
 	CGKeyCode key      = (CGKeyCode)[anEvent keyCode];
 	CGEventFlags flags = CGEventGetFlags(cgEvent);
-	flags &= kCGEventFlagMaskCommand | kCGEventFlagMaskShift | kCGEventFlagMaskAlternate | kCGEventFlagMaskControl | kCGEventFlagMaskNumericPad;
+	flags = CGEventFlags(flags & (kCGEventFlagMaskCommand | kCGEventFlagMaskShift | kCGEventFlagMaskAlternate | kCGEventFlagMaskControl | kCGEventFlagMaskNumericPad));
 
 	std::string keyString              = NULL_STR;
-	std::string const keyStringNoFlags = string_for(key, 0);
-	CGEventFlags newFlags              = flags & (kCGEventFlagMaskControl|kCGEventFlagMaskCommand);
+	std::string const keyStringNoFlags = string_for(key, CGEventFlags(0));
+	CGEventFlags newFlags              = CGEventFlags(flags & (kCGEventFlagMaskControl|kCGEventFlagMaskCommand));
 
 	if(flags & kCGEventFlagMaskNumericPad)
 	{
 		static std::string const numPadKeys = "0123456789=/*-+.,";
 		if(preserveNumPadFlag && numPadKeys.find(keyStringNoFlags) != std::string::npos)
-			newFlags |= kCGEventFlagMaskNumericPad;
+			newFlags = CGEventFlags(newFlags | kCGEventFlagMaskNumericPad);
 	}
 
 	std::string const keyStringCommand = string_for(key, kCGEventFlagMaskCommand);
@@ -233,8 +233,8 @@ Remove numpad modifier unless key is among what is on standard numpad (incl. com
 	{
 		D(DBF_NSEvent, bug("command (⌘) changes key\n"););
 
-		newFlags |= flags & kCGEventFlagMaskAlternate;
-		flags    &= ~kCGEventFlagMaskAlternate;
+		newFlags = CGEventFlags(newFlags | (flags & kCGEventFlagMaskAlternate));
+		flags    = CGEventFlags(flags & ~kCGEventFlagMaskAlternate);
 
 		if(flags & kCGEventFlagMaskShift)
 		{
@@ -246,7 +246,7 @@ Remove numpad modifier unless key is among what is on standard numpad (incl. com
 			else
 			{
 				D(DBF_NSEvent, bug("shift (⇧) is literal\n"););
-				newFlags |= kCGEventFlagMaskShift;
+				newFlags = CGEventFlags(newFlags | kCGEventFlagMaskShift);
 			}
 		}
 	}
@@ -256,29 +256,29 @@ Remove numpad modifier unless key is among what is on standard numpad (incl. com
 		if((flags & kCGEventFlagMaskControl) && !is_ascii(keyStringNoFlags) && (ch = char_for_key_code(key, flags & kCGEventFlagMaskShift)))
 		{
 			keyString = std::string(1, ch);
-			newFlags |= flags & kCGEventFlagMaskAlternate;
+			newFlags = CGEventFlags(newFlags | (flags & kCGEventFlagMaskAlternate));
 		}
 		else
 		{
 			if(flags & kCGEventFlagMaskAlternate)
 			{
-				std::string const keyStringAlternate = string_for(key, flags & (kCGEventFlagMaskAlternate|kCGEventFlagMaskShift));
+				std::string const keyStringAlternate = string_for(key, CGEventFlags(flags & (kCGEventFlagMaskAlternate|kCGEventFlagMaskShift)));
 				if(!is_ascii(keyStringAlternate) || keyStringNoFlags == keyStringAlternate)
 				{
 					D(DBF_NSEvent, bug("option (⌥) is literal\n"););
-					newFlags |= kCGEventFlagMaskAlternate;
-					flags    &= ~kCGEventFlagMaskAlternate;
+					newFlags = CGEventFlags(newFlags | kCGEventFlagMaskAlternate);
+					flags    = CGEventFlags(flags & ~kCGEventFlagMaskAlternate);
 				}
 			}
 
 			if(flags & kCGEventFlagMaskShift)
 			{
-				std::string const keyStringShift = string_for(key, flags & (kCGEventFlagMaskAlternate|kCGEventFlagMaskShift));
+				std::string const keyStringShift = string_for(key, CGEventFlags(flags & (kCGEventFlagMaskAlternate|kCGEventFlagMaskShift)));
 				if(!is_ascii(keyStringShift) || keyStringNoFlags == keyStringShift)
 				{
 					D(DBF_NSEvent, bug("shift (⇧) is literal\n"););
-					newFlags |= kCGEventFlagMaskShift;
-					flags    &= ~kCGEventFlagMaskShift;
+					newFlags = CGEventFlags(newFlags | kCGEventFlagMaskShift);
+					flags    = CGEventFlags(flags & ~kCGEventFlagMaskShift);
 				}
 				else
 				{
@@ -289,5 +289,5 @@ Remove numpad modifier unless key is among what is on standard numpad (incl. com
 		}
 	}
 
-	return string_for(newFlags) + (keyString == NULL_STR ? string_for(key, flags & ~kCGEventFlagMaskControl) : keyString);
+	return string_for(newFlags) + (keyString == NULL_STR ? string_for(key, CGEventFlags(flags & ~kCGEventFlagMaskControl)) : keyString);
 }
