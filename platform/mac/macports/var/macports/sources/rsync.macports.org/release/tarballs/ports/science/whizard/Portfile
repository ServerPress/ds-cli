# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id: Portfile 141303 2015-10-15 19:35:18Z dstrubbe@macports.org $

PortSystem          1.0
PortGroup           compilers 1.0

name                whizard
version             2.2.7
revision            1
categories          science
platforms           darwin
maintainers         desy.de:juergen.reuter desy.de:whizard
license             GPL-2+

description         Generator of high-energy physics events

long_description    WHIZARD is a program system designed for the efficient \
                    calculation of multi-particle scattering cross sections \
                    and simulated event samples. Tree-level matrix elements \
                    are generated automatically for arbitrary partonic \
                    processes by using the Optimized Matrix Element Generator O'Mega. \
                    Matrix elements obtained by alternative methods (e.g., \
                    including loop corrections) may be interfaced as well. \
                    The program is able to calculate numerically stable signal \
                    and background cross sections and generate unweighted \
                    event samples with reasonable efficiency for processes \
                    with up to eight final-state particles\; more particles are \
                    possible. For more particles, there is the option to generate \
                    processes as decay cascades including complete spin correlations.

homepage            http://whizard.hepforge.org/
master_sites        http://www.hepforge.org/archive/whizard/

checksums           rmd160  e7cb8c707966e5ace789834f8e778319a690f36c \
                    sha256  2e8a9949ba0f923643b77e803e2c9cc467fb36310bd91ca3e8587aab2c876cf7

depends_build       port:ocaml

configure.args      --enable-fc-openmp

use_parallel_build  yes

# if clang is used with gfortran, fails to link -lgomp
compilers.choose    cc cxx fc f77
compilers.setup     require_fortran -clang -llvm -g95 -gfortran

# make check doesn't work in general on El Capitan as long as SIP is activated as DYLD variables are not exported.
if {${os.major} <= 14 && ${os.platform} eq "darwin"} {
     test.run            yes
     test.target         check
}

# needs further work, many tests fail
#variant installcheck description {Run testsuite after installation. Use instead of 'port test' for El Capitan.} {
#    patchfiles-append    patch-omega-tests-Makefile.in.diff
#    destroot.target      install installcheck
#}

livecheck.type      regex
livecheck.url       [lindex ${master_sites} 0]
livecheck.regex     ${name}-(\[0-9.\]+)${extract.suffix}
