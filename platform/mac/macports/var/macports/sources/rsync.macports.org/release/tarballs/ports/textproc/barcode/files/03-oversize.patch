Author: Paolo <oopla@users.sf.net>
Description: Fixing oversized images (Closes: #320908).

diff -Naurp barcode.orig/codabar.c barcode/codabar.c
--- barcode.orig/codabar.c	2009-07-16 21:49:31.000000000 +0000
+++ barcode/codabar.c	2009-07-16 21:57:12.000000000 +0000
@@ -165,6 +165,7 @@ int Barcode_cbr_encode(struct Barcode_It
 	    ptr += strlen(ptr);
 	}
     }
+    textptr[-1] = '\0'; /* overwrite last space */
     if (!startpresent) {
 	if (usesum) {
 	    /* if no start character specified, B is used as a stop char */
diff -Naurp barcode.orig/code128.c barcode/code128.c
--- barcode.orig/code128.c	2009-07-16 21:49:31.000000000 +0000
+++ barcode/code128.c	2009-07-16 21:57:12.000000000 +0000
@@ -142,6 +142,7 @@ int Barcode_128b_encode(struct Barcode_I
         textptr += strlen(textptr);
         textpos += SYMBOL_WID; /* width of each code */
     }
+    textptr[-1] = '\0'; /* overwrite last space */
     /* Add the checksum, independent of BARCODE_NO_CHECKSUM */
     checksum %= 103;
     strcat(partial, codeset[checksum]);
@@ -232,6 +233,7 @@ int Barcode_128c_encode(struct Barcode_I
         textptr += strlen(textptr);
         textpos += SYMBOL_WID; /* width of each code */
     }
+    textptr[-1] = '\0'; /* overwrite last space */
     /* Add the checksum, independent of BARCODE_NO_CHECKSUM */
     checksum %= 103;
     strcat(partial, codeset[checksum]);
@@ -492,6 +494,7 @@ int Barcode_128_encode(struct Barcode_It
         textptr += strlen(textptr);
         textpos += step;
     }
+    textptr[-1] = '\0'; /* overwrite last space */
 
     bc->partial = partial;
     bc->textinfo = textinfo;
@@ -593,6 +596,7 @@ int Barcode_128raw_encode(struct Barcode
         textpos += SYMBOL_WID; /* width of each code */
 	i += n;
     }
+    textptr[-1] = '\0'; /* overwrite last space */
     /* Add the checksum, independent of BARCODE_NO_CHECKSUM */
     checksum %= 103;
     strcat(partial, codeset[checksum]);
diff -Naurp barcode.orig/code39.c barcode/code39.c
--- barcode.orig/code39.c	2009-07-16 21:49:31.000000000 +0000
+++ barcode/code39.c	2009-07-16 21:57:12.000000000 +0000
@@ -160,6 +160,7 @@ int Barcode_39_encode(struct Barcode_Ite
         textptr += strlen(textptr);
         ptr += strlen(ptr); 
     }
+    textptr[-1] = '\0'; /* overwrite last space */
     /* Add the checksum */
     if ( (bc->flags & BARCODE_NO_CHECKSUM)==0 ) {
 	code = (strchr(alphabet, checkbet[checksum % 43]) - alphabet);
diff -Naurp barcode.orig/code93.c barcode/code93.c
--- barcode.orig/code93.c	2009-07-16 21:49:31.000000000 +0000
+++ barcode/code93.c	2009-07-16 21:57:12.000000000 +0000
@@ -182,6 +182,7 @@ int Barcode_93_encode(struct Barcode_Ite
 	 */
         textpos += 9;
     }
+    textptr[-1] = '\0'; /* overwrite last space */
     c_checksum=0;
     k_checksum=0;
 
diff -Naurp barcode.orig/i25.c barcode/i25.c
--- barcode.orig/i25.c	2009-07-16 21:49:31.000000000 +0000
+++ barcode/i25.c	2009-07-16 21:57:12.000000000 +0000
@@ -153,6 +153,7 @@ int Barcode_i25_encode(struct Barcode_It
         textpos += 18; /* width of two codes */
         textptr += strlen(textptr);
     }
+    textptr[-1] = '\0'; /* overwrite last space */
     strcat(partial, guard[1]);
 
     bc->partial = partial;
diff -Naurp barcode.orig/msi.c barcode/msi.c
--- barcode.orig/msi.c	2009-07-16 21:49:31.000000000 +0000
+++ barcode/msi.c	2009-07-16 21:57:12.000000000 +0000
@@ -132,6 +132,7 @@ int Barcode_msi_encode(struct Barcode_It
 	    }
 	}
     }
+    textptr[-1] = '\0'; /* overwrite last space */
     /* Some implementations use a double checksum. Currently the only way
      * to print a barcode with double checksum is to put the checksum
      * digit printed below at the end of a code in the command line
diff -Naurp barcode.orig/plessey.c barcode/plessey.c
--- barcode.orig/plessey.c	2009-07-16 21:49:31.000000000 +0000
+++ barcode/plessey.c	2009-07-16 21:57:12.000000000 +0000
@@ -140,6 +140,7 @@ int Barcode_pls_encode(struct Barcode_It
 	checkptr[4*i+2] = (code >> 2) & 1;
 	checkptr[4*i+3] = (code >> 3) & 1;
     }
+    textptr[-1] = '\0'; /* overwrite last space */
     /* The CRC checksum is required */
     for (i=0; i < 4*strlen(text); i++) {
         int j;
diff -Naurp barcode.orig/ps.c barcode/ps.c
--- barcode.orig/ps.c	2009-07-16 21:49:31.000000000 +0000
+++ barcode/ps.c	2009-07-16 21:57:12.000000000 +0000
@@ -146,11 +146,38 @@ int Barcode_ps_print(struct Barcode_Item
 	    fprintf(f, "%%!PS-Adobe-2.0\n");
 	fprintf(f, "%%%%Creator: libbarcode\n");
 	if (bc->flags & BARCODE_OUT_EPS)  {
+	    int bboxw;
+	    bboxw=bc->xoff + bc->width + 2* bc->margin;
+            if (!(bc->flags & BARCODE_NO_ASCII)) {
+                ptr = strrchr(bc->textinfo,' ');
+	        /*fprintf(stderr, "bc->textinfo=%s\n",bc->textinfo);*/
+	        if (ptr == NULL) {
+	            fprintf(stderr,
+	                "barcode: last char: impossible data: NULL\n");
+	        } else {
+	            /*fprintf(stderr, "ptr=%s\n",ptr);*/
+                   if (sscanf(ptr, "%lf:%lf:%c", &f1, &f2, &c) != 3) {
+	                fprintf(stderr,
+	                   "barcode: last char: impossible data: %s\n", ptr);
+                   } else {
+	                /* Both the backslash and the two parens are special */
+	                if (c!='\\' && c!=')' && c!='(') {
+	                    f1=bc->xoff + (f1+f2) * scalef + bc->margin;
+                           if (f1 > bboxw) bboxw=f1;
+	                }
+	            }
+	        }
+	    }
 	    fprintf(f, "%%%%BoundingBox: %i %i %i %i\n",
 		    bc->xoff,
 		    bc->yoff,
-		    bc->xoff + bc->width + 2* bc->margin,
+		    bboxw,
 		    bc->yoff + bc->height + 2* bc->margin);
+	/*    fprintf(f, "%%DEBUG: bc->width=%i bc->height=%i bc->margin=%i "
+                    "scalef=%6.2f barlen=%6.2f bc->partial=%c\n",
+		    bc->width, bc->height, bc->margin,
+		    scalef, (double)barlen, (char)bc->partial[0]);
+         */
 	}
 	fprintf(f, "%%%%EndComments\n");
 	if (bc->flags & BARCODE_OUT_PS)  {
