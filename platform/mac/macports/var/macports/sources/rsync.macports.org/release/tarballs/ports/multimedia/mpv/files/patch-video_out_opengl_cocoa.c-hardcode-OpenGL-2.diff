--- video/out/opengl/cocoa.c.orig
+++ video/out/opengl/cocoa.c
@@ -61,12 +61,17 @@ static void *cocoa_glgetaddr(const char 
 
 static CGLError test_gl_version(struct vo *vo,
                                 CGLContextObj *ctx,
-                                CGLPixelFormatObj *pix,
-                                CGLOpenGLProfile version)
+                                CGLPixelFormatObj *pix
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1070
+                                , CGLOpenGLProfile version
+#endif
+                               )
 {
     CGLPixelFormatAttribute attrs[] = {
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1070
         kCGLPFAOpenGLProfile,
         (CGLPixelFormatAttribute) version,
+#endif
         kCGLPFADoubleBuffer,
         kCGLPFAAccelerated,
         #if MAC_OS_X_VERSION_MIN_REQUIRED >= MAC_OS_X_VERSION_10_8
@@ -104,16 +109,22 @@ static bool create_gl_context(struct MPG
     struct cgl_context *p = ctx->priv;
     CGLError err;
 
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1070
     CGLOpenGLProfile gl_versions[] = {
         kCGLOGLPVersion_3_2_Core,
         kCGLOGLPVersion_Legacy,
     };
+#endif
 
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1070
     for (int n = 0; n < MP_ARRAY_SIZE(gl_versions); n++) {
         err = test_gl_version(ctx->vo, &p->ctx, &p->pix, gl_versions[n]);
         if (err == kCGLNoError)
             break;
     }
+#else
+    err = test_gl_version(ctx->vo, &p->ctx, &p->pix);
+#endif
 
     if (err != kCGLNoError) {
         MP_FATAL(ctx->vo, "error creating CGL context: %s (%d)\n",
--- video/out/opengl/common.c.orig
+++ video/out/opengl/common.c
@@ -356,6 +356,7 @@ void mpgl_load_functions2(GL *gl, void *
     if (shader)
         mp_verbose(log, "GL_SHADING_LANGUAGE_VERSION='%s'\n", shader);
 
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1070
     if (gl->version >= 300) {
         gl->GetStringi = get_fn(fn_ctx, "glGetStringi");
         gl->GetIntegerv = get_fn(fn_ctx, "glGetIntegerv");
@@ -370,7 +371,9 @@ void mpgl_load_functions2(GL *gl, void *
             gl->extensions = talloc_asprintf_append(gl->extensions, " %s", ext);
         }
 
-    } else {
+    } else
+#endif
+    {
         const char *ext = (char*)gl->GetString(GL_EXTENSIONS);
         gl->extensions = talloc_asprintf_append(gl->extensions, " %s", ext);
     }
--- video/out/opengl/common.h.orig
+++ video/out/opengl/common.h
@@ -39,7 +39,6 @@
 #if HAVE_GL_COCOA
 #define GL_DO_NOT_WARN_IF_MULTI_GL_VERSION_HEADERS_INCLUDED 1
 #include <OpenGL/gl.h>
-#include <OpenGL/gl3.h>
 #include <OpenGL/glext.h>
 #else
 #include <GL/gl.h>
--- video/out/opengl/utils.c.orig
+++ video/out/opengl/utils.c
@@ -27,6 +27,7 @@
 #include <string.h>
 #include <stdarg.h>
 #include <assert.h>
+#include <AvailabilityMacros.h>
 
 #include "stream/stream.h"
 #include "common/common.h"
@@ -85,14 +86,20 @@ int glFmt2bpp(GLenum format, GLenum type
         return 2;
     case GL_RGB:
     case GL_BGR:
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1070
     case GL_RGB_INTEGER:
+#endif
         return 3 * component_size;
     case GL_RGBA:
     case GL_BGRA:
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1070
     case GL_RGBA_INTEGER:
+#endif
         return 4 * component_size;
     case GL_RED:
+#if MAC_OS_X_VERSION_MIN_REQUIRED >= 1070
     case GL_RED_INTEGER:
+#endif
         return component_size;
     case GL_RG:
     case GL_LUMINANCE_ALPHA:
--- video/out/opengl/video.c.orig
+++ video/out/opengl/video.c
@@ -264,10 +264,10 @@ static const struct fmt_entry gl_byte_fo
 };
 
 static const struct fmt_entry gl_float16_formats[] = {
-    {0, GL_R16F,    GL_RED,     GL_FLOAT},              // 1 x f
-    {0, GL_RG16F,   GL_RG,      GL_FLOAT},              // 2 x f
-    {0, GL_RGB16F,  GL_RGB,     GL_FLOAT},              // 3 x f
-    {0, GL_RGBA16F, GL_RGBA,    GL_FLOAT},              // 4 x f
+    {0, 0,    GL_RED,     GL_FLOAT},              // 1 x f
+    {0, 0,   GL_RG,      GL_FLOAT},              // 2 x f
+    {0, 0,  GL_RGB,     GL_FLOAT},              // 3 x f
+    {0, 0, GL_RGBA,    GL_FLOAT},              // 4 x f
 };
 
 static const struct fmt_entry gl_apple_formats[] = {
@@ -389,12 +389,8 @@ const struct m_sub_options gl_video_conf
                     {"rgb10",  GL_RGB10},
                     {"rgb10_a2", GL_RGB10_A2},
                     {"rgb16",  GL_RGB16},
-                    {"rgb16f", GL_RGB16F},
-                    {"rgb32f", GL_RGB32F},
                     {"rgba12", GL_RGBA12},
-                    {"rgba16", GL_RGBA16},
-                    {"rgba16f", GL_RGBA16F},
-                    {"rgba32f", GL_RGBA32F})),
+                    {"rgba16", GL_RGBA16})),
         OPT_CHOICE_OR_INT("dither-depth", dither_depth, 0, -1, 16,
                           ({"no", -1}, {"auto", 0})),
         OPT_CHOICE("dither", dither_algo, 0,
