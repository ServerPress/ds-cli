--- common/video/iso-mpeg4/src/vtc_zte_ac.cpp.orig	2005-05-04 13:56:01.000000000 -0600
+++ common/video/iso-mpeg4/src/vtc_zte_ac.cpp	2009-11-19 03:56:59.000000000 -0700
@@ -157,7 +157,7 @@
 	(ace->bitCount)++;
 	if (!(ace->bitsLeft)) {
 		if (!(ace->bitstream))
-			errorHandler("Failure to allocate space for array Bitstream " \
+			errorHandler((char*)"Failure to allocate space for array Bitstream " \
                             "in ac_encoder structure");
 		switch (flag=(ace->bitstreamLength>=MAX_BUFFER)) {
 			case 1:
@@ -208,7 +208,7 @@
 	ace->bitstreamLength = 0;
 	ace->bitstream=(BYTETYPE *)malloc((MAX_BUFFER+10)*sizeof(BYTETYPE));
 	if (ace->bitstream == NULL)
-		errorHandler("can't allocate memory for ace->bitstream");
+		errorHandler((char*)"can't allocate memory for ace->bitstream");
 //	assert((ace->bitstream=(BYTETYPE *)malloc((MAX_BUFFER+10)*sizeof(BYTETYPE))));
 	zeroStrLen=0;
 
@@ -271,7 +271,7 @@
   register long bitCount;
   //static int count=0;
   if (sym<0 || sym>=acm->nsym)
-    errorHandler("Invalid symbol passed to mzte_ac_encode_symbol " \
+    errorHandler((char*)"Invalid symbol passed to mzte_ac_encode_symbol " \
 		 "(sym=%d while nsym=%d)", 
 		 sym,acm->nsym);
 
@@ -340,7 +340,7 @@
 	zeroStrLen+=(!t)?1:-zeroStrLen;
 	if(zeroStrLen==STUFFING_CNT) {
 		if (!mzte_input_bit(acd))
-			errorHandler("Error in decoding stuffing bits " \
+			errorHandler((char*)"Error in decoding stuffing bits " \
                          "(must be 1 after %d 0's)",STUFFING_CNT);
 		zeroStrLen=0;
 	}
@@ -363,7 +363,7 @@
 
 	/* remove first stuffing bit */
 	if(!get_X_bits(1))
-		errorHandler("Error in extracting the stuffing bit at the\n"\
+		errorHandler((char*)"Error in extracting the stuffing bit at the\n"\
                         "beginning of arithmetic decoding"\
                         "refer mzte_encoder_init in ac.c)");
 	
@@ -392,7 +392,7 @@
 	restore_arithmetic_offset(acd->bitsLeft);	
 	acd->bitCount += acd->bitsLeft;
 	if ((acd->bitCount)%8)
-		errorHandler("Did not get alignment in arithmetic decoding");
+		errorHandler((char*)"Did not get alignment in arithmetic decoding");
 }
 
 Int CVTCDecoder::mzte_ac_decode_symbol(ac_decoder *acd,ac_model *acm)
@@ -457,12 +457,12 @@
 	acm->adapt = adapt;
 
   if ((acm->freq=(UShort *)malloc(nsym*sizeof(UShort)))==NULL)
-    errorHandler("Can't allocate %d bytes for acm->freq in " \
+    errorHandler((char*)"Can't allocate %d bytes for acm->freq in " \
 		 "mzte_ac_model_init.",
 		 nsym*sizeof(UShort));
 
   if  ((acm->cfreq=(UShort *) malloc((nsym+1)*sizeof(UShort)))==NULL)
-    errorHandler("Can't allocate %d bytes for acm->cfreq in " \
+    errorHandler((char*)"Can't allocate %d bytes for acm->cfreq in " \
 		 "mzte_ac_model_init.",
 		 (nsym+1)*sizeof(UShort));
   
@@ -484,7 +484,7 @@
 			}
 		}
 		if (acm->cfreq[0] > acm->Max_frequency)
-			errorHandler("error in acm->cfreq[0]");
+			errorHandler((char*)"error in acm->cfreq[0]");
 	}
 	else {
 		for (i=0; i < nsym; i++) {
