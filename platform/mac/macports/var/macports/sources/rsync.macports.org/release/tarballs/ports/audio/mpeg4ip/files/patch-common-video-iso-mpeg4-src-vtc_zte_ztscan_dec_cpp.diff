--- common/video/iso-mpeg4/src/vtc_zte_ztscan_dec.cpp.orig	2005-05-04 13:56:01.000000000 -0600
+++ common/video/iso-mpeg4/src/vtc_zte_ztscan_dec.cpp	2009-11-19 04:13:55.000000000 -0700
@@ -242,7 +242,7 @@
 ********************************************************/ 
 Void CVTCDecoder::wavelet_dc_decode(Int c)
 {
-  noteDetail("Decoding DC (wavelet_dc_decode)....");
+  noteDetail((char*)"Decoding DC (wavelet_dc_decode)....");
   color=c;
 
 //Added by Sarnoff for error resilience, 3/5/99
@@ -270,7 +270,7 @@
 
   callc_decode();
   iDC_predict(color);
-  noteDetail("Completed decoding DC.");
+  noteDetail((char*)"Completed decoding DC.");
 
 }
 
@@ -318,7 +318,7 @@
   // 1127
   numBP = ceilLog2(mzte_codec.m_iMaxDC+1); // modified by Sharp
   if ((acm_bpdc=(ac_model *)calloc(numBP,sizeof(ac_model)))==NULL)
-    errorHandler("Can't allocate memory for prob model.");
+    errorHandler((char*)"Can't allocate memory for prob model.");
 
   for (i=0; i<numBP; i++) {
     acm_bpdc[i].Max_frequency = Bitplane_Max_frequency;
@@ -462,7 +462,7 @@
 {
   SNR_IMAGE *snr_image;
     
-  noteDetail("Encoding AC (wavelet_higher_bands_encode_SQ)....");
+  noteDetail((char*)"Encoding AC (wavelet_higher_bands_encode_SQ)....");
 
   color=col;
   snr_image=&(mzte_codec.m_SPlayer[color].SNRlayer.snr_image);
@@ -488,7 +488,7 @@
  }
 //End modified by Sarnoff for error resilience, 3/5/99
 
-  noteDetail("Completed encoding AC.");
+  noteDetail((char*)"Completed encoding AC.");
 }
 
 
@@ -662,7 +662,7 @@
 ********************************************************/ 
 Void CVTCDecoder::wavelet_higher_bands_decode_SQ_tree()
 {
-  noteDetail("Decoding AC band (wavelet_higher_bands_decode_SQ)....");
+  noteDetail((char*)"Decoding AC band (wavelet_higher_bands_decode_SQ)....");
   
 //Modified by Sarnoff for error resilience, 3/5/99
  if(mzte_codec.m_usErrResiDisable){
@@ -692,7 +692,7 @@
  }
 //End modified by Sarnoff for error resilience, 3/5/99
 
-  noteDetail("Completed decoding AC band.");
+  noteDetail((char*)"Completed decoding AC band.");
 }
 
 
@@ -896,7 +896,7 @@
       mag_sign_decode_SQ(h,w);
       break;
     default: 
-      errorHandler("Invalid zerotree symbol in single quant decode");
+      errorHandler((char*)"Invalid zerotree symbol in single quant decode");
   }
 
 #if 0
@@ -970,7 +970,7 @@
 	mag_sign_decode_SQ(h,w);
 	break;
       default: 
-	errorHandler("Invalid zerotree symbol in single quant decode");
+	errorHandler((char*)"Invalid zerotree symbol in single quant decode");
     }
   }
   
@@ -1085,7 +1085,7 @@
 ********************************************************/ 
 Void CVTCDecoder::wavelet_higher_bands_decode_MQ(Int scanDirection)
 {
-  noteDetail("Decoding AC band (wavelet_higher_bands_decode_MQ)....");
+  noteDetail((char*)"Decoding AC band (wavelet_higher_bands_decode_MQ)....");
 
   /* init arithmetic coder */
   mzte_ac_decoder_init(&acd);
@@ -1168,7 +1168,7 @@
     {      
       SNR_IMAGE *snr_image;
 
-      noteProgress("  Coding Layer %d, Color %d", layer - (color!=0), color);
+      noteProgress((char*)"  Coding Layer %d, Color %d", layer - (color!=0), color);
 
       ac_h2=acH2;
       ac_w2=acW2;
@@ -1310,7 +1310,7 @@
 	  coeffinfo[h][w].type=zt_type = czt_type ? VZTR : ZTR;
 	  break;
 	default:
-	  errorHandler("Invalid state (%d) in multi-quant encoding.", 
+	  errorHandler((char*)"Invalid state (%d) in multi-quant encoding.", 
 		       coeffinfo[h][w].state);
       }
 #ifdef _SHAPE_
@@ -1331,7 +1331,7 @@
 	zt_type = coeffinfo[h][w].type = ZTR;
 	break;
       default:
-	errorHandler("Invalid state (%d) in multi-quant encoding.", 
+	errorHandler((char*)"Invalid state (%d) in multi-quant encoding.", 
 		     coeffinfo[h][w].state);
       }
     }
@@ -1361,7 +1361,7 @@
 	mag_sign_decode_MQ(h,w);
       break;
     default:
-      errorHandler("Invalid type in multi quant decoding.");     
+      errorHandler((char*)"Invalid type in multi quant decoding.");     
   }
 }
 
@@ -1566,7 +1566,7 @@
 	    coeffinfo[h][w].type=zt_type = czt_type ? VZTR : ZTR;
 	    break;
 	default:
-	  errorHandler("Invalid state (%d) in multi-quant encoding.", 
+	  errorHandler((char*)"Invalid state (%d) in multi-quant encoding.", 
 		       coeffinfo[h][w].state);
 	}
 #ifdef _SHAPE_
@@ -1587,7 +1587,7 @@
 	    zt_type = coeffinfo[h][w].type = ZTR;
 	    break;
 	  default:
-	    errorHandler("Invalid state (%d) in multi-quant encoding.", 
+	    errorHandler((char*)"Invalid state (%d) in multi-quant encoding.", 
 			 coeffinfo[h][w].state);
 	  }
       }
@@ -1631,7 +1631,7 @@
 	  mag_sign_decode_MQ(h,w);
 	break;
       default:
-	errorHandler("Invalid type in multi quant decoding.");     
+	errorHandler((char*)"Invalid type in multi quant decoding.");     
     }
   }
 
@@ -1970,7 +1970,7 @@
 Void CVTCDecoder::init_arith_decoder_model(Int color)
 {
   if(init_ac!=0) /* check for not closed ac coder. bbc, 7/2/98 */
-    errorHandler("didn't close arithmetic decoder before.");
+    errorHandler((char*)"didn't close arithmetic decoder before.");
   else
     init_ac=1;
 
@@ -1997,7 +1997,7 @@
     init_ac=0;
 
   if(errSignal ==0)
-    noteProgress("  ==>D found packet at [TU_%d,TU_%d], l=%d bits",TU_first,
+    noteProgress((char*)"  ==>D found packet at [TU_%d,TU_%d], l=%d bits",TU_first,
                  TU_last,packet_size-16);
 
   if(mzte_codec.m_iScanDirection==0){ /* TD */
@@ -2022,7 +2022,7 @@
   if(packet_size-16-prev_segs_size<(Int)mzte_codec.m_usSegmentThresh) 
     return 2;
 
-  noteProgress("\tDecode segment marker.");
+  noteProgress((char*)"\tDecode segment marker.");
 
   prev_segs_size=packet_size-16;
 
@@ -2111,7 +2111,7 @@
 
   if(LTU==TU_last){  
     if(errSignal ==0)
-      noteProgress("  ==>D found packet at [TU_%d,TU_%d], l=%d bits",
+      noteProgress((char*)"  ==>D found packet at [TU_%d,TU_%d], l=%d bits",
 		   TU_first,TU_last,packet_size-16);
     
     for (i=0; i<numBP; i++) 
