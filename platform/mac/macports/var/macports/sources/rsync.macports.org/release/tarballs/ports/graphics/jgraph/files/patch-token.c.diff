--- token.c.orig	2012-10-01 00:08:42.000000000 -0400
+++ token.c	2012-09-30 22:27:14.000000000 -0400
@@ -7,6 +7,7 @@
 
 #include <math.h>
 #include <stdio.h>
+#include <string.h>
 
 #ifdef LCC 
 #include <stdlib.h>
@@ -35,7 +36,7 @@ typedef struct iostack {
 static char INPUT[1000];
 static int getnew = 1;
 static char oldchar = '\0';
-static oldcharvalid = 0;
+static int oldcharvalid = 0;
 static char pipe = 0;
 static int eof = 0;
 static int init = 0;
@@ -46,24 +47,22 @@ static FILE *IOSTREAM;
 static char FILENAME[300];
 static int line = 1;
 
+static int getsystemstring(void);
+
 #ifdef VMS
 /* On VMS, there are no popen() and pclose(), so we provide dummies here. */
-FILE *popen(command, type)
-char *command, *type;
+FILE *popen(const char *command, const char *type)
 {
     return(NULL);
 }
-int pclose(stream)
-FILE *stream;
+int pclose(FILE *stream)
 {
     return(-1);
 }
 #endif /*VMS*/
 
-set_input_file(s)
-char *s;
+void set_input_file(const char *s)
 {
-  FILE *f;
   Iostack n;
 
   if (init == 0) {
@@ -93,12 +92,12 @@ char *s;
   }
 }
 
-error_header()
+void error_header()
 {
   fprintf(stderr, "%s,%d: ", FILENAME, line);
 }
   
-int gettokenchar()
+static int gettokenchar()
 {
   if (oldcharvalid == 0) oldchar = getc(IOSTREAM);
   oldcharvalid = 0;
@@ -106,14 +105,13 @@ int gettokenchar()
   return oldchar;
 }
 
-ungettokenchar()
+static void ungettokenchar()
 {
   oldcharvalid = 1;
   if (oldchar == '\n') line--;
 }
 
-int gettoken(s)
-char *s;
+static int gettoken(char *s)
 {
   int i;
   char c;
@@ -131,7 +129,7 @@ char *s;
   return i;
 }
 
-get_comment()
+static void get_comment()
 {
   if (eof) return;
   while (1) {
@@ -148,8 +146,7 @@ static int iostackempty()
   return (first(stack) == nil(stack));
 }
 
-static push_iostack(p)
-int p;
+static void push_iostack(int p)
 {
   Iostack n;
 
@@ -177,7 +174,7 @@ int p;
   strcpy(FILENAME, INPUT);
 }
 
-static pop_iostack()
+static void pop_iostack()
 {
   Iostack n;
 
@@ -195,7 +192,7 @@ static pop_iostack()
   if (n->stream == NULL) {
     n->stream = fopen(n->filename, "r");
     if (n->stream == NULL) {
-      fprintf(stderr, "Error: cannot open file \"%s\"\n", n->stream);
+      fprintf(stderr, "Error: cannot open file \"%s\"\n", n->filename);
       exit(1);
     }
   }
@@ -210,7 +207,7 @@ static pop_iostack()
   free_node(n, stack);
 }
 
-static nexttoken()
+static void nexttoken()
 {
   if (eof) return;
   if (getnew) {
@@ -258,8 +255,7 @@ static nexttoken()
   return;
 }
 
-int getstring(s)
-char *s;
+int getstring(char *s)
 {
   nexttoken();
   if (eof) return 0;
@@ -267,8 +263,7 @@ char *s;
   return 1;
 }
 
-int getint(i)
-int *i;
+int getint(int *i)
 {
   int j;
 
@@ -282,8 +277,7 @@ int *i;
   return 1;
 }
 
-int getfloat(f)
-float *f;
+int getfloat(float *f)
 {
   int j;
 
@@ -304,8 +298,7 @@ float *f;
   } else return 1;
 }
 
-static char *new_printable_text(s)
-char *s;
+static char *new_printable_text(const char *s)
 {
   char *new_s;
   int to_pad, i, j;
@@ -334,7 +327,7 @@ char *s;
 char *getmultiline()
 {
   char c;
-  int i, j, done, len, started;
+  int i, done, len, started;
   char *out_str;
 
   if (getnew == 0) return CNULL;
@@ -374,9 +367,7 @@ char *getmultiline()
 
 char *getlabel()
 {
-  char c;
   char *txt, *new;
-  int i;
 
   txt = getmultiline();
   if (txt == CNULL) return CNULL;
@@ -415,7 +406,7 @@ int getsystemstring()
   return 1;
 }
 
-rejecttoken()
+void rejecttoken()
 {
   getnew = 0;
 }
