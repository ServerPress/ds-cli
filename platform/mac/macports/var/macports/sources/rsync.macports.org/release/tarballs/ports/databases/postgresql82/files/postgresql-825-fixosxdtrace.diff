diff -Nru postgresql-8.2.5/src/backend/Makefile postgresql-8.2.5-osxdtrace/src/backend/Makefile
--- postgresql-8.2.5/src/backend/Makefile	2006-10-08 18:15:33.000000000 +0100
+++ postgresql-8.2.5-osxdtrace/src/backend/Makefile	2007-10-26 08:02:09.000000000 +0100
@@ -19,10 +19,6 @@
 
 SUBSYSOBJS := $(DIRS:%=%/SUBSYS.o)
 
-ifeq ($(enable_dtrace), yes)
-LOCALOBJS += utils/probes.o
-endif
-
 OBJS = $(SUBSYSOBJS) $(LOCALOBJS) $(top_builddir)/src/port/libpgport_srv.a
 
 # We put libpgport into OBJS, so remove it from LIBS; also add libldap
@@ -139,8 +135,8 @@
 	    $(LN_S) ../../../$(subdir)/utils/fmgroids.h .
 
 
-utils/probes.o: utils/probes.d $(SUBSYSOBJS)
-	$(DTRACE) $(DTRACEFLAGS) -G -s $^ -o $@
+utils/probes.h: utils/probes.d $(SUBSYSOBJS)
+	$(DTRACE) $(DTRACEFLAGS) -h -s $^ -o $@
 
 
 ##########################################################################
diff -Nru postgresql-8.2.5/src/backend/access/transam/xact.c postgresql-8.2.5-osxdtrace/src/backend/access/transam/xact.c
--- postgresql-8.2.5/src/backend/access/transam/xact.c	2007-05-30 22:01:45.000000000 +0100
+++ postgresql-8.2.5-osxdtrace/src/backend/access/transam/xact.c	2007-10-26 08:00:18.000000000 +0100
@@ -43,6 +43,7 @@
 #include "utils/memutils.h"
 #include "utils/relcache.h"
 #include "utils/guc.h"
+#include "utils/probes.h"
 
 
 /*
@@ -1408,8 +1409,9 @@
 
 	XactLockTableInsert(s->transactionId);
 
-	PG_TRACE1(transaction__start, s->transactionId);
-
+	if (POSTGRESQL_TRANSACTION_START_ENABLED())
+		POSTGRESQL_TRANSACTION_START(s->transactionId);
+	
 	/*
 	 * set transaction_timestamp() (a/k/a now()).  We want this to be the same
 	 * as the first command's statement_timestamp(), so don't do a fresh
@@ -1562,7 +1564,8 @@
 		LWLockRelease(ProcArrayLock);
 	}
 
-	PG_TRACE1(transaction__commit, s->transactionId);
+	if (POSTGRESQL_TRANSACTION_COMMIT_ENABLED())
+		POSTGRESQL_TRANSACTION_COMMIT(s->transactionId);
 
 	/*
 	 * This is all post-commit cleanup.  Note that if an error is raised here,
@@ -1964,7 +1967,8 @@
 		LWLockRelease(ProcArrayLock);
 	}
 
-	PG_TRACE1(transaction__abort, s->transactionId);
+	if (POSTGRESQL_TRANSACTION_ABORT_ENABLED())
+		POSTGRESQL_TRANSACTION_ABORT(s->transactionId);
 
 	/*
 	 * Post-abort cleanup.	See notes in CommitTransaction() concerning
diff -Nru postgresql-8.2.5/src/backend/storage/lmgr/lock.c postgresql-8.2.5-osxdtrace/src/backend/storage/lmgr/lock.c
--- postgresql-8.2.5/src/backend/storage/lmgr/lock.c	2006-10-04 01:29:57.000000000 +0100
+++ postgresql-8.2.5-osxdtrace/src/backend/storage/lmgr/lock.c	2007-10-26 07:44:31.000000000 +0100
@@ -41,6 +41,7 @@
 #include "utils/memutils.h"
 #include "utils/ps_status.h"
 #include "utils/resowner.h"
+#include "utils/probes.h"
 
 
 /* This configuration variable is used to set the lock table size */
@@ -787,11 +788,13 @@
 		 * Sleep till someone wakes me up.
 		 */
 
-		PG_TRACE2(lock__startwait, locktag->locktag_field2, lockmode);
+		if (POSTGRESQL_LOCK_STARTWAIT_ENABLED())
+			POSTGRESQL_LOCK_STARTWAIT(locktag->locktag_field2, lockmode);
 
 		WaitOnLock(locallock, owner);
 
-		PG_TRACE2(lock__endwait, locktag->locktag_field2, lockmode);
+		if (POSTGRESQL_LOCK_ENDWAIT_ENABLED())
+			POSTGRESQL_LOCK_ENDWAIT(locktag->locktag_field2, lockmode);
 
 		/*
 		 * NOTE: do not do any material change of state between here and
diff -Nru postgresql-8.2.5/src/backend/storage/lmgr/lwlock.c postgresql-8.2.5-osxdtrace/src/backend/storage/lmgr/lwlock.c
--- postgresql-8.2.5/src/backend/storage/lmgr/lwlock.c	2006-10-15 23:04:07.000000000 +0100
+++ postgresql-8.2.5-osxdtrace/src/backend/storage/lmgr/lwlock.c	2007-10-26 07:47:04.000000000 +0100
@@ -28,7 +28,7 @@
 #include "storage/ipc.h"
 #include "storage/proc.h"
 #include "storage/spin.h"
-
+#include "utils/probes.h"
 
 /* We use the ShmemLock spinlock to protect LWLockAssign */
 extern slock_t *ShmemLock;
@@ -447,7 +447,8 @@
 		block_counts[lockid]++;
 #endif
 
-		PG_TRACE2(lwlock__startwait, lockid, mode);
+		if (POSTGRESQL_LWLOCK_STARTWAIT_ENABLED())
+			POSTGRESQL_LWLOCK_STARTWAIT(lockid, mode);
 
 		for (;;)
 		{
@@ -458,7 +459,8 @@
 			extraWaits++;
 		}
 
-		PG_TRACE2(lwlock__endwait, lockid, mode);
+		if (POSTGRESQL_LWLOCK_ENDWAIT_ENABLED())
+			POSTGRESQL_LWLOCK_ENDWAIT(lockid, mode);
 
 		LOG_LWDEBUG("LWLockAcquire", lockid, "awakened");
 
@@ -469,7 +471,8 @@
 	/* We are done updating shared state of the lock itself. */
 	SpinLockRelease(&lock->mutex);
 
-	PG_TRACE2(lwlock__acquire, lockid, mode);
+	if (POSTGRESQL_LWLOCK_ACQUIRE_ENABLED())
+		POSTGRESQL_LWLOCK_ACQUIRE(lockid, mode);
 
 	/* Add lock to list of locks held by this backend */
 	held_lwlocks[num_held_lwlocks++] = lockid;
@@ -540,13 +543,15 @@
 		/* Failed to get lock, so release interrupt holdoff */
 		RESUME_INTERRUPTS();
 		LOG_LWDEBUG("LWLockConditionalAcquire", lockid, "failed");
-		PG_TRACE2(lwlock__condacquire__fail, lockid, mode);
+		if (POSTGRESQL_LWLOCK_CONDACQUIRE_ENABLED())
+			POSTGRESQL_LWLOCK_CONDACQUIRE(lockid, mode);
 	}
 	else
 	{
 		/* Add lock to list of locks held by this backend */
 		held_lwlocks[num_held_lwlocks++] = lockid;
-		PG_TRACE2(lwlock__condacquire, lockid, mode);
+		if (POSTGRESQL_LWLOCK_CONDACQUIRE_ENABLED())
+			POSTGRESQL_LWLOCK_CONDACQUIRE(lockid, mode);
 	}
 
 	return !mustwait;
@@ -631,7 +636,8 @@
 	/* We are done updating shared state of the lock itself. */
 	SpinLockRelease(&lock->mutex);
 
-	PG_TRACE1(lwlock__release, lockid);
+	if (POSTGRESQL_LWLOCK_RELEASE_ENABLED())
+		POSTGRESQL_LWLOCK_RELEASE(lockid);
 
 	/*
 	 * Awaken any waiters I removed from the queue.
diff -Nru postgresql-8.2.5/src/backend/utils/Makefile postgresql-8.2.5-osxdtrace/src/backend/utils/Makefile
--- postgresql-8.2.5/src/backend/utils/Makefile	2006-07-15 04:33:14.000000000 +0100
+++ postgresql-8.2.5-osxdtrace/src/backend/utils/Makefile	2007-10-26 07:48:54.000000000 +0100
@@ -29,4 +29,4 @@
 
 clean:
 	for dir in $(SUBDIRS); do $(MAKE) -C $$dir $@ || exit; done
-	rm -f SUBSYS.o fmgrtab.o fmgroids.h fmgrtab.c
+	rm -f SUBSYS.o fmgrtab.o fmgroids.h fmgrtab.c probes.h
diff -Nru postgresql-8.2.5/src/backend/utils/probes.h postgresql-8.2.5-osxdtrace/src/backend/utils/probes.h
--- postgresql-8.2.5/src/backend/utils/probes.h	1970-01-01 01:00:00.000000000 +0100
+++ postgresql-8.2.5-osxdtrace/src/backend/utils/probes.h	2007-10-26 08:00:31.000000000 +0100
@@ -0,0 +1,135 @@
+/*
+ * Generated by dtrace(1M).
+ */
+
+#ifndef	_PROBES_H
+#define	_PROBES_H
+
+#include <unistd.h>
+
+#ifdef	__cplusplus
+extern "C" {
+#endif
+
+#define POSTGRESQL_STABILITY "___dtrace_stability$postgresql$v1$1_1_0_1_1_0_1_1_0_1_1_0_1_1_0"
+
+#define POSTGRESQL_TYPEDEFS "___dtrace_typedefs$postgresql$v1"
+
+#define	POSTGRESQL_LOCK_ENDWAIT(arg0, arg1) \
+{ \
+	__asm__ volatile(".reference " POSTGRESQL_TYPEDEFS); \
+	__dtrace_probe$postgresql$lock__endwait$v1$696e74$696e74(arg0, arg1); \
+	__asm__ volatile(".reference " POSTGRESQL_STABILITY); \
+} 
+#define	POSTGRESQL_LOCK_ENDWAIT_ENABLED() \
+	__dtrace_isenabled$postgresql$lock__endwait$v1()
+#define	POSTGRESQL_LOCK_STARTWAIT(arg0, arg1) \
+{ \
+	__asm__ volatile(".reference " POSTGRESQL_TYPEDEFS); \
+	__dtrace_probe$postgresql$lock__startwait$v1$696e74$696e74(arg0, arg1); \
+	__asm__ volatile(".reference " POSTGRESQL_STABILITY); \
+} 
+#define	POSTGRESQL_LOCK_STARTWAIT_ENABLED() \
+	__dtrace_isenabled$postgresql$lock__startwait$v1()
+#define	POSTGRESQL_LWLOCK_ACQUIRE(arg0, arg1) \
+{ \
+	__asm__ volatile(".reference " POSTGRESQL_TYPEDEFS); \
+	__dtrace_probe$postgresql$lwlock__acquire$v1$696e74$696e74(arg0, arg1); \
+	__asm__ volatile(".reference " POSTGRESQL_STABILITY); \
+} 
+#define	POSTGRESQL_LWLOCK_ACQUIRE_ENABLED() \
+	__dtrace_isenabled$postgresql$lwlock__acquire$v1()
+#define	POSTGRESQL_LWLOCK_CONDACQUIRE(arg0, arg1) \
+{ \
+	__asm__ volatile(".reference " POSTGRESQL_TYPEDEFS); \
+	__dtrace_probe$postgresql$lwlock__condacquire$v1$696e74$696e74(arg0, arg1); \
+	__asm__ volatile(".reference " POSTGRESQL_STABILITY); \
+} 
+#define	POSTGRESQL_LWLOCK_CONDACQUIRE_ENABLED() \
+	__dtrace_isenabled$postgresql$lwlock__condacquire$v1()
+#define	POSTGRESQL_LWLOCK_CONDACQUIRE_FAIL(arg0, arg1) \
+{ \
+	__asm__ volatile(".reference " POSTGRESQL_TYPEDEFS); \
+	__dtrace_probe$postgresql$lwlock__condacquire__fail$v1$696e74$696e74(arg0, arg1); \
+	__asm__ volatile(".reference " POSTGRESQL_STABILITY); \
+} 
+#define	POSTGRESQL_LWLOCK_CONDACQUIRE_FAIL_ENABLED() \
+	__dtrace_isenabled$postgresql$lwlock__condacquire__fail$v1()
+#define	POSTGRESQL_LWLOCK_ENDWAIT(arg0, arg1) \
+{ \
+	__asm__ volatile(".reference " POSTGRESQL_TYPEDEFS); \
+	__dtrace_probe$postgresql$lwlock__endwait$v1$696e74$696e74(arg0, arg1); \
+	__asm__ volatile(".reference " POSTGRESQL_STABILITY); \
+} 
+#define	POSTGRESQL_LWLOCK_ENDWAIT_ENABLED() \
+	__dtrace_isenabled$postgresql$lwlock__endwait$v1()
+#define	POSTGRESQL_LWLOCK_RELEASE(arg0) \
+{ \
+	__asm__ volatile(".reference " POSTGRESQL_TYPEDEFS); \
+	__dtrace_probe$postgresql$lwlock__release$v1$696e74(arg0); \
+	__asm__ volatile(".reference " POSTGRESQL_STABILITY); \
+} 
+#define	POSTGRESQL_LWLOCK_RELEASE_ENABLED() \
+	__dtrace_isenabled$postgresql$lwlock__release$v1()
+#define	POSTGRESQL_LWLOCK_STARTWAIT(arg0, arg1) \
+{ \
+	__asm__ volatile(".reference " POSTGRESQL_TYPEDEFS); \
+	__dtrace_probe$postgresql$lwlock__startwait$v1$696e74$696e74(arg0, arg1); \
+	__asm__ volatile(".reference " POSTGRESQL_STABILITY); \
+} 
+#define	POSTGRESQL_LWLOCK_STARTWAIT_ENABLED() \
+	__dtrace_isenabled$postgresql$lwlock__startwait$v1()
+#define	POSTGRESQL_TRANSACTION_ABORT(arg0) \
+{ \
+	__asm__ volatile(".reference " POSTGRESQL_TYPEDEFS); \
+	__dtrace_probe$postgresql$transaction__abort$v1$696e74(arg0); \
+	__asm__ volatile(".reference " POSTGRESQL_STABILITY); \
+} 
+#define	POSTGRESQL_TRANSACTION_ABORT_ENABLED() \
+	__dtrace_isenabled$postgresql$transaction__abort$v1()
+#define	POSTGRESQL_TRANSACTION_COMMIT(arg0) \
+{ \
+	__asm__ volatile(".reference " POSTGRESQL_TYPEDEFS); \
+	__dtrace_probe$postgresql$transaction__commit$v1$696e74(arg0); \
+	__asm__ volatile(".reference " POSTGRESQL_STABILITY); \
+} 
+#define	POSTGRESQL_TRANSACTION_COMMIT_ENABLED() \
+	__dtrace_isenabled$postgresql$transaction__commit$v1()
+#define	POSTGRESQL_TRANSACTION_START(arg0) \
+{ \
+	__asm__ volatile(".reference " POSTGRESQL_TYPEDEFS); \
+	__dtrace_probe$postgresql$transaction__start$v1$696e74(arg0); \
+	__asm__ volatile(".reference " POSTGRESQL_STABILITY); \
+} 
+#define	POSTGRESQL_TRANSACTION_START_ENABLED() \
+	__dtrace_isenabled$postgresql$transaction__start$v1()
+
+
+extern void __dtrace_probe$postgresql$lock__endwait$v1$696e74$696e74(int, int);
+extern int __dtrace_isenabled$postgresql$lock__endwait$v1(void);
+extern void __dtrace_probe$postgresql$lock__startwait$v1$696e74$696e74(int, int);
+extern int __dtrace_isenabled$postgresql$lock__startwait$v1(void);
+extern void __dtrace_probe$postgresql$lwlock__acquire$v1$696e74$696e74(int, int);
+extern int __dtrace_isenabled$postgresql$lwlock__acquire$v1(void);
+extern void __dtrace_probe$postgresql$lwlock__condacquire$v1$696e74$696e74(int, int);
+extern int __dtrace_isenabled$postgresql$lwlock__condacquire$v1(void);
+extern void __dtrace_probe$postgresql$lwlock__condacquire__fail$v1$696e74$696e74(int, int);
+extern int __dtrace_isenabled$postgresql$lwlock__condacquire__fail$v1(void);
+extern void __dtrace_probe$postgresql$lwlock__endwait$v1$696e74$696e74(int, int);
+extern int __dtrace_isenabled$postgresql$lwlock__endwait$v1(void);
+extern void __dtrace_probe$postgresql$lwlock__release$v1$696e74(int);
+extern int __dtrace_isenabled$postgresql$lwlock__release$v1(void);
+extern void __dtrace_probe$postgresql$lwlock__startwait$v1$696e74$696e74(int, int);
+extern int __dtrace_isenabled$postgresql$lwlock__startwait$v1(void);
+extern void __dtrace_probe$postgresql$transaction__abort$v1$696e74(int);
+extern int __dtrace_isenabled$postgresql$transaction__abort$v1(void);
+extern void __dtrace_probe$postgresql$transaction__commit$v1$696e74(int);
+extern int __dtrace_isenabled$postgresql$transaction__commit$v1(void);
+extern void __dtrace_probe$postgresql$transaction__start$v1$696e74(int);
+extern int __dtrace_isenabled$postgresql$transaction__start$v1(void);
+
+#ifdef	__cplusplus
+}
+#endif
+
+#endif	/* _PROBES_H */
diff -Nru postgresql-8.2.5/src/include/utils/probes.h postgresql-8.2.5-osxdtrace/src/include/utils/probes.h
--- postgresql-8.2.5/src/include/utils/probes.h	1970-01-01 01:00:00.000000000 +0100
+++ postgresql-8.2.5-osxdtrace/src/include/utils/probes.h	2007-10-26 08:00:38.000000000 +0100
@@ -0,0 +1,135 @@
+/*
+ * Generated by dtrace(1M).
+ */
+
+#ifndef	_PROBES_H
+#define	_PROBES_H
+
+#include <unistd.h>
+
+#ifdef	__cplusplus
+extern "C" {
+#endif
+
+#define POSTGRESQL_STABILITY "___dtrace_stability$postgresql$v1$1_1_0_1_1_0_1_1_0_1_1_0_1_1_0"
+
+#define POSTGRESQL_TYPEDEFS "___dtrace_typedefs$postgresql$v1"
+
+#define	POSTGRESQL_LOCK_ENDWAIT(arg0, arg1) \
+{ \
+	__asm__ volatile(".reference " POSTGRESQL_TYPEDEFS); \
+	__dtrace_probe$postgresql$lock__endwait$v1$696e74$696e74(arg0, arg1); \
+	__asm__ volatile(".reference " POSTGRESQL_STABILITY); \
+} 
+#define	POSTGRESQL_LOCK_ENDWAIT_ENABLED() \
+	__dtrace_isenabled$postgresql$lock__endwait$v1()
+#define	POSTGRESQL_LOCK_STARTWAIT(arg0, arg1) \
+{ \
+	__asm__ volatile(".reference " POSTGRESQL_TYPEDEFS); \
+	__dtrace_probe$postgresql$lock__startwait$v1$696e74$696e74(arg0, arg1); \
+	__asm__ volatile(".reference " POSTGRESQL_STABILITY); \
+} 
+#define	POSTGRESQL_LOCK_STARTWAIT_ENABLED() \
+	__dtrace_isenabled$postgresql$lock__startwait$v1()
+#define	POSTGRESQL_LWLOCK_ACQUIRE(arg0, arg1) \
+{ \
+	__asm__ volatile(".reference " POSTGRESQL_TYPEDEFS); \
+	__dtrace_probe$postgresql$lwlock__acquire$v1$696e74$696e74(arg0, arg1); \
+	__asm__ volatile(".reference " POSTGRESQL_STABILITY); \
+} 
+#define	POSTGRESQL_LWLOCK_ACQUIRE_ENABLED() \
+	__dtrace_isenabled$postgresql$lwlock__acquire$v1()
+#define	POSTGRESQL_LWLOCK_CONDACQUIRE(arg0, arg1) \
+{ \
+	__asm__ volatile(".reference " POSTGRESQL_TYPEDEFS); \
+	__dtrace_probe$postgresql$lwlock__condacquire$v1$696e74$696e74(arg0, arg1); \
+	__asm__ volatile(".reference " POSTGRESQL_STABILITY); \
+} 
+#define	POSTGRESQL_LWLOCK_CONDACQUIRE_ENABLED() \
+	__dtrace_isenabled$postgresql$lwlock__condacquire$v1()
+#define	POSTGRESQL_LWLOCK_CONDACQUIRE_FAIL(arg0, arg1) \
+{ \
+	__asm__ volatile(".reference " POSTGRESQL_TYPEDEFS); \
+	__dtrace_probe$postgresql$lwlock__condacquire__fail$v1$696e74$696e74(arg0, arg1); \
+	__asm__ volatile(".reference " POSTGRESQL_STABILITY); \
+} 
+#define	POSTGRESQL_LWLOCK_CONDACQUIRE_FAIL_ENABLED() \
+	__dtrace_isenabled$postgresql$lwlock__condacquire__fail$v1()
+#define	POSTGRESQL_LWLOCK_ENDWAIT(arg0, arg1) \
+{ \
+	__asm__ volatile(".reference " POSTGRESQL_TYPEDEFS); \
+	__dtrace_probe$postgresql$lwlock__endwait$v1$696e74$696e74(arg0, arg1); \
+	__asm__ volatile(".reference " POSTGRESQL_STABILITY); \
+} 
+#define	POSTGRESQL_LWLOCK_ENDWAIT_ENABLED() \
+	__dtrace_isenabled$postgresql$lwlock__endwait$v1()
+#define	POSTGRESQL_LWLOCK_RELEASE(arg0) \
+{ \
+	__asm__ volatile(".reference " POSTGRESQL_TYPEDEFS); \
+	__dtrace_probe$postgresql$lwlock__release$v1$696e74(arg0); \
+	__asm__ volatile(".reference " POSTGRESQL_STABILITY); \
+} 
+#define	POSTGRESQL_LWLOCK_RELEASE_ENABLED() \
+	__dtrace_isenabled$postgresql$lwlock__release$v1()
+#define	POSTGRESQL_LWLOCK_STARTWAIT(arg0, arg1) \
+{ \
+	__asm__ volatile(".reference " POSTGRESQL_TYPEDEFS); \
+	__dtrace_probe$postgresql$lwlock__startwait$v1$696e74$696e74(arg0, arg1); \
+	__asm__ volatile(".reference " POSTGRESQL_STABILITY); \
+} 
+#define	POSTGRESQL_LWLOCK_STARTWAIT_ENABLED() \
+	__dtrace_isenabled$postgresql$lwlock__startwait$v1()
+#define	POSTGRESQL_TRANSACTION_ABORT(arg0) \
+{ \
+	__asm__ volatile(".reference " POSTGRESQL_TYPEDEFS); \
+	__dtrace_probe$postgresql$transaction__abort$v1$696e74(arg0); \
+	__asm__ volatile(".reference " POSTGRESQL_STABILITY); \
+} 
+#define	POSTGRESQL_TRANSACTION_ABORT_ENABLED() \
+	__dtrace_isenabled$postgresql$transaction__abort$v1()
+#define	POSTGRESQL_TRANSACTION_COMMIT(arg0) \
+{ \
+	__asm__ volatile(".reference " POSTGRESQL_TYPEDEFS); \
+	__dtrace_probe$postgresql$transaction__commit$v1$696e74(arg0); \
+	__asm__ volatile(".reference " POSTGRESQL_STABILITY); \
+} 
+#define	POSTGRESQL_TRANSACTION_COMMIT_ENABLED() \
+	__dtrace_isenabled$postgresql$transaction__commit$v1()
+#define	POSTGRESQL_TRANSACTION_START(arg0) \
+{ \
+	__asm__ volatile(".reference " POSTGRESQL_TYPEDEFS); \
+	__dtrace_probe$postgresql$transaction__start$v1$696e74(arg0); \
+	__asm__ volatile(".reference " POSTGRESQL_STABILITY); \
+} 
+#define	POSTGRESQL_TRANSACTION_START_ENABLED() \
+	__dtrace_isenabled$postgresql$transaction__start$v1()
+
+
+extern void __dtrace_probe$postgresql$lock__endwait$v1$696e74$696e74(int, int);
+extern int __dtrace_isenabled$postgresql$lock__endwait$v1(void);
+extern void __dtrace_probe$postgresql$lock__startwait$v1$696e74$696e74(int, int);
+extern int __dtrace_isenabled$postgresql$lock__startwait$v1(void);
+extern void __dtrace_probe$postgresql$lwlock__acquire$v1$696e74$696e74(int, int);
+extern int __dtrace_isenabled$postgresql$lwlock__acquire$v1(void);
+extern void __dtrace_probe$postgresql$lwlock__condacquire$v1$696e74$696e74(int, int);
+extern int __dtrace_isenabled$postgresql$lwlock__condacquire$v1(void);
+extern void __dtrace_probe$postgresql$lwlock__condacquire__fail$v1$696e74$696e74(int, int);
+extern int __dtrace_isenabled$postgresql$lwlock__condacquire__fail$v1(void);
+extern void __dtrace_probe$postgresql$lwlock__endwait$v1$696e74$696e74(int, int);
+extern int __dtrace_isenabled$postgresql$lwlock__endwait$v1(void);
+extern void __dtrace_probe$postgresql$lwlock__release$v1$696e74(int);
+extern int __dtrace_isenabled$postgresql$lwlock__release$v1(void);
+extern void __dtrace_probe$postgresql$lwlock__startwait$v1$696e74$696e74(int, int);
+extern int __dtrace_isenabled$postgresql$lwlock__startwait$v1(void);
+extern void __dtrace_probe$postgresql$transaction__abort$v1$696e74(int);
+extern int __dtrace_isenabled$postgresql$transaction__abort$v1(void);
+extern void __dtrace_probe$postgresql$transaction__commit$v1$696e74(int);
+extern int __dtrace_isenabled$postgresql$transaction__commit$v1(void);
+extern void __dtrace_probe$postgresql$transaction__start$v1$696e74(int);
+extern int __dtrace_isenabled$postgresql$transaction__start$v1(void);
+
+#ifdef	__cplusplus
+}
+#endif
+
+#endif	/* _PROBES_H */
diff -Nru postgresql-8.2.5/src/interfaces/libpq/libpq.rc postgresql-8.2.5-osxdtrace/src/interfaces/libpq/libpq.rc
--- postgresql-8.2.5/src/interfaces/libpq/libpq.rc	2007-09-16 06:19:43.000000000 +0100
+++ postgresql-8.2.5-osxdtrace/src/interfaces/libpq/libpq.rc	2007-10-25 23:16:53.000000000 +0100
@@ -1,8 +1,8 @@
 #include <winver.h>
 
 VS_VERSION_INFO VERSIONINFO
- FILEVERSION 8,2,5,7259
- PRODUCTVERSION 8,2,5,7259
+ FILEVERSION 8,2,5,7298
+ PRODUCTVERSION 8,2,5,7298
  FILEFLAGSMASK 0x3fL
  FILEFLAGS 0
  FILEOS VOS__WINDOWS32
