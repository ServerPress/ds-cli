Index: src/lib/platform/COSXScreen.cpp
===================================================================
--- src/lib/platform/COSXScreen.cpp	(revision 1077)
+++ src/lib/platform/COSXScreen.cpp	(working copy)
@@ -1097,14 +1097,14 @@
 
 	// get the key and active modifiers
 	UInt32 virtualKey = CGEventGetIntegerValueField(event, kCGKeyboardEventKeycode);
-	CGEventFlags macMask = CGEventGetFlags(event);
+	CGEventFlags macMaskCarbon = m_keyState->mapModifiersToCarbon(CGEventGetFlags(event));
 	LOG((CLOG_DEBUG1 "event: Key event kind: %d, keycode=%d", eventKind, virtualKey));
 
 	// Special handling to track state of modifiers
 	if (eventKind == kCGEventFlagsChanged) {
 		// get old and new modifier state
 		KeyModifierMask oldMask = getActiveModifiers();
-		KeyModifierMask newMask = m_keyState->mapModifiersFromOSX(macMask);
+		KeyModifierMask newMask = m_keyState->mapModifiersFromOsxCarbon(macMaskCarbon);
 		m_keyState->handleModifierKeys(getEventTarget(), oldMask, newMask);
 
 		// if the current set of modifiers exactly matches a modifiers-only
@@ -1141,9 +1141,7 @@
 	// so we check for a key/modifier match in our hot key map.
 	if (!m_isOnScreen) {
 		HotKeyToIDMap::const_iterator i =
-			m_hotKeyToIDMap.find(CHotKeyItem(virtualKey, 
-											 m_keyState->mapModifiersToCarbon(macMask) 
-											 & 0xff00u));
+			m_hotKeyToIDMap.find(CHotKeyItem(virtualKey, macMaskCarbon & 0xff00u));
 		if (i != m_hotKeyToIDMap.end()) {
 			UInt32 id = i->second;
 	
Index: src/lib/platform/COSXKeyState.cpp
===================================================================
--- src/lib/platform/COSXKeyState.cpp	(revision 1077)
+++ src/lib/platform/COSXKeyState.cpp	(working copy)
@@ -155,7 +155,7 @@
 }
 
 KeyModifierMask
-COSXKeyState::mapModifiersFromOSX(UInt32 mask) const
+COSXKeyState::mapModifiersFromOsxCarbon(UInt32 mask) const
 {
 	LOG((CLOG_DEBUG1 "mask: %04x", mask));
 
@@ -336,7 +336,7 @@
 KeyModifierMask
 COSXKeyState::pollActiveModifiers() const
 {
-	return mapModifiersFromOSX(GetCurrentKeyModifiers());
+	return mapModifiersFromOsxCarbon(GetCurrentKeyModifiers());
 }
 
 SInt32
@@ -620,10 +620,10 @@
 			}
 
 			// now add a key entry for each key/required modifier pair.
-			item.m_sensitive = mapModifiersFromOSX(sensitive << 8);
+			item.m_sensitive = mapModifiersFromOsxCarbon(sensitive << 8);
 			for (std::set<UInt32>::iterator k = required.begin();
 											k != required.end(); ++k) {
-				item.m_required = mapModifiersFromOSX(*k << 8);
+				item.m_required = mapModifiersFromOsxCarbon(*k << 8);
 				keyMap.addKeyEntry(item);
 			}
 		}
Index: src/lib/platform/COSXKeyState.h
===================================================================
--- src/lib/platform/COSXKeyState.h	(revision 1077)
+++ src/lib/platform/COSXKeyState.h	(working copy)
@@ -62,7 +62,7 @@
 	Returns the synergy modifier mask corresponding to the OS X modifier
 	mask in \p mask.
 	*/
-	KeyModifierMask		mapModifiersFromOSX(UInt32 mask) const;
+	KeyModifierMask		mapModifiersFromOsxCarbon(UInt32 mask) const;
 
 	//! Convert CG flags-style modifier mask to old-style Carbon
 	/*!
