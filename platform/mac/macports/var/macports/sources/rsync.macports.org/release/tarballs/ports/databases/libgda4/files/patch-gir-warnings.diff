From 7bb17824d14376908a85564aabc12d4ad8e3214d Mon Sep 17 00:00:00 2001
From: Andrea Zagli <azagli@libero.it>
Date: Thu, 01 Aug 2013 16:19:04 +0000
Subject: Avoid warnings at GIR generation related to missing ':'

---
diff --git a/libgda/gda-batch.c b/libgda/gda-batch.c
index 3c26c79..2742082 100644
--- libgda/gda-batch.c.orig
+++ libgda/gda-batch.c
@@ -111,7 +111,7 @@ gda_batch_class_init (GdaBatchClass * klass)
 	parent_class = g_type_class_peek_parent (klass);
 
 	/**
-	 * GdaBatch::changed
+	 * GdaBatch::changed:
 	 * @batch: the #GdaBatch object
 	 * @changed_stmt: the statement which has been changed
 	 *
diff --git a/libgda/gda-column.c b/libgda/gda-column.c
index 51833f2..81825ab 100644
--- libgda/gda-column.c.orig
+++ libgda/gda-column.c
@@ -89,7 +89,7 @@ gda_column_class_init (GdaColumnClass *klass)
 	
 	/* signals */
 	/**
-	 * GdaColumn::name-changed
+	 * GdaColumn::name-changed:
 	 * @column: the #GdaColumn object
 	 * @old_name: the column's previous name
 	 *
@@ -105,7 +105,7 @@ gda_column_class_init (GdaColumnClass *klass)
 			      G_TYPE_NONE,
 			      1, G_TYPE_STRING);
 	/**
-	 * GdaColumn::g-type-changed
+	 * GdaColumn::g-type-changed:
 	 * @column: the #GdaColumn object
 	 * @old_type: the column's previous type
 	 * @new_type: the column's new type
diff --git a/libgda/gda-column.h b/libgda/gda-column.h
index 376de71..f05750b 100644
--- libgda/gda-column.h.orig
+++ libgda/gda-column.h
@@ -87,7 +87,7 @@ void            gda_column_set_attribute      (GdaColumn *column, const gchar *a
 					       GDestroyNotify destroy);
 
 /**
- * gda_column_set_attribute_static
+ * gda_column_set_attribute_static:
  * @holder: a #GdaHolder
  * @attribute: attribute's name
  * @value: (allow-none): the value to set the attribute to, or %NULL
diff --git a/libgda/gda-connection.c b/libgda/gda-connection.c
index 6d173c4..597da99 100644
--- libgda/gda-connection.c.orig
+++ libgda/gda-connection.c
@@ -240,7 +240,7 @@ gda_connection_class_init (GdaConnectionClass *klass)
 	parent_class = g_type_class_peek_parent (klass);
 
 	/**
-	 * GdaConnection::error
+	 * GdaConnection::error:
 	 * @cnc: the #GdaConnection
 	 * @event: a #GdaConnectionEvent object
 	 *
@@ -256,7 +256,7 @@ gda_connection_class_init (GdaConnectionClass *klass)
 			      g_cclosure_marshal_VOID__OBJECT,
 			      G_TYPE_NONE, 1, GDA_TYPE_CONNECTION_EVENT);
 	/**
-	 * GdaConnection::conn-opened
+	 * GdaConnection::conn-opened:
 	 * @cnc: the #GdaConnection
 	 *
 	 * Gets emitted when the connection has been opened to the database
@@ -270,7 +270,7 @@ gda_connection_class_init (GdaConnectionClass *klass)
                               _gda_marshal_VOID__VOID,
                               G_TYPE_NONE, 0);
 	/**
-	 * GdaConnection::conn-to-close
+	 * GdaConnection::conn-to-close:
 	 * @cnc: the #GdaConnection
 	 *
 	 * Gets emitted when the connection to the database is about to be closed
@@ -284,7 +284,7 @@ gda_connection_class_init (GdaConnectionClass *klass)
                               _gda_marshal_VOID__VOID,
                               G_TYPE_NONE, 0);
 	/**
-	 * GdaConnection::conn-closed
+	 * GdaConnection::conn-closed:
 	 * @cnc: the #GdaConnection
 	 *
 	 * Gets emitted when the connection to the database has been closed
@@ -298,7 +298,7 @@ gda_connection_class_init (GdaConnectionClass *klass)
                               _gda_marshal_VOID__VOID,
                               G_TYPE_NONE, 0);
 	/**
-	 * GdaConnection::dsn-changed
+	 * GdaConnection::dsn-changed:
 	 * @cnc: the #GdaConnection
 	 *
 	 * Gets emitted when the DSN used by @cnc has been changed
@@ -312,7 +312,7 @@ gda_connection_class_init (GdaConnectionClass *klass)
 			      g_cclosure_marshal_VOID__VOID,
 			      G_TYPE_NONE, 0);
 	/**
-	 * GdaConnection::transaction-status-changed
+	 * GdaConnection::transaction-status-changed:
 	 * @cnc: the #GdaConnection
 	 *
 	 * Gets emitted when the transaction status of @cnc has changed (a transaction has been 
@@ -1006,7 +1006,7 @@ cnc_task_free (CncTask *task)
 }
 
 /**
- * _gda_connection_get_internal_thread_provider
+ * _gda_connection_get_internal_thread_provider:
  */ 
 GdaServerProvider *
 _gda_connection_get_internal_thread_provider (void)
@@ -5650,7 +5650,7 @@ gda_connection_get_events (GdaConnection *cnc)
 }
 
 /**
- * gda_connection_value_to_sql_string
+ * gda_connection_value_to_sql_string:
  * @cnc: a #GdaConnection object.
  * @from: #GValue to convert from
  *
diff --git a/libgda/gda-connection.h b/libgda/gda-connection.h
index 8995982..cbe13fe 100644
--- libgda/gda-connection.h.orig
+++ libgda/gda-connection.h
@@ -159,7 +159,7 @@ typedef enum {
 
 
 /**
- * GdaConnectionFeature
+ * GdaConnectionFeature:
  * @GDA_CONNECTION_FEATURE_AGGREGATES: test for aggregates support
  * @GDA_CONNECTION_FEATURE_BLOBS: test for BLOBS (binary large objects) support
  * @GDA_CONNECTION_FEATURE_INDEXES: test for indexes support
@@ -207,7 +207,7 @@ typedef enum {
 
 
 /**
- * GdaConnectionSchema
+ * GdaConnectionSchema:
  *
  * Deprecated: 4.2: This was a leftover from the pre 4.0 area
  */
diff --git a/libgda/gda-data-model-iter.c b/libgda/gda-data-model-iter.c
index 8e28d39..8f312a0 100644
--- libgda/gda-data-model-iter.c.orig
+++ libgda/gda-data-model-iter.c
@@ -140,7 +140,7 @@ gda_data_model_iter_class_init (GdaDataModelIterClass *class)
 	parent_class = g_type_class_peek_parent (class);
 
 	/**
-	 * GdaDataModelIter::row-changed
+	 * GdaDataModelIter::row-changed:
 	 * @iter: the #GdaDataModelIter
 	 * @row: the new iter's row
 	 *
@@ -154,7 +154,7 @@ gda_data_model_iter_class_init (GdaDataModelIterClass *class)
                               NULL, NULL,
                               g_cclosure_marshal_VOID__INT, G_TYPE_NONE, 1, G_TYPE_INT);
 	/**
-	 * GdaDataModelIter::end-of-data
+	 * GdaDataModelIter::end-of-data:
 	 * @iter: the #GdaDataModelIter
 	 *
 	 * Gets emitted when @iter has reached the end of available data (which means the previous
diff --git a/libgda/gda-data-model.c b/libgda/gda-data-model.c
index c7e8413..ff247ad 100644
--- libgda/gda-data-model.c.orig
+++ libgda/gda-data-model.c
@@ -125,7 +125,7 @@ gda_data_model_class_init (G_GNUC_UNUSED gpointer g_class)
 	g_static_rec_mutex_lock (&init_mutex);
 	if (! initialized) {
 		/**
-		 * GdaDataModel::changed
+		 * GdaDataModel::changed:
 		 * @model: the #GdaDataModel
 		 *
 		 * Gets emitted when any value in @model has been changed
@@ -139,7 +139,7 @@ gda_data_model_class_init (G_GNUC_UNUSED gpointer g_class)
 				      g_cclosure_marshal_VOID__VOID,
 				      G_TYPE_NONE, 0);
 		/**
-		 * GdaDataModel::row-inserted
+		 * GdaDataModel::row-inserted:
 		 * @model: the #GdaDataModel
 		 * @row: the row number
 		 *
@@ -154,7 +154,7 @@ gda_data_model_class_init (G_GNUC_UNUSED gpointer g_class)
 				      g_cclosure_marshal_VOID__INT,
 				      G_TYPE_NONE, 1, G_TYPE_INT);
 		/**
-		 * GdaDataModel::row-updated
+		 * GdaDataModel::row-updated:
 		 * @model: the #GdaDataModel
 		 * @row: the row number
 		 *
@@ -169,7 +169,7 @@ gda_data_model_class_init (G_GNUC_UNUSED gpointer g_class)
 				      g_cclosure_marshal_VOID__INT,
 				      G_TYPE_NONE, 1, G_TYPE_INT);
 		/**
-		 * GdaDataModel::row-removed
+		 * GdaDataModel::row-removed:
 		 * @model: the #GdaDataModel
 		 * @row: the row number
 		 *
@@ -184,7 +184,7 @@ gda_data_model_class_init (G_GNUC_UNUSED gpointer g_class)
 				      g_cclosure_marshal_VOID__INT,
 				      G_TYPE_NONE, 1, G_TYPE_INT);
 		/**
-		 * GdaDataModel::reset
+		 * GdaDataModel::reset:
 		 * @model: the #GdaDataModel
 		 *
 		 * Gets emitted when @model's contents has been completely reset (the number and
@@ -200,7 +200,7 @@ gda_data_model_class_init (G_GNUC_UNUSED gpointer g_class)
 				      G_TYPE_NONE, 0);
 
 		/**
-		 * GdaDataModel::access-changed
+		 * GdaDataModel::access-changed:
 		 * @model: the #GdaDataModel
 		 *
 		 * Gets emitted when @model's access flags have changed. Use
diff --git a/libgda/gda-data-proxy.c b/libgda/gda-data-proxy.c
index f136ba1..1ff0968 100644
--- libgda/gda-data-proxy.c.orig
+++ libgda/gda-data-proxy.c
@@ -560,7 +560,7 @@ gda_data_proxy_class_init (GdaDataProxyClass *klass)
 
 	/* signals */
 	/**
-	 * GdaDataProxy::row-delete-changed
+	 * GdaDataProxy::row-delete-changed:
 	 * @proxy: the #GdaDataProxy
 	 * @row: the concerned @proxy's row
 	 * @to_be_deleted: tells if the @row is marked to be deleted
@@ -575,7 +575,7 @@ gda_data_proxy_class_init (GdaDataProxyClass *klass)
                               NULL, NULL,
 			      _gda_marshal_VOID__INT_BOOLEAN, G_TYPE_NONE, 2, G_TYPE_INT, G_TYPE_BOOLEAN);
 	/**
-	 * GdaDataProxy::sample-size-changed
+	 * GdaDataProxy::sample-size-changed:
 	 * @proxy: the #GdaDataProxy
 	 * @sample_size: the new sample size
 	 *
@@ -589,7 +589,7 @@ gda_data_proxy_class_init (GdaDataProxyClass *klass)
                               NULL, NULL,
 			      g_cclosure_marshal_VOID__INT, G_TYPE_NONE, 1, G_TYPE_INT);
 	/**
-	 * GdaDataProxy::sample-changed
+	 * GdaDataProxy::sample-changed:
 	 * @proxy: the #GdaDataProxy
 	 * @sample_start: the first row of the sample
 	 * @sample_end: the last row of the sample
@@ -605,7 +605,7 @@ gda_data_proxy_class_init (GdaDataProxyClass *klass)
                               NULL, NULL,
 			      _gda_marshal_VOID__INT_INT, G_TYPE_NONE, 2, G_TYPE_INT, G_TYPE_INT);
 	/**
-	 * GdaDataProxy::validate-row-changes
+	 * GdaDataProxy::validate-row-changes:
 	 * @proxy: the #GdaDataProxy
 	 * @row: the proxy's row
 	 * @proxied_row: the proxied data model's row
@@ -623,7 +623,7 @@ gda_data_proxy_class_init (GdaDataProxyClass *klass)
                               validate_row_changes_accumulator, NULL,
                               _gda_marshal_ERROR__INT_INT, GDA_TYPE_ERROR, 2, G_TYPE_INT, G_TYPE_INT);
 	/**
-	 * GdaDataProxy::row-changes-applied
+	 * GdaDataProxy::row-changes-applied:
 	 * @proxy: the #GdaDataProxy
 	 * @row: the proxy's row
 	 * @proxied_row: the proxied data model's row
@@ -638,7 +638,7 @@ gda_data_proxy_class_init (GdaDataProxyClass *klass)
                               NULL, NULL,
 			      _gda_marshal_VOID__INT_INT, G_TYPE_NONE, 2, G_TYPE_INT, G_TYPE_INT);
 	/**
-	 * GdaDataProxy::filter-changed
+	 * GdaDataProxy::filter-changed:
 	 * @proxy: the #GdaDataProxy
 	 *
 	 * Gets emitted when @proxy's filter has been changed
diff --git a/libgda/gda-data-select.c b/libgda/gda-data-select.c
index 40de52c..ed11eb8 100644
--- libgda/gda-data-select.c.orig
+++ libgda/gda-data-select.c
@@ -890,7 +890,7 @@ gda_data_select_get_connection (GdaDataSelect *model)
 }
 
 /**
- * gda_data_select_set_columns
+ * gda_data_select_set_columns:
  * @model: a #GdaDataSelect data model
  * @columns: (transfer full): a lis of #GdaColumn objects
  *
diff --git a/libgda/gda-holder.c b/libgda/gda-holder.c
index a10ffd8..910bf16 100644
--- libgda/gda-holder.c.orig
+++ libgda/gda-holder.c
@@ -208,7 +208,7 @@ gda_holder_class_init (GdaHolderClass *class)
 	parent_class = g_type_class_peek_parent (class);
 
 	/**
-	 * GdaHolder::source-changed
+	 * GdaHolder::source-changed:
 	 * @holder: the #GdaHolder
 	 * 
 	 * Gets emitted when the data model in which @holder's values should be has changed
@@ -221,7 +221,7 @@ gda_holder_class_init (GdaHolderClass *class)
                               NULL, NULL,
                               _gda_marshal_VOID__VOID, G_TYPE_NONE, 0);
 	/**
-	 * GdaHolder::changed
+	 * GdaHolder::changed:
 	 * @holder: the #GdaHolder
 	 * 
 	 * Gets emitted when @holder's value has changed
@@ -234,7 +234,7 @@ gda_holder_class_init (GdaHolderClass *class)
                               NULL, NULL,
                               _gda_marshal_VOID__VOID, G_TYPE_NONE, 0);
 	/**
-	 * GdaHolder::attribute-changed
+	 * GdaHolder::attribute-changed:
 	 * @holder: the #GdaHolder
 	 * @att_name: attribute's name
 	 * @att_value: attribute's value
@@ -251,7 +251,7 @@ gda_holder_class_init (GdaHolderClass *class)
 			      G_TYPE_STRING, G_TYPE_VALUE);
 
 	/**
-	 * GdaHolder::validate-change
+	 * GdaHolder::validate-change:
 	 * @holder: the object which received the signal
 	 * @new_value: the proposed new value for @holder
 	 * 
diff --git a/libgda/gda-holder.h b/libgda/gda-holder.h
index e1362a4..e609439 100644
--- libgda/gda-holder.h.orig
+++ libgda/gda-holder.h
@@ -76,7 +76,7 @@ GType               gda_holder_get_g_type              (GdaHolder *holder);
 const gchar        *gda_holder_get_id                  (GdaHolder *holder);
 
 /**
- * gda_holder_new_string
+ * gda_holder_new_string:
  * @id: a string
  * @str: a string
  * 
@@ -88,7 +88,7 @@ const gchar        *gda_holder_get_id                  (GdaHolder *holder);
 #define gda_holder_new_string(id,str) gda_holder_new_inline (G_TYPE_STRING, (id), (str))
 
 /**
- * gda_holder_new_boolean
+ * gda_holder_new_boolean:
  * @id: a string
  * @abool: a boolean value
  * 
@@ -100,7 +100,7 @@ const gchar        *gda_holder_get_id                  (GdaHolder *holder);
 #define gda_holder_new_boolean(id,abool) gda_holder_new_inline (G_TYPE_BOOLEAN, (id), (abool))
 
 /**
- * gda_holder_new_int
+ * gda_holder_new_int:
  * @id: a string
  * @anint: an int value
  * 
@@ -144,7 +144,7 @@ void                gda_holder_set_attribute            (GdaHolder *holder, cons
 							 GDestroyNotify destroy);
 
 /**
- * gda_holder_set_attribute_static
+ * gda_holder_set_attribute_static:
  * @holder: a #GdaHolder
  * @attribute: attribute's name
  * @value: (allow-none): a #GValue, or %NULL
diff --git a/libgda/gda-meta-store.c b/libgda/gda-meta-store.c
index d0ae89d..ef73125 100644
--- libgda/gda-meta-store.c.orig
+++ libgda/gda-meta-store.c
@@ -377,7 +377,7 @@ gda_meta_store_class_init (GdaMetaStoreClass *klass)
 	parent_class = g_type_class_peek_parent (klass);
 	
 	/**
-	 * GdaMetaStore::suggest-update
+	 * GdaMetaStore::suggest-update:
 	 * @store: the #GdaMetaStore instance that emitted the signal
 	 * @suggest: the suggested update, as a #GdaMetaContext structure
 	 *
@@ -397,7 +397,7 @@ gda_meta_store_class_init (GdaMetaStoreClass *klass)
 		_gda_marshal_ERROR__METACONTEXT, GDA_TYPE_ERROR,
 		1, G_TYPE_POINTER);
 	/**
-	 * GdaMetaStore::meta-changed
+	 * GdaMetaStore::meta-changed:
 	 * @store: the #GdaMetaStore instance that emitted the signal
 	 * @changes: (element-type Gda.MetaStoreChange): a list of changes made, as a #GSList of pointers to #GdaMetaStoreChange (which must not be modified)
 	 *
@@ -412,7 +412,7 @@ gda_meta_store_class_init (GdaMetaStoreClass *klass)
 		_gda_marshal_VOID__SLIST, G_TYPE_NONE,
 		1, GDA_TYPE_SLIST);
 	/**
-	 * GdaMetaStore::meta-reset
+	 * GdaMetaStore::meta-reset:
 	 * @store: the #GdaMetaStore instance that emitted the signal
 	 *
 	 * This signal is emitted when the @store's contents have been reset completely and when
diff --git a/libgda/gda-meta-struct.h b/libgda/gda-meta-struct.h
index 23b97ef..579f91c 100644
--- libgda/gda-meta-struct.h.orig
+++ libgda/gda-meta-struct.h
@@ -282,7 +282,7 @@ const GValue *gda_meta_table_column_get_attribute (GdaMetaTableColumn *tcol, con
 void          gda_meta_table_column_set_attribute (GdaMetaTableColumn *tcol, const gchar *attribute, const GValue *value,
 						   GDestroyNotify destroy);
 /**
- * gda_meta_table_column_set_attribute_static
+ * gda_meta_table_column_set_attribute_static:
  * @column: a #GdaMetaTableColumn
  * @attribute: attribute's name
  * @value: (allow-none): a #GValue, or %NULL
@@ -355,7 +355,7 @@ typedef struct {
 	gchar            *fk_name;
 } GdaMetaTableForeignKey;
 /**
- * GDA_META_TABLE_FOREIGN_KEY
+ * GDA_META_TABLE_FOREIGN_KEY:
  * @fk: a pointer
  *
  * Casts @fk to a #GdaMetaTableForeignKey (no check is actuelly being done on @fk's validity)
@@ -385,7 +385,7 @@ typedef struct {
 #define GDA_META_TABLE_FOREIGN_KEY_ON_DELETE_POLICY(fk) ((GdaMetaForeignKeyPolicy) GPOINTER_TO_INT ((GdaMetaTableForeignKey*)(fk)->on_delete_policy))
 
 /**
- * GDA_META_TABLE_FOREIGN_KEY_IS_DECLARED
+ * GDA_META_TABLE_FOREIGN_KEY_IS_DECLARED:
  * @fk: a pointer to a #GdaMetaTableForeignKey
  *
  * Tells if @fk is an actual foreign key defined in the database's schema, or if it is an indication which
diff --git a/libgda/gda-quark-list.c b/libgda/gda-quark-list.c
index 5b56e08..451e87a 100644
--- libgda/gda-quark-list.c.orig
+++ libgda/gda-quark-list.c
@@ -137,7 +137,7 @@ gda_quark_list_free (GdaQuarkList *qlist)
 
 
 /**
- * gda_quark_list_copy
+ * gda_quark_list_copy:
  * @qlist: quark_list to get a copy from.
  *
  * Creates a new #GdaQuarkList from an existing one.
@@ -159,7 +159,7 @@ gda_quark_list_copy (GdaQuarkList *qlist)
 }
 
 /**
- * gda_quark_list_add_from_string
+ * gda_quark_list_add_from_string:
  * @qlist: a #GdaQuarkList.
  * @string: a string.
  * @cleanup: whether to cleanup the previous content or not.
@@ -228,7 +228,7 @@ gda_quark_list_add_from_string (GdaQuarkList *qlist, const gchar *string, gboole
 }
 
 /**
- * gda_quark_list_find
+ * gda_quark_list_find:
  * @qlist: a #GdaQuarkList.
  * @name: the name of the value to search for.
  *
@@ -250,7 +250,7 @@ gda_quark_list_find (GdaQuarkList *qlist, const gchar *name)
 }
 
 /**
- * gda_quark_list_remove
+ * gda_quark_list_remove:
  * @qlist: a #GdaQuarkList structure.
  * @name: an entry name.
  *
diff --git a/libgda/gda-server-operation.c b/libgda/gda-server-operation.c
index a9af605..830443d 100644
--- libgda/gda-server-operation.c.orig
+++ libgda/gda-server-operation.c
@@ -146,7 +146,7 @@ gda_server_operation_class_init (GdaServerOperationClass *klass)
 
 	/* signals */
 	/**
-	 * GdaServerOperation::sequence-item-added
+	 * GdaServerOperation::sequence-item-added:
 	 * @op: the #GdaServerOperation
 	 * @seq_path: the path to the new sequence item
 	 * @item_index: the index (starting from 0) of the new sequence item in the sequence
@@ -162,7 +162,7 @@ gda_server_operation_class_init (GdaServerOperationClass *klass)
 			      _gda_marshal_VOID__STRING_INT, G_TYPE_NONE,
 			      2, G_TYPE_STRING, G_TYPE_INT);
 	/**
-	 * GdaServerOperation::sequence-item-remove
+	 * GdaServerOperation::sequence-item-remove:
 	 * @op: the #GdaServerOperation
 	 * @seq_path: the path to the sequence item to be removed
 	 * @item_index: the index (starting from 0) of the sequence item in the sequence
diff --git a/libgda/gda-set.c b/libgda/gda-set.c
index d7b3b28..1802757 100644
--- libgda/gda-set.c.orig
+++ libgda/gda-set.c
@@ -275,7 +275,7 @@ gda_set_class_init (GdaSetClass *class)
 			      GDA_TYPE_HOLDER);
 
 	/**
-	 * GdaSet::validate-holder-change
+	 * GdaSet::validate-holder-change:
 	 * @set: the #GdaSet
 	 * @holder: the #GdaHolder which is going to change
 	 * @new_value: the proposed new value for @holder
@@ -295,7 +295,7 @@ gda_set_class_init (GdaSetClass *class)
 			      _gda_marshal_ERROR__OBJECT_VALUE, GDA_TYPE_ERROR, 2,
 			      GDA_TYPE_HOLDER, G_TYPE_VALUE);
 	/**
-	 * GdaSet::validate-set
+	 * GdaSet::validate-set:
 	 * @set: the #GdaSet
 	 * 
 	 * Gets emitted when gda_set_is_valid() is called, use
@@ -312,7 +312,7 @@ gda_set_class_init (GdaSetClass *class)
 			      validate_accumulator, NULL,
 			      _gda_marshal_ERROR__VOID, GDA_TYPE_ERROR, 0);
 	/**
-	 * GdaSet::holder-attr-changed
+	 * GdaSet::holder-attr-changed:
 	 * @set: the #GdaSet
 	 * @holder: the GdaHolder for which an attribute changed
 	 * @attr_name: attribute's name
@@ -329,7 +329,7 @@ gda_set_class_init (GdaSetClass *class)
 			      _gda_marshal_VOID__OBJECT_STRING_VALUE, G_TYPE_NONE, 3,
 			      GDA_TYPE_HOLDER, G_TYPE_STRING, G_TYPE_VALUE);
 	/**
-	 * GdaSet::public-data-changed
+	 * GdaSet::public-data-changed:
 	 * @set: the #GdaSet
 	 * 
 	 * Gets emitted when @set's public data (#GdaSetNode, #GdaSetGroup or #GdaSetSource values) have changed
@@ -343,7 +343,7 @@ gda_set_class_init (GdaSetClass *class)
 			      _gda_marshal_VOID__VOID, G_TYPE_NONE, 0);
 
 	/**
-	 * GdaSet::holder-type-set
+	 * GdaSet::holder-type-set:
 	 * @set: the #GdaSet
 	 * @holder: the #GdaHolder for which the #GType has been set
 	 *
@@ -362,7 +362,7 @@ gda_set_class_init (GdaSetClass *class)
 			      GDA_TYPE_HOLDER);
 
 	/**
-	 * GdaSet::source-model-changed
+	 * GdaSet::source-model-changed:
 	 * @set: the #GdaSet
 	 * @source: the #GdaSetSource for which the @data_model attribute has changed
 	 *
@@ -1651,7 +1651,7 @@ gda_set_get_source_for_model (GdaSet *set, GdaDataModel *model)
 }
 
 /**
- * gda_set_replace_source_model
+ * gda_set_replace_source_model:
  * @set: a #GdaSet object
  * @source: a pointer to a #GdaSetSource in @set
  * @model: a #GdaDataModel
diff --git a/libgda/gda-statement.c b/libgda/gda-statement.c
index e110628..0308a6d 100644
--- libgda/gda-statement.c.orig
+++ libgda/gda-statement.c
@@ -131,7 +131,7 @@ gda_statement_class_init (GdaStatementClass * klass)
 	parent_class = g_type_class_peek_parent (klass);
 
 	/**
-	 * GdaStatement::reset
+	 * GdaStatement::reset:
 	 * @stmt: the #GdaStatement object
 	 *
 	 * Gets emitted whenever the @stmt has changed
@@ -145,7 +145,7 @@ gda_statement_class_init (GdaStatementClass * klass)
 			      g_cclosure_marshal_VOID__VOID, G_TYPE_NONE,
 			      0);
 	/**
-	 * GdaStatement::checked
+	 * GdaStatement::checked:
 	 * @stmt: the #GdaStatement object
 	 *
 	 * Gets emitted whenever the structure and contents
diff --git a/libgda/gda-tree-manager.h b/libgda/gda-tree-manager.h
index 835ef11..27c924e 100644
--- libgda/gda-tree-manager.h.orig
+++ libgda/gda-tree-manager.h
@@ -56,7 +56,7 @@ struct _GdaTreeManagerClass {
 
 	/* virtual methods */
 	/**
-	 * update_children
+	 * update_children:
 	 *
 	 * Returns: NULL if an error occurred, and @out_error is set to TRUE
 	 */
diff --git a/libgda/gda-tree-node.c b/libgda/gda-tree-node.c
index 29f6365..9ec4d8c 100644
--- libgda/gda-tree-node.c.orig
+++ libgda/gda-tree-node.c
@@ -97,7 +97,7 @@ gda_tree_node_class_init (GdaTreeNodeClass *klass)
 
 	/* signals */
 	/**
-	 * GdaTreeNode::node-changed
+	 * GdaTreeNode::node-changed:
 	 * @reporting: the #GdaTreeNode which emits the signal (may be a parent of @node, or @node itself)
 	 * @node: the #GdaTreeNode which has changed
 	 *
@@ -114,7 +114,7 @@ gda_tree_node_class_init (GdaTreeNodeClass *klass)
 			      g_cclosure_marshal_VOID__OBJECT,
 			      G_TYPE_NONE, 1, GDA_TYPE_TREE_NODE);
 	/**
-	 * GdaTreeNode::node-inserted
+	 * GdaTreeNode::node-inserted:
 	 * @reporting: the #GdaTreeNode which emits the signal (may be a parent of @node, or @node itself)
 	 * @node: the #GdaTreeNode which has been inserted
 	 *
@@ -131,7 +131,7 @@ gda_tree_node_class_init (GdaTreeNodeClass *klass)
 			      g_cclosure_marshal_VOID__OBJECT,
 			      G_TYPE_NONE, 1, GDA_TYPE_TREE_NODE);
 	/**
-	 * GdaTreeNode::node-has-child-toggled
+	 * GdaTreeNode::node-has-child-toggled:
 	 * @reporting: the #GdaTreeNode which emits the signal (may be a parent of @node, or @node itself)
 	 * @node: the #GdaTreeNode which changed from having children to being a
 	 *        leaf or the other way around
@@ -150,7 +150,7 @@ gda_tree_node_class_init (GdaTreeNodeClass *klass)
 			      g_cclosure_marshal_VOID__OBJECT,
 			      G_TYPE_NONE, 1, GDA_TYPE_TREE_NODE);
 	/**
-	 * GdaTreeNode::node-deleted
+	 * GdaTreeNode::node-deleted:
 	 * @reporting: the #GdaTreeNode which emits the signal (a parent of the removed node)
 	 * @relative_path: the path the node held, relative to @reporting
 	 *
diff --git a/libgda/gda-tree.c b/libgda/gda-tree.c
index afced42..c9ec43a 100644
--- libgda/gda-tree.c.orig
+++ libgda/gda-tree.c
@@ -86,7 +86,7 @@ gda_tree_class_init (GdaTreeClass *klass)
 
 	/* signals */
 	/**
-	 * GdaTree::node-changed
+	 * GdaTree::node-changed:
 	 * @tree: the #GdaTree
 	 * @node: the #GdaTreeNode which has changed
 	 *
@@ -103,7 +103,7 @@ gda_tree_class_init (GdaTreeClass *klass)
 			      g_cclosure_marshal_VOID__OBJECT,
 			      G_TYPE_NONE, 1, GDA_TYPE_TREE_NODE);
 	/**
-	 * GdaTree::node-inserted
+	 * GdaTree::node-inserted:
 	 * @tree: the #GdaTree
 	 * @node: the #GdaTreeNode which has inserted
 	 *
@@ -120,7 +120,7 @@ gda_tree_class_init (GdaTreeClass *klass)
 			      g_cclosure_marshal_VOID__OBJECT,
 			      G_TYPE_NONE, 1, GDA_TYPE_TREE_NODE);
 	/**
-	 * GdaTree::node-has-child-toggled
+	 * GdaTree::node-has-child-toggled:
 	 * @tree: the #GdaTree
 	 * @node: the #GdaTreeNode which changed from having children to being a
 	 *        leaf or the other way around
@@ -139,7 +139,7 @@ gda_tree_class_init (GdaTreeClass *klass)
 			      g_cclosure_marshal_VOID__OBJECT,
 			      G_TYPE_NONE, 1, GDA_TYPE_TREE_NODE);
 	/**
-	 * GdaTree::node-deleted
+	 * GdaTree::node-deleted:
 	 * @tree: the #GdaTree
 	 * @node_path: the position the node held in @tree as a tree path
 	 *
@@ -749,7 +749,7 @@ static GSList *split_absolute_path (const gchar *path, gboolean *out_error);
 static GSList *split_indexed_path (const gchar *path, gboolean *out_error);
 
 /**
- * decompose_path_as_segments
+ * decompose_path_as_segments:
  * @path: a path using '/'
  * @use_names: 
  *
diff --git a/libgda/gda-value.c b/libgda/gda-value.c
index 9774ed9..65496c4 100644
--- libgda/gda-value.c.orig
+++ libgda/gda-value.c
@@ -1745,7 +1745,7 @@ gda_value_set_null (GValue *value)
 }
 
 /**
- * gda_value_get_numeric
+ * gda_value_get_numeric:
  * @value: a #GValue whose value we want to get.
  *
  * Returns: (transfer none): the value stored in @value.
diff --git a/libgda/gda-value.h b/libgda/gda-value.h
index f722f2e..6814b28 100644
--- libgda/gda-value.h.orig
+++ libgda/gda-value.h
@@ -102,7 +102,7 @@ typedef struct {
 } GdaBinary;
 
 /**
- * GdaBlob
+ * GdaBlob:
  * @data: data buffer, as a #GdaBinary
  * @op: (allow-none): a pointer to a #GdaBlopOp, or %NULL
  *
diff --git a/libgda/providers-support/gda-pstmt.c b/libgda/providers-support/gda-pstmt.c
index cf1c3ba..5044989 100644
--- libgda/providers-support/gda-pstmt.c.orig
+++ libgda/providers-support/gda-pstmt.c
@@ -36,7 +36,7 @@ struct _GdaPStmtPrivate {
 };
 
 /**
- * gda_pstmt_get_type
+ * gda_pstmt_get_type:
  *
  * Returns: the #GType of GdaPStmt.
  */
@@ -144,7 +144,7 @@ gda_pstmt_finalize (GObject *object)
 }
 
 /**
- * gda_pstmt_set_gda_statement
+ * gda_pstmt_set_gda_statement:
  * @pstmt: a #GdaPStmt object
  * @stmt: a #GdaStatement object
  *
@@ -169,7 +169,7 @@ gda_pstmt_set_gda_statement (GdaPStmt *pstmt, GdaStatement *stmt)
 }
 
 /**
- * gda_pstmt_copy_contents
+ * gda_pstmt_copy_contents:
  * @src: a #GdaPStmt object
  * @dest: a #GdaPStmt object
  *
diff --git a/libgda/thread-wrapper/gda-thread-wrapper.c b/libgda/thread-wrapper/gda-thread-wrapper.c
index 243e0e2..b8fc958 100644
--- libgda/thread-wrapper/gda-thread-wrapper.c.orig
+++ libgda/thread-wrapper/gda-thread-wrapper.c
@@ -676,7 +676,7 @@ GQuark gda_thread_wrapper_error_quark (void)
 }
 
 /**
- * gda_thread_wrapper_get_type
+ * gda_thread_wrapper_get_type:
  * 
  * Registers the #GdaThreadWrapper class on the GLib type system.
  * 
@@ -747,7 +747,7 @@ gda_thread_wrapper_get_property (GObject *object,
 }
 
 /**
- * gda_thread_wrapper_new
+ * gda_thread_wrapper_new:
  *
  * Creates a new #GdaThreadWrapper object
  *
@@ -1012,7 +1012,7 @@ gda_thread_wrapper_execute_void (GdaThreadWrapper *wrapper, GdaThreadWrapperVoid
 }
 
 /**
- * gda_thread_wrapper_cancel
+ * gda_thread_wrapper_cancel:
  * @wrapper: a #GdaThreadWrapper object
  * @id: the ID of a job as returned by gda_thread_wrapper_execute() or gda_thread_wrapper_execute_void()
  * 
@@ -1071,7 +1071,7 @@ gda_thread_wrapper_cancel (GdaThreadWrapper *wrapper, guint id)
 }
 
 /**
- * gda_thread_wrapper_iterate
+ * gda_thread_wrapper_iterate:
  * @wrapper: a #GdaThreadWrapper object
  * @may_block: whether the call may block
  *
@@ -1241,7 +1241,7 @@ gda_thread_wrapper_fetch_result (GdaThreadWrapper *wrapper, gboolean may_lock, g
 }
 
 /**
- * gda_thread_wrapper_get_waiting_size
+ * gda_thread_wrapper_get_waiting_size:
  * @wrapper: a #GdaThreadWrapper object
  *
  * Use this method to query the number of functions which have been queued to be executed
@@ -1499,7 +1499,7 @@ find_signal_r_func (G_GNUC_UNUSED GThread *thread, ThreadData *td, gulong *id)
 }
 
 /**
- * gda_thread_wrapper_disconnect
+ * gda_thread_wrapper_disconnect:
  * @wrapper: a #GdaThreadWrapper object
  * @id: a handler ID, as returned by gda_thread_wrapper_connect_raw()
  *
@@ -1574,7 +1574,7 @@ gda_thread_wrapper_disconnect (GdaThreadWrapper *wrapper, gulong id)
 }
 
 /**
- * gda_thread_wrapper_steal_signal
+ * gda_thread_wrapper_steal_signal:
  * @wrapper: a #GdaThreadWrapper object
  * @id: a signal ID
  *
--
cgit v0.9.2
