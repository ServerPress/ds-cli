--- printline.c.orig	2012-10-01 00:08:42.000000000 -0400
+++ printline.c	2012-09-30 23:52:16.000000000 -0400
@@ -7,6 +7,7 @@
 
 #include "jgraph.h"
 #include <stdio.h>
+#include <string.h>
 
 #define LINEWIDTHFACTOR 0.700
 #define MAX(a, b) ((a > b) ? (a) : (b))
@@ -23,7 +24,7 @@ static Fontlist Jgraph_fonts;
 static int Jgraph_gsave_level = -100;
 static int Jgraph_comment;
 
-gsave()
+void gsave()
 {
   if (Jgraph_gsave_level == -100) {
     Jgraph_gsave_level = 0;
@@ -33,7 +34,7 @@ gsave()
   printf(" gsave ");
 }
 
-grestore()
+void grestore()
 {
   Fontlist l;
 
@@ -48,9 +49,7 @@ grestore()
   printf(" grestore ");
 }
 
-setfont(f, s)
-char *f;
-float s;
+void setfont(char *f, float s)
 {
   Fontlist l;
   int ins;
@@ -75,10 +74,7 @@ float s;
   }
 }
   
-setfill( x, y, t, f, p, a)
-char t, p ;
-float x, y;
-float f[], a ;
+void setfill(float x, float y, char t, float *f, char p, float a)
 {
 /*   fprintf(stderr, "Hello?  %c %f %c %f\n", t, f[0], p, a); */
   if (t == 'g' && f[0] < 0.0) return;
@@ -100,9 +96,7 @@ float f[], a ;
   printf(" grestore\n");
 }
 
-setgray( t, f)
-char t ;
-float f[] ;
+void setgray(char t, float *f)
 {
     if ( t == 'g' )  {
        if( f[0] >= 0.0 ) printf("%f setgray\n", f[0] );
@@ -111,9 +105,7 @@ float f[] ;
     }
 }
 
-printline(x1, y1,x2, y2, orientation)
-float x1, y1, x2, y2;
-char orientation;
+void printline(float x1, float y1, float x2, float y2, char orientation)
 {
   if (orientation == 'x') 
     printf("newpath %f %f moveto %f %f lineto stroke\n", x1, y1, x2, y2);
@@ -122,30 +114,25 @@ char orientation;
   fflush(stdout);
 } 
 
-print_ebar(x1, y1, x2, ms, orientation)
-float x1, y1, x2, ms;
-char orientation;
+void print_ebar(float x1, float y1, float x2, float ms, char orientation)
 {
   printline(x1, y1, x2, y1, orientation);
   printline(x2, y1-ms, x2, y1+ms, orientation);
 }
 
-start_line(x1, y1, c)
-float x1, y1;
-Curve c;
+void start_line(float x1, float y1, Curve c)
 {
   setlinewidth(c->linethick);
   setlinestyle(c->linetype, c->gen_linetype);
   printf("%f %f moveto ", x1, y1);
 }
 
-cont_line(x1, y1)
-float x1, y1;
+void cont_line(float x1, float y1)
 {
   printf("  %f %f lineto\n", x1, y1);
 }
 
-end_line()
+void end_line()
 {
   printf("stroke\n");
   setlinewidth(1.0);
@@ -154,35 +141,28 @@ end_line()
 
 }
 
-bezier_control(x1, y1)
-float x1, y1;
+void bezier_control(float x1, float y1)
 {
   printf("  %f %f ", x1, y1);
 }
 
-bezier_end(x1, y1)
-float x1, y1;
+void bezier_end(float x1, float y1)
 {
   printf("  %f %f curveto\n", x1, y1);
 }
 
 
-start_poly(x1, y1)
-float x1, y1;
+void start_poly(float x1, float y1)
 {
   printf(" newpath %f %f moveto", x1, y1);
 }
 
-cont_poly(x1, y1)
-float x1, y1;
+void cont_poly(float x1, float y1)
 {
   printf("  %f %f lineto\n", x1, y1);
 }
 
-end_poly(x, y, ftype, fill, pattern, parg)
-float x, y;
-char  ftype, pattern ;
-float fill[], parg;
+void end_poly(float x, float y, char ftype, float *fill, char pattern, float parg)
 {
   printf("closepath ");
   setfill( x, y, ftype, fill, pattern, parg );
@@ -192,9 +172,7 @@ float fill[], parg;
 
 /* Ellipse at 0, 0 -- assumes that you've already translated to x, y */
 
-printellipse(x, y, radius1, radius2, ftype, fill, pattern, parg)
-char ftype, pattern;
-float x, y, radius1, radius2, fill[], parg;
+void printellipse(float x, float y, float radius1, float radius2, char ftype, float *fill, char pattern, float parg)
 {
   printf("newpath %f %f JDE\n", radius1, radius2);
   setfill( x, y, ftype, fill, pattern, parg );
@@ -202,28 +180,25 @@ float x, y, radius1, radius2, fill[], pa
   fflush(stdout);
 }
 
-set_comment(c)
-int c;
+void set_comment(int c)
 {
   Jgraph_comment = c;
 }
 
-comment(s)
-char *s;
+void comment(const char *s)
 {
   if (Jgraph_comment) printf("%% %s\n", s);
 }
 
-printline_c(x1, y1, x2, y2, g)
-float x1, y1, x2, y2;
-Graph g;
+#if 0
+static void printline_c(float x1, float y1, float x2, float y2, Graph g)
 {
   printline(ctop(x1, g->x_axis), ctop(y1, g->y_axis),
             ctop(x2, g->x_axis), ctop(y2, g->y_axis), 'x');
 }
+#endif
 
-print_label(l)
-Label l;
+void print_label(Label l)
 {
   int f, i, nlines;
   float fnl;
@@ -290,15 +265,12 @@ Label l;
   printf("grestore\n");
 }
 
-setlinewidth(size)
-float size;
+void setlinewidth(float size)
 {
   printf("%f setlinewidth ", size * LINEWIDTHFACTOR);
 }
 
-setlinestyle(style, glist)
-char style;
-Flist glist;
+void setlinestyle(char style, Flist glist)
 {
   Flist fl;
 
