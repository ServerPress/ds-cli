--- platform/dss/src/msl_msgContainer.cc.orig	2008-06-26 23:39:31.000000000 +1000
+++ platform/dss/src/msl_msgContainer.cc	2010-12-03 16:07:26.000000000 +1100
@@ -118,8 +118,8 @@ namespace _msl_internal{ //Start namespa
     pos = sprintf(buf, "MSGCONTAINER: nof:%d cur:%d DATA:",
 		  a_nof_fields, a_current);
     for (int i = 0; i < a_nof_fields; i++) {
-      pos += sprintf((buf+pos),"%d|%x ", a_fields[i].a_ft,
-		     reinterpret_cast<int>(a_fields[i].a_arg));
+      pos += sprintf((buf+pos),"%d|%lx ", a_fields[i].a_ft,
+		     reinterpret_cast<long>(a_fields[i].a_arg));
     }
     return buf;
   }
@@ -288,7 +288,7 @@ namespace _msl_internal{ //Start namespa
       switch (a_fields[a_current].a_ft) {
       case FT_NUMBER:
 	if (bb->canWrite(1+sz_MNumberMax)) {
-	  int i = reinterpret_cast<int>(m_popVal());
+	  long i = reinterpret_cast<long>(m_popVal());
 	  dssLog(DLL_DEBUG,"MSGCONTAINER  (%p): serilize INT %d", this, i);
 	  bb->m_putByte(TYPE_INT);
 	  bb->m_putInt(i);
@@ -407,7 +407,7 @@ namespace _msl_internal{ //Start namespa
   int 
   MsgCnt::popIntVal(){
     Assert(checkCounters() && m_getFT() == FT_NUMBER);
-    return reinterpret_cast<int>(m_popVal());
+    return reinterpret_cast<long>(m_popVal());
   }
 
   ExtDataContainerInterface* 
@@ -495,7 +495,7 @@ namespace _msl_internal{ //Start namespa
 
   int MsgCnt::peekMslMessageType() {
     Assert(a_fields[0].a_ft == FT_NUMBER);
-    return reinterpret_cast<int>(a_fields[0].a_arg);
+    return reinterpret_cast<long>(a_fields[0].a_arg);
   }
 
   MsgContainer* MsgCnt::reincarnate() {
--- platform/dss/src/referenceConsistency.cc.orig	2008-06-26 23:39:31.000000000 +1000
+++ platform/dss/src/referenceConsistency.cc	2010-12-03 16:22:34.000000000 +1100
@@ -264,7 +264,7 @@ namespace _dss_internal{ //Start namespa
     case RC_OP_SET_WRC_ALPHA: 
       if (alg == RC_ALG_WRC){
 	tmp = m_findAlg(RC_ALG_WRC);
-	if (tmp && static_cast<WRC_Home*>(tmp)->setAlpha(reinterpret_cast<int>(data)))
+	if (tmp && static_cast<WRC_Home*>(tmp)->setAlpha(reinterpret_cast<long>(data)))
 	  return true;
       }
       break;
@@ -280,7 +280,7 @@ namespace _dss_internal{ //Start namespa
     case RC_OP_SET_TL_LEASE_PERIOD:
       if (alg == RC_ALG_TL){
 	tmp = m_findAlg(RC_ALG_TL);
-	if (tmp && static_cast<TL_Home*>(tmp)->setLeasePeriod(reinterpret_cast<int>(data)))
+	if (tmp && static_cast<TL_Home*>(tmp)->setLeasePeriod(reinterpret_cast<long>(data)))
 	  return true;
       }
       break;
@@ -394,7 +394,7 @@ namespace _dss_internal{ //Start namespa
     case RC_OP_SET_WRC_ALPHA: 
       if (alg == RC_ALG_WRC){
 	tmp = m_findAlg(RC_ALG_WRC);
-	if (tmp && static_cast<WRC_Remote*>(tmp)->setAlpha(reinterpret_cast<int>(data)))
+	if (tmp && static_cast<WRC_Remote*>(tmp)->setAlpha(reinterpret_cast<long>(data)))
 	  return true;
       }
       break;
@@ -410,7 +410,7 @@ namespace _dss_internal{ //Start namespa
     case RC_OP_SET_TL_UPDATE_PERIOD:
       if (alg == RC_ALG_TL){
 	tmp = m_findAlg(RC_ALG_TL);
-	if (tmp && static_cast<TL_Remote*>(tmp)->setUpdatePeriod(reinterpret_cast<int>(data)))
+	if (tmp && static_cast<TL_Remote*>(tmp)->setUpdatePeriod(reinterpret_cast<long>(data)))
 	  return true;
       }
       break;
--- platform/dss/src/dss_msgLayerInterface.cc.orig	2008-06-26 23:39:31.000000000 +1000
+++ platform/dss/src/dss_msgLayerInterface.cc	2010-12-03 16:16:05.000000000 +1100
@@ -563,10 +563,10 @@ namespace _dss_internal{
     if (a_cur == NULL){
       a_cur = buf->a_vec; 
       gf_MarshalNumber(bb, buf->a_end-buf->a_vec);
-      printf("marshaling, RCB totSize %d\n", buf->a_end-buf->a_vec); 
+      printf("marshaling, RCB totSize %d\n", (int)(buf->a_end-buf->a_vec)); 
     }
     
-    int marshalSize =  t_min(bb->availableSpace() - 40, buf->a_end- a_cur);
+    int marshalSize =  t_min(bb->availableSpace() - 40, (int)(buf->a_end- a_cur));
     printf("marshaling, RCB blockSize %d\n", marshalSize); 
     gf_MarshalNumber(bb, marshalSize); 
     bb->writeToBuffer(a_cur, marshalSize); 
@@ -612,10 +612,10 @@ namespace _dss_internal{
     if (a_cur == NULL){
       a_cur = a_buffer->a_vec; 
       gf_MarshalNumber(bb, a_buffer->a_end - a_buffer->a_vec);
-      printf("marshaling, EBA totSize %d\n", a_buffer->a_end - a_buffer->a_vec); 
+      printf("marshaling, EBA totSize %d\n", (int)(a_buffer->a_end - a_buffer->a_vec));
     }
     
-    int marshalSize =  t_max(0, t_min(bb->availableSpace() - 40, a_buffer->a_end- a_cur));
+    int marshalSize =  t_max(0, t_min(bb->availableSpace() - 40, (int)(a_buffer->a_end- a_cur)));
     printf("marshaling, EBC blockSize %d\n", marshalSize); 
     gf_MarshalNumber(bb, marshalSize); 
     bb->writeToBuffer(a_cur, marshalSize); 
--- platform/dss/src/dss_psDKS.cc.orig	2008-06-26 23:39:31.000000000 +1000
+++ platform/dss/src/dss_psDKS.cc	2010-12-03 16:28:27.000000000 +1100
@@ -184,7 +184,7 @@ namespace  _dss_internal{ 
     PstOutContainerInterface** plcholder = NULL;   
     PstDataContainer* p = new PstDataContainer(a_node->m_getEnvironment(), plcholder); 
     // This could be done when we know that a message will be produced...
-    printf("Plcholder %d\n", (int)plcholder); 
+    printf("Plcholder %ld\n", (long)plcholder);
     *plcholder = value; 
     
     switch(a_node->m_broadcastRing(new DksContainerMessage(p)))
--- platform/dss/src/protocol_dksBroadcast.cc.orig	2008-06-26 23:39:31.000000000 +1000
+++ platform/dss/src/protocol_dksBroadcast.cc	2010-12-03 16:31:14.000000000 +1100
@@ -71,7 +71,7 @@ void ProtocolDksBcManager::makeGCpreps()
     if (a_isFunctional){
       PstDataContainer *pdc = new PstDataContainer(a_proxy->m_getEnvironment(), 
 						   pst);
-      printf("protocol dksBroadcast %d\n", (int) pst); 
+      printf("protocol dksBroadcast %ld\n", (long) pst);
       DssDksBcMessage *msg = new DssDksBcMessage(pdc, AO_OO_UPDATE); 
       a_dks->m_broadcastRing(msg);
     }else{
