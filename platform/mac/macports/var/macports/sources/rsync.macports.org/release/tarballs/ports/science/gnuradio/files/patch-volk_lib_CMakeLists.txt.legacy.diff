--- volk/lib/CMakeLists.txt.orig	2013-11-19 13:41:47.000000000 -0500
+++ volk/lib/CMakeLists.txt	2013-11-19 13:42:28.000000000 -0500
@@ -118,15 +118,60 @@
 endmacro(OVERRULE_ARCH)
 
 ########################################################################
-# eliminate AVX on GCC < 4.4
-# even though it accepts -mavx, as won't assemble xgetbv, which we need
+# eliminate AVX on if not on x86, or if the compiler does not accept
+# the xgetbv instruction, or {if not cross-compiling and the xgetbv
+# executable does not function correctly}.
+########################################################################
+set(HAVE_XGETBV 0)
+if(CPU_IS_x86)
+    # check to see if the compiler/linker works with xgetb instruction
+    file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/test_xgetbv.c "unsigned long long _xgetbv(unsigned int index) { unsigned int eax, edx; __asm__ __volatile__(\"xgetbv\" : \"=a\"(eax), \"=d\"(edx) : \"c\"(index)); return ((unsigned long long)edx << 32) | eax; } int main (void) { (void) _xgetbv(0); return (0); }")
+    execute_process(COMMAND ${CMAKE_C_COMPILER} -o
+        ${CMAKE_CURRENT_BINARY_DIR}/test_xgetbv
+        ${CMAKE_CURRENT_BINARY_DIR}/test_xgetbv.c
+        OUTPUT_QUIET ERROR_QUIET
+        RESULT_VARIABLE avx_compile_result)
+    if(NOT ${avx_compile_result} EQUAL 0)
+        OVERRULE_ARCH(avx "Compiler or linker missing xgetbv instruction")
+    elseif(NOT CROSSCOMPILE_MULTILIB)
+        execute_process(COMMAND ${CMAKE_CURRENT_BINARY_DIR}/test_xgetbv
+            OUTPUT_QUIET ERROR_QUIET
+            RESULT_VARIABLE avx_exe_result)
+        if(NOT ${avx_exe_result} EQUAL 0)
+            OVERRULE_ARCH(avx "CPU missing xgetbv.")
+        else()
+            set(HAVE_XGETBV 1)
+        endif()
+    else()
+        # cross compiling and compiler/linker seems to work; assume working
+        set(HAVE_XGETBV 1)
+    endif()
+    file(REMOVE ${CMAKE_CURRENT_BINARY_DIR}/test_xgetbv
+        ${CMAKE_CURRENT_BINARY_DIR}/test_xgetbv.c)
+endif()
+
 ########################################################################
-if(CPU_IS_x86 AND COMPILER_NAME MATCHES "GNU")
-    execute_process(COMMAND ${CMAKE_C_COMPILER} -dumpversion
-        OUTPUT_VARIABLE GCC_VERSION OUTPUT_STRIP_TRAILING_WHITESPACE)
-    if(GCC_VERSION VERSION_LESS "4.4")
-        OVERRULE_ARCH(avx "GCC missing xgetbv")
+# eliminate AVX if cvtpi32_ps intrinsic fails on Apple
+########################################################################
+
+if(${HAVE_XGETBV} AND APPLE)
+    # check to see if the compiler/linker works with cvtpi32_ps instrinsic
+    file(WRITE ${CMAKE_CURRENT_BINARY_DIR}/test_cvtpi32_ps.c "#include <immintrin.h>\nint main (void) {__m128 __a; __m64 __b; __m128 foo = _mm_cvtpi32_ps(__a, __b); return (0); }")
+    execute_process(COMMAND ${CMAKE_C_COMPILER} -mavx -o
+        ${CMAKE_CURRENT_BINARY_DIR}/test_cvtpi32_ps
+        ${CMAKE_CURRENT_BINARY_DIR}/test_cvtpi32_ps.c
+        OUTPUT_QUIET ERROR_QUIET
+        RESULT_VARIABLE avx_compile_result)
+   if(NOT ${avx_compile_result} EQUAL 0)
+        OVERRULE_ARCH(avx "Compiler missing cvtpi32_ps instrinsic")
+	set(HAVE_XGETBV 0)
     endif()
+    file(REMOVE ${CMAKE_CURRENT_BINARY_DIR}/test_cvtpi32_ps
+        ${CMAKE_CURRENT_BINARY_DIR}/test_cvtpi32_ps.c)
+endif()
+
+if(${HAVE_XGETBV})
+    add_definitions(-DHAVE_XGETBV)
 endif()
 
 ########################################################################
