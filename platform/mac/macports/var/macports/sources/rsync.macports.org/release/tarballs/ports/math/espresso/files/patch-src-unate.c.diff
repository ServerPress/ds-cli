--- src/unate.c	2002-02-17 21:10:45.000000000 +0100
+++ src/unate.c	2012-04-22 21:41:14.000000000 +0200
@@ -6,7 +6,7 @@
 
 static pset_family abs_covered(pset_family A, register int pick);
 static pset_family abs_covered_many(pset_family A, register pset pick_set);
-static int abs_select_restricted(pset_family A, pset restrict);
+static int abs_select_restricted(pset_family A, pset restrict_);
 
 pcover map_cover_to_unate(pset *T)
 {
@@ -127,7 +127,7 @@
               			/* disposes of A */
 {
     pset_family Abar;
-    register pset p, p1, restrict;
+    register pset p, p1, restrict_;
     register int i;
     int max_i, min_set_ord, j;
 
@@ -154,14 +154,14 @@
 	/* Select splitting variable as the variable which belongs to a set
 	 * of the smallest size, and which has greatest column count
 	 */
-	restrict = set_new(A->sf_size);
+	restrict_ = set_new(A->sf_size);
 	min_set_ord = A->sf_size + 1;
 	foreachi_set(A, i, p) {
 	    if (SIZE(p) < min_set_ord) {
-		set_copy(restrict, p);
+		set_copy(restrict_, p);
 		min_set_ord = SIZE(p);
 	    } else if (SIZE(p) == min_set_ord) {
-		set_or(restrict, restrict, p);
+		set_or(restrict_, restrict_, p);
 	    }
 	}
 
@@ -172,15 +172,15 @@
 
 	/* Check for "essential" columns */
 	} else if (min_set_ord == 1) {
-	    Abar = unate_complement(abs_covered_many(A, restrict));
+	    Abar = unate_complement(abs_covered_many(A, restrict_));
 	    sf_free(A);
 	    foreachi_set(Abar, i, p) {
-		set_or(p, p, restrict);
+		set_or(p, p, restrict_);
 	    }
 
 	/* else, recur as usual */
 	} else {
-	    max_i = abs_select_restricted(A, restrict);
+	    max_i = abs_select_restricted(A, restrict_);
 
 	    /* Select those rows of A which are not covered by max_i,
 	     * recursively find all minimal covers of these rows, and
@@ -202,7 +202,7 @@
 
 	    Abar = sf_append(Abar, unate_complement(A));
 	}
-	set_free(restrict);
+	set_free(restrict_);
     }
 
     return Abar;
@@ -395,12 +395,12 @@
  *  1 / (set_ord(p) - 1).
  */
 static int
-abs_select_restricted(pset_family A, pset restrict)
+abs_select_restricted(pset_family A, pset restrict_)
 {
     register int i, best_var, best_count, *count;
 
     /* Sum the elements in these columns */
-    count = sf_count_restricted(A, restrict);
+    count = sf_count_restricted(A, restrict_);
 
     /* Find which variable has maximum weight */
     best_var = -1;
