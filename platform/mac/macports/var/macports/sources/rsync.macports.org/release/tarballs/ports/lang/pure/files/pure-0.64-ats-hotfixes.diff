diff -r 0606383af4b0 pure/interpreter.cc
--- interpreter.cc	Wed Oct 29 00:02:26 2014 +0100
+++ interpreter.cc	Sat Nov 01 18:23:46 2014 +0100
@@ -2586,8 +2586,10 @@
      Fortran.
 
    - "-*- ats -*-" selects ATS (PURE_ATSCC environment variable, patscc by
-     default). Contributed by Barry Schwartz <sortsmill@crudfactory.com>, see
-     http://www.ats-lang.org/.
+     default). You can also set the C compiler to be used by patscc with the
+     PURE_ATSCCOMP environment variable (either clang or gcc by default,
+     depending on the value of PURE_ATSCC). Contributed by Barry Schwartz
+     <sortsmill@crudfactory.com>, see http://www.ats-lang.org/.
 
    - "-*- dsp:name -*-" selects Faust (PURE_FAUST environment variable, faust
      by default), where 'name' denotes the name of the Faust dsp, which is
@@ -2685,28 +2687,39 @@
   } else if (tag == "ats") {
     env = "PURE_ATSCC";
     // The default command is for ATS2-Postiats, which uses gcc as its C
-    // compiler by default. We prefer to use clang instead (set by means of
-    // the PATSCCOMP environment variable). If you have a working dragonegg
-    // plugin installed, you can still override this by setting the PURE_ATSCC
-    // variable to 'patscc -fplugin=dragonegg'. NOTE: In any case you should
-    // set the PATSHOME environment variable as explained in the ATS2
-    // installation instructions.
+    // compiler by default. We prefer to use clang instead. If you have a
+    // working dragonegg plugin installed, you can still override this by
+    // setting the PURE_ATSCC variable to 'patscc -fplugin=dragonegg'. NOTE:
+    // In any case you should set the PATSHOME environment variable as
+    // explained in the ATS2 installation instructions.
     drv = "patscc";
-    args = " -emit-llvm -c ";
     ext = ".dats";
     intermediate_ext = "_dats.c";
     remove_intermediate = true;
-    // We only override patscc's default C compiler if neither PURE_ATSCC nor
-    // PATSCCOMP has been set, so that the user still has full control over
-    // which AST and C compilers will be used.
-    if (!getenv("PURE_ATSCC") && !getenv("PATSCCOMP")) {
-      static char *patsccomp = NULL;
-      if (!patsccomp) {
-	string ccomp = string("PATSCCOMP=") + clang + " -emit-llvm -std=c99 -D_XOPEN_SOURCE -I${PATSHOME} -I${PATSHOME}/ccomp/runtime";
-	patsccomp = strdup(ccomp.c_str());
-	putenv(patsccomp);
-      }
-      args = " -c ";
+    // Unless dragonegg is being used or PURE_ATSCCOMP has been set
+    // explicitly, we override patscc's default C compiler so that clang is
+    // used to generate bitcode. If needed, this gives the user full control
+    // over which AST and C compilers will be used, and the options they
+    // should be invoked with. The options needed for bitcode compilation are
+    // always added, however.
+    char *atscc = getenv(env);
+    char *atsccomp = getenv("PURE_ATSCCOMP");
+    // Figure out the default C compiler to use and set up command line
+    // arguments accordingly.
+    string cc = clang+ " -emit-llvm";
+    args = " -atsccomp \"${PURE_ATSCCOMP}\" -c ";
+    if (atscc && strstr(atscc, "dragonegg")) {
+      // Use dragonegg instead.
+      cc = "gcc";
+      args = " -atsccomp \"${PURE_ATSCCOMP}\" -emit-llvm -c ";
+    }
+    if (!atsccomp) {
+      // Set up a reasonable default for the PURE_ATSCCOMP variable.
+      string ccomp = string("PURE_ATSCCOMP=") + cc + " -std=c99 -D_XOPEN_SOURCE -I${PATSHOME} -I${PATSHOME}/ccomp/runtime";
+      atsccomp = strdup(ccomp.c_str());
+      putenv(atsccomp);
+      bool vflag = (verbose&verbosity::compiler) != 0;
+      if (vflag) std::cerr << atsccomp << '\n';
     }
   } else if (tag == "dsp") {
     env = "PURE_FAUST"; drv = "faust -double";
