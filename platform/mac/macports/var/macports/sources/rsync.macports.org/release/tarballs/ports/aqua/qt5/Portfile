# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id: Portfile 143642 2015-12-16 16:05:39Z mcalhoun@macports.org $

PortSystem          1.0

name                qt5
version             5.5.1
revision            1

# get Qt's version numbers
set branch          [join [lrange [split ${version} .] 0 1] .]
set qt_major        [lindex [split ${version} .] 0]

categories          aqua
platforms           macosx
maintainers         mcalhoun openmaintainer
license             {LGPL-2.1 GPL-3}

homepage            http://qt.io

if { ${version} eq "5.5.1" && ${subport} eq "qt5-qtwebengine" } {
    incr revision 1
}

# generate documentation from complete code base
# generate modules from separate downloads
if { ${subport} ne "${name}-docs" } {
    master_sites        http://download.qt.io/official_releases/qt/${branch}/${version}/submodules
} else {
    master_sites        http://download.qt.io/official_releases/qt/${branch}/${version}/single/
}

if { ${subport} ne ${name} } {
    # file sizes are significantly smaller using xz
    use_xz yes
}

if { ${os.platform} ne "darwin" } {
    pre-fetch {
        ui_warn "${subport} is untested on \"${os.platform}\"."
    }
} elseif { ${os.major} < 11 } {
    pre-fetch {
        ui_error "OS X prior to 10.8 (Mountain Lion) is not a Reference Configuration for Qt."
        ui_error "OS X prior to 10.7 (Lion) is not even tested."
        ui_error "See http://doc.qt.io/qt-5/supported-platforms.html#reference-configurations"
        return -code error "unsupported OS"
    }
} elseif { ${os.major} > 14 } {
    pre-fetch {
        ui_warn "OS X subsequent to 10.10 (Yosemite) is not a Reference Configuration for Qt."
        ui_warn "See http://doc.qt.io/qt-5/supported-platforms.html#reference-configurations"
    }
} else {
    # 11 <= ${os.major} <= 14
    if { [variant_isset universal] } {
        pre-fetch {
            ui_warn "Multiple architectures is not a Reference Configuration for Qt."
            ui_warn "See http://doc.qt.io/qt-5/supported-platforms.html#reference-configurations"
        }
    } else {
        if { ${configure.build_arch} eq "i386" } {
            pre-fetch {
                ui_warn "32-bit mode is not a Reference Configuration for Qt."
                ui_warn "See http://doc.qt.io/qt-5/supported-platforms.html#reference-configurations"
            }
        }
    }
}

############################################################################### Modules Not Considered
#
# No qt5             (Doesn't Install Anything)
# No qtactiveqt      (Windows Only)
# No qtandroidextras (Android Only)
# No qtdoc           (Doesn't Install Anything)
# No qtwayland       (Linux Only)
# No qtx11extras     (X11 Only)
# No qtwinextras     (Windows Only)
#
###############################################################################

############################################################################### Finding Dependencies
#
# grep -r "%dependencies" *
# find ./ -name sync.profile
#
# grep -r qtCompileTest *
#
# find ./ -name config.tests
#
# find ./ -name Find\*.cmake
#
###############################################################################

############################################################################### Notes
#
# qtconnectivity checks for bluetooth libraries
#    bluez and bluez_le (Linux Only)
#    btapi10_2_1 libbb2 (Blackberry Only)
#
# qtconnectivity depends on
#    qtandroidextras    (Android Only)
#
# qttools depends on
#    qtactiveqt (Windows Only)
#
# qtwebkit has tests for libraries in:
#     Tools/qmake/mkspecs/features/configure.prf
#     Tools/qmake/config.tests/
#
###############################################################################

############################################################################### TODO
#
# TODO: possible to trim dependencies of qtbase?
# TODO: force qttools to not depend on (deprecated) qtwebkit?
# TODO: support older versions of OS X via different versions of Qt 5
#
###############################################################################

############################################################################### Module Format
#
# "Qt Module Name" {
#     checksum, rmd160
#     checksum, sha256
#     dependencies, build
#     dependencies, lib
#     dependencies, Qt module name
#     Qt components provided
#     included in "standard" installation of Qt (empty string is no, explanation string is yes)
#     variant overrides
# }
#
# module info found at https://doc.qt.io/qt-5/qtmodules.html
#
###############################################################################
array set modules {
    qt3d {
        181929ce80c7e88e4230239c260242749771f8ad
        e380906e2bcbd825dab45043bf063dd88b793c0d5fb050ee915bf4e2b58b1bf7
        ""
        "port:assimp"
        "qtbase qtxmlpatterns qtdeclarative qtimageformats"
        {"Qt3D Core" "Qt3D Renderer" "Qt3D Quick" "Qt3D Quick Renderer" "Qt3D Input"}
        "technology preview module"
        "variant overrides: "
    }
    qtbase {
        ce4bccd0703aaf8d904fbecd1f334ef13d698a44
        dfa4e8a4d7e4c6b69285e7e8833eeecd819987e1bdbe5baa6b6facd4420de916
        ""
        "port:zlib port:libpng port:jpeg port:freetype path:bin/dbus-daemon:dbus path:lib/libssl.dylib:openssl  port:tiff port:libmng path:lib/pkgconfig/glib-2.0.pc:glib2 port:icu port:pcre port:libiconv port:harfbuzz"
        ""
        {"Qt Gui" "Qt Widgets" "Qt Print Support" "Qt OpenGL" "Qt Core" "Qt XML" "Qt SQL" "Qt Network" "Qt Test" "Qt D-Bus" "Qt Concurrent" "Qt Platform Headers"}
        ""
        "variant overrides: "
    }
    qtcanvas3d {
        ed68d3c61b0c67818626595a7bba14a627f5120b
        759b171030d7110751943643885c1484c7900fed7737424d202e36bdeba0b080
        ""
        ""
        "qtbase qtdeclarative"
        {"Qt Canvas 3D"}
        ""
        "variant overrides: "
    }
    qtconnectivity {
        ff138deaf87850b047c1e472188a2455b2e0ff54
        3637e6def8582fc0fb3684179b93650720ba2da1311a560d358296153f245023
        ""
        ""
        "qtbase qtdeclarative qtxmlpatterns"
        {"Qt Bluetooth" "Qt NFC"}
        ""
        "variant overrides: "
    }
    qtdeclarative {
        1d8939c42f4b510443365479ffe8bc525e0faac6
        5fd14eefb83fff36fb17681693a70868f6aaf6138603d799c16466a094b26791
        ""
        ""
        "qtbase qtxmlpatterns"
        {"Qt QML" "Qt Quick" "Qt Quick Widgets"}
        ""
        "variant overrides: "
    }
    qtenginio {
        5b23212c3da401b9c74f33a6486ba18166f129f6
        a79936bd5b6a35aba28dd282291b28c8fa869b8d86652c62efe5e268d94defe2
        ""
        ""
        "qtbase qtdeclarative qtxmlpatterns"
        {"Enginio"}
        ""
        "variant overrides: "
    }
    qtgraphicaleffects {
        43f6a91f75863f8333fc6b70456f1b0d175b55e4
        9bca0f8db3a4289eceebfa9504915440fe3fa6301d90b65705e4ece528c12d47
        ""
        ""
        "qtbase qtdeclarative qtxmlpatterns"
        {"Qt Graphical Effects"}
        ""
        "variant overrides: "
    }
    qtimageformats {
        75000000ddfbb83b960b73c07d2083b85dcd81fa
        c97fee00c602f9f089fea480546d6e9d61a2b2297c2f163bfd9f8aba92b754a5
        ""
        "port:jasper port:libmng port:tiff port:webp"
        "qtbase"
        {"Qt Image Formats"}
        ""
        "variant overrides: "
    }
    qtlocation {
        3792eedc159db6bf15eef706ee218f3cc5759a51
        1fe948cb87649f4450be921cf3cdefc311595a80ef6a7a7b7484901baa0d6316
        ""
        ""
        "qtbase qtxmlpatterns qtdeclarative qtquickcontrols"
        {"Qt Location" "Qt Positioning"}
        ""
        "variant overrides: "
    }
    qtmacextras {
        e31be686e79c1cf4a70357921f0caad4cd496c79
        025350fdcc936118539ee3703115549b4547def329d3d959b9db5bd853ec9058
        ""
        ""
        "qtbase"
        {"Qt Mac Extras"}
        ""
        "variant overrides: "
    }
    qtmultimedia {
        68049da5e203e484de766c17d683a34a888e0603
        7cc7ca99f41587c188303670499e5c75101f9a8cb6178e8f29cc941e637d957f
        ""
        ""
        "qtbase qtxmlpatterns qtdeclarative"
        {"Qt Multimedia" "Qt Multimedia Widgets"}
        ""
        "variant overrides: "
    }
    qtquick1 {
        dd1c71468426a5b9fe4f5297a6f2b04c9caddc78
        c812a7e59a8b9f0a87693181059933e15fef04bc875b6486cd653be1b9b51f2c
        ""
        ""
        "qtbase qtscript qtxmlpatterns qtdeclarative qttools qtwebkit"
        {"Qt Declarative"}
        "deprecated"
        "variant overrides: "
    }
    qtquickcontrols {
        3975fbb34a74d55f88f47b436b6fca6ce3f7c078
        1b7a8389d656066c629bd2cb520b39a7eb041d184b567dd1b9639b88d841fcf0
        ""
        ""
        "qtbase qtdeclarative qtxmlpatterns"
        {"Qt Quick Controls" "Qt Quick Dialogs" "Qt Quick Layouts" "Qt Quick Extras"}
        ""
        "variant overrides: "
    }
    qtscript {
        7d8ff8c4462b21b83212dd780030a01bd00b8ca9
        cd46dddd998f22bcb06447e0407fef81f7052f25bc770b1c27625654cee828fd
        ""
        ""
        "qtbase"
        {"Qt Script" "Qt Script Tools"}
        "deprecated in favor QJS* in Qt QML"
        "variant overrides: "
    }
    qtsensors {
        9a3eaad761efaefc0a56258c0bd64e01d0889cba
        5d264fc0729a5d7679bd4eb8d7a0a9b142ed38d09fa68fc7dfe57f64afc8eeea
        ""
        ""
        "qtbase qtxmlpatterns qtdeclarative"
        {"Qt Sensors"}
        ""
        "variant overrides: "
    }
    qtserialport {
        00c53b307fd6ad509aedc6ed0b3a464ac3d8e809
        a034dbfb023db1b9b9de54390f7e76a48c1d1eb12533b0ffd574505c99968f7a
        ""
        ""
        "qtbase"
        {"Qt Serial Port"}
        ""
        "variant overrides: "
    }
    qtsvg {
        db1dd37355a1e4b40a37decc1df60d574ab14088
        f7f588be48befd9ccab5a6086832551b8899e8bed9e603ddea979581e05a91c7
        ""
        ""
        "qtbase"
        {"Qt SVG"}
        ""
        "variant overrides: "
    }
    qttools {
        279aacc94f7fa583a59d3fe005ecb3e598e92b32
        4361f6ce49717058160908297841a18b94645cec593d1b48fb126c9d06c87bfd
        ""
        ""
        "qtbase qtxmlpatterns qtdeclarative qtwebkit"
        {"Qt Help" "Qt UI Tools" "Qt Designer" }
        ""
        "variant overrides: "
    }
    qttranslations {
        f9c956935768cea5c935a10493963f7e411dc255
        41f800710f0bc6ca263f1e54f1fa22be7043962999304e73ce9887ebefc7a4c6
        ""
        ""
        "qtbase qttools"
        {"translation files"}
        ""
        "variant overrides: ~examples ~tests ~debug noarch"
    }
    qtwebchannel {
        fca861f785f9d718aa17853bf7a3c072efcd53b7
        7f4295ee57cd4ecba3cb263452d2a08d501b45c9a2b8b7794b6a97d7652f15d0
        ""
        ""
        "qtbase qtwebsockets qtdeclarative"
        {"Qt WebChannel"}
        ""
        "variant overrides: "
    }
    qtwebengine {
        0c24bb89cc72a18c06e2fd613db1eb879ada2a2a
        7c4d328dd305991aaf0c3450615f4a8e5d80152194bee6f5925bd8d3477e2b90
        ""
        ""
        "qtbase qtdeclarative qtxmlpatterns qtquickcontrols qtwebchannel qtlocation"
        {"Qt WebEngine" "Qt WebEngine Widgets"}
        "very large and relatively new; requires newer version of XCode"
        "variant overrides: "
    }
    qtxmlpatterns {
        403a3b2377728629b6a3f1073b24af3f3360adf7
        b537eb0252988e3805a32a16c65038973371d647baf246fdf703bde725d0e8ec
        ""
        ""
        "qtbase"
        {"Qt XML Patterns"}
        ""
        "variant overrides: "
    }
    qtwebsockets {
        83dcc5d07dca6c1cccfaed13cd16fde940ad0b94
        cf4e834a867b90337188be504ef20184c52666370f721e704952988f8cb12deb
        ""
        ""
        "qtbase qtdeclarative"
        {"Qt WebSockets"}
        ""
        "variant overrides: "
    }
    qtwebkit {
        0594ec1150f7899d72f57d8ff2f108f3f75faaf9
        77583f9dbd3e6ad874386df71b165dc3ce88efdabbc6e5d97a959ee2187d6d69
        ""
        "port:fontconfig port:icu port:leveldb port:webp port:libxml2 port:libxslt port:zlib port:sqlite3"
        "qtbase qtxmlpatterns qtdeclarative qtlocation qtmultimedia qtsensors qtwebchannel"
        {"Qt WebKit" "Qt WebKit Widgets"}
        "deprecated in favor of Qt WebEngine"
        "variant overrides: "
    }
    qtwebkit-examples {
        6d2a3aee163e419fbc6ec56a941c4354e8e93b7d
        098935b42d6d249027d1a635e4e70edc3d2969dd860f825b36aec06fc72e46c6
        ""
        ""
        "qtbase qtwebkit qtscript qtsvg qtxmlpatterns qtdeclarative qttools"
        {"examples for Qt WebKit"}
        "deprecated in favor of Qt WebEngine; doen't provide functionality"
        "variant overrides: ++examples"
    }
}

############################################################################### SQL Plugin Format
#
# {
#     variant name
#     dependency, library
#     include path
#     link requirement
#     obsolete? (empty string is no)
# }
#
###############################################################################
array set sql_plugins {
    {sqlite SQLite} {
        {
            "sqlite3"
            "port:sqlite3"
            "${prefix}/include"
            "-L${prefix}/lib -lsqlite3"
            ""
        }
    }
    {psql PostgreSQL} {
        {
            "postgresql94"
            "port:postgresql94"
            "${prefix}/include/postgresql94"
            "-L${prefix}/lib/postgresql94 -lpq"
            ""
        }
        {
            "postgresql84"
            "port:postgresql84"
            "${prefix}/include/postgresql84"
            "-L${prefix}/lib/postgresql84 -lpq"
            ""
        }
    }
    {mysql MySQL} {
        {
            "mysql56"
            "port:mysql56"
            "${prefix}/include/mysql56/mysql"
            "-L${prefix}/lib/mysql56/mysql -lmysqlclient_r"
            ""
        }
    }
}

foreach {module module_info} [array get modules] {

    subport ${name}-${module} {
        distname        ${module}-opensource-src-${version}

        # see https://bugreports.qt.io/browse/QTBUG-35514
        build.target

        checksums                              \
            rmd160  [lindex ${module_info} 0]  \
            sha256  [lindex ${module_info} 1]

        foreach deps [lindex ${module_info} 2] {
            depends_build-append [subst ${deps}]
        }

        foreach deps [lindex ${module_info} 3] {
            depends_lib-append [subst ${deps}]
        }

        foreach qtdeps [lindex ${module_info} 4] {
            depends_lib-append port:${name}-${qtdeps}
        }

        description       Tools and Module(s) for Qt Tool Kit ${qt_major}

        set modules_provided_list [lindex ${module_info} 5]
        if { [llength ${modules_provided_list}] == 1 } {
            set modules_provided_join [lindex ${modules_provided_list} 0]
        } elseif { [llength ${modules_provided_list}] == 2 } {
            set modules_provided_join [join ${modules_provided_list} " and "]
        } else {
            set modules_provided_join [join [list [join [lrange ${modules_provided_list} 0 end-1] ", "] [lindex ${modules_provided_list} end]] ", and "]
        }

        long_description  "Tools and Module(s) for Qt Tool Kit ${qt_major}: ${modules_provided_join}"
    }
}

subport ${name}-docs {
    distname            qt-everywhere-opensource-src-${version}

    checksums                                             \
        rmd160  42bf7768dafb868f2cdef857fd3e444520f2a706  \
        sha256  6f028e63d4992be2b4a5526f2ef3bfa2fe28c5c757554b11d9e8d86189652518

    description         Documentation for Qt Tool Kit ${qt_major}
    long_description    Documentation for Qt Tool Kit ${qt_major}

    supported_archs   noarch
    universal_variant no

    build.target      docs
    destroot.target   install_docs
}

# see http://doc.qt.io/qt-5/sql-driver.html for info on building SQL Database Drivers
foreach {sql_names sql_info} [array get sql_plugins] {
    set driver [lindex ${sql_names} 0]
    set dbms   [lindex ${sql_names} 1]

    subport ${name}-${driver}-plugin {
        distname        qtbase-opensource-src-${version}

        checksums                               \
            rmd160  [lindex $modules(qtbase) 0] \
            sha256  [lindex $modules(qtbase) 1]

        description       ${dbms} Database Driver for Qt Tool Kit ${qt_major}
        long_description  ${dbms} Database Driver for Qt Tool Kit ${qt_major}

        # if there is more than one version of the database system, create variants for each version
        if { [llength ${sql_info}] > 1 } {

            set any_variant_set false

            foreach variant_info ${sql_info} {

                set varName [lindex ${variant_info} 0]

                # find every other variant so it can be marked as conflicting
                set conflicts_list ""
                foreach variant_info2 ${sql_info} {
                    set varName2 [lindex ${variant_info2} 0]

                    if { ${varName} ne ${varName2} } {
                        lappend conflicts_list ${varName2}
                    }
                }

                # get only the numbers from the name
                regexp {[0-9].} ${varName} varVer

                variant ${varName} conflicts ${conflicts_list} description "use version ${varVer} of ${dbms}" {}

                # check if any variant has been set
                if { [variant_isset ${varName}] } {
                    set any_variant_set true
                }
            }

            # ensure at least one variant is set
            if { !${any_variant_set} } {
                default_variants-append +[lindex [lindex ${sql_info} 0] 0]
            }
        }

        foreach variant_info ${sql_info} {
            set varName [lindex ${variant_info} 0]

            if { ( [variant_exists ${varName}] && [variant_isset ${varName}] ) || [llength ${sql_info}]==1 } {
                depends_lib-append [lindex ${variant_info} 1]

                configure.args-append                                    \
                    [subst INCLUDEPATH+=\"[lindex ${variant_info} 2]\"]  \
                    [subst LIBS+=\"[lindex ${variant_info} 3]\"]
            }
        }

        # for single architecture, easier to use
        #    worksrcdir ${worksrcdir}/qtbase/src/plugins/sqldrivers/${driver},
        #    but doesn't work for universal build
        configure.dir ${worksrcpath}/src/plugins/sqldrivers/${driver}
        build.dir     ${configure.dir}
        destroot.dir  ${configure.dir}
    }
}

if { ${subport} eq ${name} } {
    # the main port is Meta-port to install various modules

    description         Qt Tool Kit ${qt_major}
    long_description    Qt Tool Kit: A cross-platform framework \
        (headers, data, and libraries) for writing \
        cross-platform GUI-based applications.

    master_sites
    distfiles
    installs_libs no
    use_configure no
    build {}

    # create a dummy file so the port can be successfully activated
    destroot {
        xinstall -d -m 0755 ${destroot}${prefix}/share/doc/${subport}
        set docfile   [open ${destroot}${prefix}/share/doc/${subport}/README.txt "w"]
        puts ${docfile} "Meta-port for ${name}"
        puts ${docfile} "${long_description}"
        close ${docfile}
    }

    foreach {module module_info} [array get modules] {
        if { [lindex ${module_info} 6] eq "" } {
            depends_lib-append port:${name}-${module}
        }
    }
    depends_lib-append port:${name}-sqlite-plugin

    supported_archs   noarch
    universal_variant no

} elseif { ${subport} ne "${name}-qtbase" && ${subport} ne "${name}-docs" } {
    # these subports use qmake

    # special case
    if { ${subport} eq "${name}-qtlocation" } {
        # qtlocation uses
        #    GeoClue (http://freedesktop.org/wiki/Software/GeoClue/) and
        #    Gypsy (http://gypsy.freedesktop.org)
        #    if they can be found
        # Ensure that test fails even if software is installed
        post-patch {
            foreach test { geoclue geoclue-satellite gypsy } {
                reinplace "s|return 0;|return 0;\\\n#error turn off test|g" ${worksrcpath}/config.tests/${test}/main.cpp
            }
        }
    }

    # special case
    if { ${subport} eq "${name}-qtwebkit" } {
        # qmake uses pkgconfig to look for icu
        # This feature does not work without "CONFIG += link_pkgconfig"
        patchfiles-append patch-icu.pro.diff

        #https://codereview.qt-project.org/#/c/139967/
        #https://codereview.qt-project.org/#/c/139968/
        #https://codereview.qt-project.org/#/c/139970/
        patchfiles-append patch-ssl.diff

        # qtwebkit uses
        #    glx
        #    libXcomposite
        #    libXrender
        #    if they can be found
        # Ensure that test fails even if software is installed
        post-patch {
            foreach test { glx libXcomposite libXrender } {
                reinplace "s|return 0;|return 0;\\\n#error turn off test|g" ${worksrcpath}/Tools/qmake/config.tests/${test}/${test}.cpp
            }
        }
    }

    # special case
    if { ${subport} eq "${name}-qtwebengine" } {
        # see https://wiki.qt.io/QtWebEngine
        PortGroup           xcodeversion 1.0
        minimum_xcodeversions   {12 5.1}

        # see https://codereview.qt-project.org/#/c/125968/
        patchfiles-append patch-qtwebengine32.diff

        # at some point prior to OS X 10.11, MIDI types were unified
        patchfiles-append patch-midifix.diff

        # see https://codereview.qt-project.org/#/c/127759/
        patchfiles-append patch-fix_sdk.diff

        # UsingTheRightCompiler (https://trac.macports.org/wiki/UsingTheRightCompiler)
        build.env-append      CXX=${configure.cxx}
        configure.args-append QMAKE_LINK=${configure.cxx}
    }

    # special case
    if { ${subport} eq "${name}-qtwebengine" || ${subport} eq "${name}-qtdeclarative" || ${subport} eq "${name}-qtwebkit" } {
        # version 5.5.1 (at least) of qtwebengine must find a python version in the interval [2.7, 3)
        #    (see tools/qmake/mkspecs/features/functions.prf)
        #
        # a better solution would be to force qtwebengine to use a specific python program
        # how to accomplish such a thing is not entirely clear
        #
        # see #49838
        #
        # versions 5.5.1 of qtdeclarative and qtwebkit also use python with no way of specifying which one
        #
        configure.env-append PATH="/bin:/sbin:/usr/bin:/usr/sbin:${prefix}/bin:${prefix}/sbin"
        build.env-append     PATH="/bin:/sbin:/usr/bin:/usr/sbin:${prefix}/bin:${prefix}/sbin"
    }

    # detremint which variants are to be turned off
    set request_examples true
    set request_tests    true
    set def_var          ""

    set current_module [string range ${subport} [string length "${name}-"] end]
    # is subport a module or an SQL plugin?
    if { [info exists modules(${current_module})] } {
        # subport is a module

        set module_info    $modules(${current_module})

        if { [lsearch -exact [lindex ${module_info} 7] "~universal"] != -1 } {
            universal_variant no
        }

        if { [lsearch -exact [lindex ${module_info} 7] "noarch"] != -1 } {
            supported_archs   noarch
            universal_variant no
        }

        if { [lsearch -exact [lindex ${module_info} 7] "~debug"] != -1 } {
            set qt5_qmake_request_no_debug true
        }

        if { [lsearch -exact [lindex ${module_info} 7] "~examples"] != -1 } {
            set request_examples false
        }

        if { [lsearch -exact [lindex ${module_info} 7] "~tests"] != -1 } {
            set request_tests    false
        }

        if { [lsearch -exact [lindex ${module_info} 7] "++examples"] != -1 } {
            set request_examples true
            lappend def_var "+examples"
        }
    } else {
        # subport is an SQL plugin
    }

    if { ${request_examples} } {
        variant examples description {Build examples} {}
    }

    if { ${request_tests} } {
        variant tests description {Enable tests} {}
    }

    if { ${def_var} ne "" } {
        default_variants-append ${def_var}
    }

    # special case
    if { ${subport} eq "${name}-qtwebkit-examples" && ![variant_isset examples] } {
        # create a dummy file so the port can be successfully activated
        post-destroot {
            xinstall -d -m 0755 ${destroot}${prefix}/share/doc/${subport}
            set docfile [open ${destroot}${prefix}/share/doc/${subport}/README.txt "w"]
            puts ${docfile} "Without the examples variant, no examples are installed"
            puts ${docfile} "${long_description}"
            close ${docfile}
        }
    }

    # special case
    if { ${subport} eq "${name}-qtsensors" && [variant_isset examples] } {
        if { [variant_isset debug] } {
            set debug "_debug"
        } else {
            set debug ""
        }
        # fix library path names or MacPorts will try to reinstall
        post-destroot {
            foreach dylib "grue/Grue/libdeclarative_grue${debug}.dylib grue/libgruesensor.1.dylib grue/sensors/libqtsensors_grue${debug}.dylib sensor_explorer/Explorer/libdeclarative_explorer${debug}.dylib" {
                system "/usr/bin/install_name_tool -id ${qt_examples_dir}/sensors/${dylib} ${destroot}${qt_examples_dir}/sensors/${dylib}"
            }
            foreach dylib "grue/Grue/libdeclarative_grue${debug}.dylib grue/sensors/libqtsensors_grue${debug}.dylib" {
                system "/usr/bin/install_name_tool -change libgruesensor.1.dylib ${qt_examples_dir}/sensors/grue/libgruesensor.1.dylib ${destroot}${qt_examples_dir}/sensors/${dylib}"
            }
        }
    }

    PortGroup           qmake5 1.0

    # accommodating variant request varies depending on how qtbase was built
    pre-configure {

        # determine if qmake builds examples by default (set via variants)
        if {[active_variants ${name}-qtbase examples ""]} {
            set base_examples true
        } else {
            set base_examples false
        }

        # determine if qmake runs tests by default (set via varians)
        if {[active_variants ${name}-qtbase tests ""]} {
            set base_tests true
        } else {
            set base_tests false
        }

        # determine if the user wants to build examples
        if { [variant_exists examples] && [variant_isset examples] } {
            set this_examples true
        } else {
            set this_examples false
        }

        # determine if the user wants to run tests
        if { [variant_exists tests] && [variant_isset tests] } {
            set this_tests true
        } else {
            set this_tests false
        }

        # determine of qmake's default and user requests are compatible; override qmake if necessary
        if { ${this_examples} && !${base_examples}  } {
            configure.args-append "QT_BUILD_PARTS+=\"examples\""
        }

        if { !${this_examples} && ${base_examples}  } {
            configure.args-append "QT_BUILD_PARTS-=\"examples\""
        }

        if { ${this_tests} && !${base_tests}  } {
            configure.args-append "QT_BUILD_PARTS+=\"tests\""
        }

        if { !${this_tests} && ${base_tests}  } {
            configure.args-append "QT_BUILD_PARTS-=\"tests\""
        }
    }
} else {
    # these subports do NOT use qmake (they use configure script)

    # use the qt5 group; set 'building_qt5' so that the portgroup
    # does not include certain parts
    set building_qt5    1
    PortGroup           qt5 1.0
    PortGroup           xcodeversion 1.0
    PortGroup           cxx11 1.0

    conflicts           qt3 qt3-mac

    minimum_xcodeversions   {11 4.3}

    # special case
    if { ${subport} ne "${name}-docs" } {
        # https://codereview.qt-project.org/#/c/141654/
        patchfiles-append patch-add_sdk.diff

        # the build system automatically uses OpenGL frameworks (-framework OpenGL -framework AGL)
        # the build system also uses pkgconfig to look for an OpenGL installation (gl.pc)
        # if mesa is installed, the build system will try to use both OpenGL systems
        # later, this will cause problems
        #    Undefined symbols: "_CGLGetCurrentContext"
        patchfiles-append patch-configure.diff

        # see https://codereview.qt-project.org/#/c/126584/
        patchfiles-append patch-pcfiles.diff

        #https://codereview.qt-project.org/#/c/140876/
        patchfiles-append patch-stdloc.diff

        #https://codereview.qt-project.org/#/c/138349
        patchfiles-append patch-rpath.diff
    }

    if { [variant_isset tests] } {
        # header file QtCore/private/qmachparser_p.h is included only if "defined(QT_BUILD_INTERNAL) && defined(Q_OF_MACH_O)"
        #     code from header is used only "ifdef Q_OF_MACH_O"
        #     the two must be consistent
        #     assume the header include code is correct
        patchfiles-append patch-tst_qpluginloader.diff

        if { ${configure.build_arch} eq "i386" || [variant_isset universal] } {
            # see http://stackoverflow.com/questions/14506151/invalid-symbol-redefinition-in-inline-asm-on-llvm
            # only runs test code on 32-bit systems
            patchfiles-append patch-tst_benchlibcallgrind.diff

            # this test might still cause problems, but with 5.4.2->5.5.0, it is no longer run
            # tests/auto/corelib/plugin/qpluginloader/qpluginloader.pro:
            #     -macx-*: SUBDIRS += machtest
            #     +macx-*: contains(QT_CONFIG, private_tests): SUBDIRS += machtest
            #
            # When testing, ensure that a universal object file is not inadvertently created.
            patchfiles-append patch-machtest.diff
        }
    }

    # --prefix is not recognized.
    configure.pre_args-delete       --prefix=${prefix}

    # --disable-dependency-tracking is not recognized.
    configure.universal_args-delete --disable-dependency-tracking

    # Installation options:
    #-extprefix     SYSROOT/PREFIX
    #-hostprefix    EXTPREFIX
    #-libexecdir    ARCHDATADIR/libexec
    #-hostbindir    HOSTPREFIX/bin
    #-hostlibdir    HOSTPREFIX/lib
    configure.args-append                      \
        -prefix         ${qt_dir}              \
        -bindir         ${qt_bins_dir}         \
        -headerdir      ${qt_includes_dir}     \
        -libdir         ${qt_libs_dir}         \
        -archdatadir    ${qt_archdata_dir}     \
        -plugindir      ${qt_plugins_dir}      \
        -importdir      ${qt_imports_dir}      \
        -qmldir         ${qt_qml_dir}          \
        -datadir        ${qt_data_dir}         \
        -docdir         ${qt_docs_dir}         \
        -translationdir ${qt_translations_dir} \
        -sysconfdir     ${qt_sysconf_dir}      \
        -examplesdir    ${qt_examples_dir}     \
        -testsdir       ${qt_tests_dir}        \
        -hostdatadir    ${qt_host_data_dir}

    # Configure options:
    configure.args-append \
        -release          \
        -opensource       \
        -confirm-license  \
        -shared           \
        -largefile        \
        -accessibility

    foreach driver { db2 ibase mysql oci odbc psql sqlite sqlite2 tds } {
        configure.args-append -no-sql-${driver}
    }

    if { ![variant_isset universal] } {
        configure.args-append "-platform ${qt_qmake_spec}"
    } else {
        set merger_configure_args(i386)   "-platform ${qt_qmake_spec_32}"
        set merger_configure_args(x86_64) "-platform ${qt_qmake_spec_64}"
    }

    configure.args-append \
        -no-testcocoon    \
        -no-gcov          \
        -force-pkg-config

    # Third Party Libraries:
    configure.args-append   \
        -system-zlib        \
        -no-mtdev           \
        -no-journald        \
        -system-libpng      \
        -system-libjpeg     \
        -system-freetype    \
        -system-harfbuzz    \
        -openssl-linked     \
        -no-libproxy        \
        -system-pcre        \
        --disable-xcb       \
        -no-xkbcommon-x11   \
        -no-xkbcommon-evdev \
        -no-xinput2         \
        -no-xcb-xlib        \
        -glib               \
        -no-pulseaudio      \
        -no-alsa            \
        -no-gtkstyle

    # Additional options:
    configure.args-append       \
        {-make libs}            \
        {-make tools}           \
        {-nomake examples}      \
        {-nomake tests}         \
        -gui                    \
        -widgets                \
        -no-rpath               \
        -verbose                \
        -optimized-qmake        \
        -nis                    \
        -cups                   \
        -iconv                  \
        -no-evdev               \
        -no-tslib               \
        -icu                    \
        -fontconfig             \
        -strip                  \
        -no-pch                 \
        -dbus-linked            \
        -no-use-gold-linker     \
        -no-separate-debug-info \
        -no-xcb                 \
        -no-eglfs               \
        -no-directfb            \
        -no-linuxfb             \
        -no-kms                 \
        -no-libinput            \
        -no-gstreamer           \
        -no-system-proxies

    # MacOS/iOS options:
    configure.args-append    \
        -framework

    if {${configure.sdkroot} ne ""} {
        configure.args-append \
            -sdk [string tolower [join [lrange [split [lindex [split ${configure.sdkroot} "/"] end] "."] 0 end-1] "."]]
    }

    # configure options that don't show up in configure --help
    configure.args-append \
        -no-libudev       \
        -no-egl           \
        -no-openvg

    # Qt builds part of the system using environment provided my MacPorts.
    # It builds the rest using its own internal environment.
    # For consistency, clear MacPorts environment.
    configure.cxx_stdlib
    configure.sdkroot
    configure.cc_archflags
    configure.cxx_archflags
    configure.objc_archflags
    configure.objcxx_archflags
    configure.ld_archflags
    configure.cppflags
    configure.cflags
    configure.cxxflags
    configure.objcflags
    configure.objcxxflags
    configure.ldflags
    configure.pipe  no
    if { [variant_isset universal] } {
        set merger_arch_flag no
    }
    configure.march
    configure.mtune
    configure.universal_ldflags
    configure.universal_cflags
    configure.universal_cxxflags
    configure.universal_cppflags

    # cofigure script looks for perl but doesn't seem to use it for our configuration

    # configure script uses gawk if it can find it,
    #    so require it for consistency
    depends_build-append port:gawk

    # unless overridden, configure script uses gmake if it can find it
    configure.env-append MAKE=${build.cmd}
}

# special case
if { ${subport} eq "${name}-qtbase" } {
    if { [variant_isset universal] } {

        post-destroot {
            # delete preprocessor comments surrounding QT_CPU_FEATURES.i386 and QT_CPU_FEATURES.x86_64
            reinplace "/^#ifndef.*$/d" ${destroot}${qt_mkspecs_dir}/qmodule.pri
            reinplace "/^#else.*$/d"   ${destroot}${qt_mkspecs_dir}/qmodule.pri
            reinplace "/^#endif.*$/d"  ${destroot}${qt_mkspecs_dir}/qmodule.pri
        }

        # The file ${qt_mkspecs_dir}/qconfig.pri is still not properly merged
        # A workaround is to set QT_ARCH and QT_TARGET_ARCH manually (see e.g. the qmake5 PortGroup)
    }

    variant tests description {Enable tests} {
        configure.args-replace {-nomake tests} {-make tests}
    }

    variant examples description {Build examples} {
        configure.args-replace {-nomake examples} {-make examples}
    }

    variant debug description {Build both release and debug libraries} {
        configure.args-replace -release -debug-and-release
    }

    variant pulseaudio description {Compile PulseAudio support} {
        depends_lib-append port:pulseaudio
        configure.args-replace -no-pulseaudio -pulseaudio
    }

    variant gstreamer description {Compile GStreamer support} {
        depends_lib-append port:gstreamer1 port:gstreamer1-gst-plugins-base
        configure.args-replace -no-gstreamer {-gstreamer 1.0}
    }
}

# special case
if { ${subport} eq "${name}-docs" } {

    depends_lib-append                                                           \
        path:${qt_bins_dir}/qdoc:${name}-qtbase                                  \
        path:${qt_plugins_dir}/sqldrivers/libqsqlite.dylib:${name}-sqlite-plugin \
        path:${qt_bins_dir}/qhelpgenerator:${name}-qttools

    post-extract {
        # For the most part, generated makefiles use ${prefix}/bin/qdoc.
        ln -s ${qt_bins_dir}/qdoc ${worksrcpath}/qtbase/bin/

        # Similarly, location of qhelpgenerator is expected in ${worksrcpath}
        xinstall -d -m 0755 ${worksrcpath}/qttools/bin/
        ln -s ${qt_bins_dir}/qhelpgenerator ${worksrcpath}/qttools/bin/

        # Without this file, the makefile ${worksrcpath}/qtwebkit/Source/WebCore/Makefile.WebCore.Target
        #    keeps generating itself over and over again.
        # This file is only created when the library is being built, however.
        xinstall -d -m 0755 ${worksrcpath}/qtwebkit/Source/WebCore/generated
        touch ${worksrcpath}/qtwebkit/Source/WebCore/generated/InspectorBackendCommands.qrc
    }
}

if { [variant_exists universal] && [variant_isset universal] } {
    merger-post-destroot {
        foreach arch ${universal_archs_to_use} {

            set dir ${destroot}-${arch}

            foreach prlfl [glob -nocomplain ${dir}${qt_libs_dir}/*.framework/*.prl] {
                reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${prlfl}
            }

            foreach prlfl [glob -nocomplain ${dir}${qt_libs_dir}/*.prl] {
                reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${prlfl}
            }

            foreach prlfl [glob -nocomplain ${dir}${qt_examples_dir}/widgets/tools/plugandpaint/plugins/*.prl] {
                reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${prlfl}
            }

            if { [file exists ${dir}${qt_libs_dir}/cmake/Qt5Core/Qt5CoreConfigExtrasMkspecDir.cmake] } {
                reinplace "s|macx-clang-32|macx-clang|g" ${dir}${qt_libs_dir}/cmake/Qt5Core/Qt5CoreConfigExtrasMkspecDir.cmake
            }

            # Libs.private contains the value of ${worksrcpath}-${arch}, which prevents merging
            if { [file exists ${dir}${qt_libs_dir}/pkgconfig/Qt5WebKit.pc] } {
                reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${dir}${qt_libs_dir}/pkgconfig/Qt5WebKit.pc
            }
            if { [file exists ${dir}${qt_libs_dir}/pkgconfig/Qt5WebEngineCore.pc] } {
                reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${dir}${qt_libs_dir}/pkgconfig/Qt5WebEngineCore.pc
            }

            if { [file exists ${dir}${qt_examples_dir}/declarative/tutorials/gettingStarted/parts/part5/filedialog/Makefile] } {
                reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${dir}${qt_examples_dir}/declarative/tutorials/gettingStarted/parts/part5/filedialog/Makefile
                reinplace -E "/\\w*-arch \\\\/d"                      ${dir}${qt_examples_dir}/declarative/tutorials/gettingStarted/parts/part5/filedialog/Makefile
                reinplace -E "/\\w*${arch} \\\\/d"                    ${dir}${qt_examples_dir}/declarative/tutorials/gettingStarted/parts/part5/filedialog/Makefile
                reinplace -E {s:-arch +[^ ]+::g}                      ${dir}${qt_examples_dir}/declarative/tutorials/gettingStarted/parts/part5/filedialog/Makefile
                reinplace "s|macx-clang-32|macx-clang|g"              ${dir}${qt_examples_dir}/declarative/tutorials/gettingStarted/parts/part5/filedialog/Makefile
            }

            if { [file exists ${dir}${qt_examples_dir}/multimedia/spectrum/fftreal.framework/fftreal.prl] } {
                reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${dir}${qt_examples_dir}/multimedia/spectrum/fftreal.framework/fftreal.prl
            }

            if { [file exists ${dir}${qt_examples_dir}/multimedia/spectrum/spectrum.app/Contents/Frameworks/fftreal.framework/fftreal.prl] } {
                reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${dir}${qt_examples_dir}/multimedia/spectrum/spectrum.app/Contents/Frameworks/fftreal.framework/fftreal.prl
            }

            if { [file exists ${dir}${qt_examples_dir}/sensors/grue/libgruesensor.prl   ] } {
                reinplace "s|${worksrcpath}-${arch}|${worksrcpath}|g" ${dir}${qt_examples_dir}/sensors/grue/libgruesensor.prl
            }
        }
    }
}

# see #44934 (and #35067 for the qt4-mac version)
if { ${subport} eq "${name}-qttools" } {
    set framework_list [split ${qt_frameworks_dir} '/']
    set qt_list        [split ${qt_dir} '/']

    while {[llength ${qt_list}] && [llength ${framework_list}]} {
        set var_qt        [lindex $qt_list        0]
        set var_framework [lindex $framework_list 0]

        if { ${var_qt} ne ${var_framework} } {
            break
        }

        # remove first element from list
        set qt_list        [lreplace ${qt_list}        0 0]
        set framework_list [lreplace ${framework_list} 0 0]
    }
    set libreplace [string repeat ../ [llength ${qt_list}]][join ${framework_list} /]
    if { ${libreplace} ne "lib" } {
        patchfiles-append patch-shared.diff
        post-patch {
            reinplace "s|__MACPORTS_FRAMWORK_DIR__|${libreplace}|g" ${worksrcpath}/src/macdeployqt/shared/shared.cpp
        }
    }
}

if { ${subport} ne ${name} } {
    post-destroot {
        # see #44204
        foreach f [glob -nocomplain -tails -directory ${destroot}${qt_libs_dir} *.framework] {
            set framework [file rootname ${f}]

            set include_list   [split ${qt_includes_dir}   '/']
            set framework_list [split ${qt_libs_dir} '/']

            while {[llength ${include_list}] && [llength ${framework_list}]} {
                set var_include   [lindex $include_list   0]
                set var_framework [lindex $framework_list 0]

                if { ${var_include} ne ${var_framework} } {
                    break
                }

                # remove first element from list
                set include_list   [lreplace ${include_list} 0 0]
                set framework_list [lreplace ${framework_list} 0 0]
            }

            xinstall -d -m 0755 ${destroot}${qt_includes_dir}
            ln -s [string repeat ../ [llength ${include_list}]][join ${framework_list} /]/${f}/Headers ${destroot}${qt_includes_dir}/${framework}
        }

        # .app and non-.app programs are both put in qt_bins_dir
        # put a link of any .app programs in the ${qt_apps_dir}
        if { ${qt_bins_dir} ne ${qt_apps_dir} } {
            xinstall -d -m 0755 ${destroot}${qt_apps_dir}
            foreach app [glob -nocomplain -tails -directory ${destroot}${qt_bins_dir} *.app] {
                ln -s ${qt_bins_dir}/${app} ${destroot}${qt_apps_dir}
            }
        }

        # put configuration files in places they will be found automatically
        if { ${qt_libs_dir} ne "${prefix}/lib" } {

            # put link to pkgconfig files in place where pkgconfig will find it
            # most Qt 5 pkgconfig files begin with Qt5, so link should not conflict with any other Qt installations
            #    exceptions: Enginio (new in Qt 5.3)
            xinstall -d -m 0755 ${destroot}${prefix}/lib/pkgconfig
            foreach pcfile [glob -nocomplain -tails -directory ${destroot}${qt_libs_dir}/pkgconfig *.pc] {
                ln -s ${qt_libs_dir}/pkgconfig/${pcfile} ${destroot}${prefix}/lib/pkgconfig
            }

            # put link to cmake files in place where cmake will find it
            # most Qt 5 cmake directories begin with Qt5, so link should not conflict with any other Qt installations
            #    exceptions: Enginio (new in Qt 5.3)
            xinstall -d -m 0755 ${destroot}${prefix}/lib/cmake
            foreach cmakedir [glob -type d -nocomplain -tails -directory ${destroot}${qt_libs_dir}/cmake *] {
                xinstall -d -m 0755 ${destroot}${prefix}/lib/cmake/${cmakedir}
                foreach cmakefile [glob -tails -directory ${destroot}${qt_libs_dir}/cmake/${cmakedir} *.cmake] {
                    ln -s ${qt_libs_dir}/cmake/${cmakedir}/${cmakefile} ${destroot}${prefix}/lib/cmake/${cmakedir}/
                }
            }

            # if cmake finds configuration files in ${prefix}/lib/cmake, CMAKE_CURRENT_LIST_DIR expands to ${prefix}/lib/cmake/xxx
            # cmake configuration files actually installed in ${qt_cmake_module_dir}/xxx
            foreach cmakedir [glob -type d -nocomplain -tails -directory ${destroot}${qt_libs_dir}/cmake *] {
                foreach cmakefile [glob -nocomplain -directory ${destroot}${qt_libs_dir}/cmake/${cmakedir} *.cmake] {
                    reinplace "s|\\\${CMAKE_CURRENT_LIST_DIR}|${qt_cmake_module_dir}/${cmakedir}|g" ${cmakefile}
                }
            }
        }
    }
}

livecheck.type      regex
livecheck.url       http://download.qt.io/archive/qt/${branch}/
livecheck.regex     (\\d+(\\.\\d+)+)
