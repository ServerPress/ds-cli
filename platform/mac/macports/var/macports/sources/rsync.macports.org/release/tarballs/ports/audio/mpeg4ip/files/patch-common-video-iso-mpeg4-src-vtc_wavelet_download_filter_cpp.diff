--- common/video/iso-mpeg4/src/vtc_wavelet_download_filter.cpp.orig	2006-04-05 12:27:30.000000000 -0600
+++ common/video/iso-mpeg4/src/vtc_wavelet_download_filter.cpp	2009-11-19 03:41:52.000000000 -0700
@@ -85,7 +85,7 @@
 Void CVTCCommon::check_marker(Int marker_bit)
 {
   if(marker_bit != MARKER_BIT)
-    errorHandler("Error in download wavelet filters\n");
+    errorHandler((char*)"Error in download wavelet filters\n");
 }
 
 
@@ -104,22 +104,22 @@
     if(filter->DWT_Type == 0){
       if(((Short*)filter->LPCoeff)[i] !=
 	 ((Short*)filter->LPCoeff)[filter->LPLength-i-1]) 
-	errorHandler("Lowpass filter is not symmetric.\n");
+	errorHandler((char*)"Lowpass filter is not symmetric.\n");
     }
     else
       if(((double*)filter->LPCoeff)[i] !=
 	 ((double*)filter->LPCoeff)[filter->LPLength-i-1]) 
-	errorHandler("Lowpass filter is not symmetric.\n");
+	errorHandler((char*)"Lowpass filter is not symmetric.\n");
 
 
   /* -------- check highpass filter ---------- */
   half=filter->HPLength>>1;
   /* check for error */
   if(half<<1==filter->HPLength && filter->DWT_Class==DWT_ODD_SYMMETRIC)
-    errorHandler("Lowpass filter has odd taps, while highpass filter has even"\
+    errorHandler((char*)"Lowpass filter has odd taps, while highpass filter has even"\
                " taps->\n");
   if(half<<1!=filter->HPLength && filter->DWT_Class==DWT_EVEN_SYMMETRIC) 
-    errorHandler("Lowpass filter has even taps, while highpass filter has odd"\
+    errorHandler((char*)"Lowpass filter has even taps, while highpass filter has odd"\
                " taps.\n");
 
   if(filter->DWT_Class==DWT_ODD_SYMMETRIC){  /* ODD_SYMMETRIC, symmetric */
@@ -127,24 +127,24 @@
       if(filter->DWT_Type == 0){
         if(((Short*)filter->HPCoeff)[i] !=
 	   ((Short*)filter->HPCoeff)[filter->HPLength-i-1]) 
-	  errorHandler("Highpass filter is not symmetric.\n");
+	  errorHandler((char*)"Highpass filter is not symmetric.\n");
       }
       else
 	if(((double*)filter->HPCoeff)[i] !=
 	   ((double*)filter->HPCoeff)[filter->HPLength-i-1]) 
-	  errorHandler("Highpass filter is not symmetric.\n");
+	  errorHandler((char*)"Highpass filter is not symmetric.\n");
   }
   else{  /* EVEN_SYMMETRIC, antisymmetric */
      for(i=0;i<half;i++)
       if(filter->DWT_Type == 0){
         if(((Short*)filter->HPCoeff)[i] !=-
 	   ((Short*)filter->HPCoeff)[filter->HPLength-i-1]) 
-	  errorHandler("Highpass filter is not antisymmetric.\n");
+	  errorHandler((char*)"Highpass filter is not antisymmetric.\n");
       }
       else
 	if(((double*)filter->HPCoeff)[i] !=-
 	   ((double*)filter->HPCoeff)[filter->HPLength-i-1]) 
-	  errorHandler("Highpass filter is not antisymmetric.\n");
+	  errorHandler((char*)"Highpass filter is not antisymmetric.\n");
   }
 
 } 
@@ -222,7 +222,7 @@
   /* hjlee 0901 */
   filter = (FILTER *)malloc(sizeof(FILTER));
   if(filter == NULL) 
-    errorHandler("Memory allocation error\n");
+    errorHandler((char*)"Memory allocation error\n");
   filter->DWT_Type = (type ==0)? DWT_INT_TYPE: DWT_DBL_TYPE;
   
   
@@ -236,7 +236,7 @@
     LPS=(Short *)malloc(sizeof(Short)*filter->LPLength);
     HPS=(Short *)malloc(sizeof(Short)*filter->HPLength);
     if(LPS==NULL || HPS==NULL)
-      errorHandler("Cannot allocate memory to download wavelet filters\n");
+      errorHandler((char*)"Cannot allocate memory to download wavelet filters\n");
     filter->LPCoeff=LPS;
     filter->HPCoeff=HPS;
   }
@@ -244,7 +244,7 @@
     LPD=(double *)malloc(sizeof(double)*filter->LPLength);
     HPD=(double *)malloc(sizeof(double)*filter->HPLength);
     if(LPD==NULL || HPD==NULL)
-      errorHandler("Cannot allocate memory to download wavelet filters\n");
+      errorHandler((char*)"Cannot allocate memory to download wavelet filters\n");
     filter->LPCoeff=LPD;
     filter->HPCoeff=HPD;
   }
