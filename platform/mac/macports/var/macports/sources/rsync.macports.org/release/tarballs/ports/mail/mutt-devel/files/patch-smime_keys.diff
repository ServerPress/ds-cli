--- a/smime_keys.pl	2005-05-10 17:02:54.000000000 -0500
+++ b/smime_keys.pl	2005-11-01 16:02:42.000000000 -0600
@@ -80,6 +80,29 @@
 # OPS
 #
 
+sub get_certs {
+    my $file = shift;
+    return undef unless (defined($file) && -e $file);
+
+    open IN, "<$file";
+
+    my @certs = ();
+    my $in_cert = 0;
+    my $cert = q{};
+    while ( <IN> ) {
+        $in_cert = 1 if ( /^-----BEGIN CERTIFICATE-----$/ );
+        $cert .= $_;
+
+        if ( /^-----END CERTIFICATE-----$/ )  {
+            push @certs, $cert;
+            $cert = q{};
+            $in_cert = 0;
+        }
+    }
+
+    return @certs;
+}
+
 if(@ARGV == 1 and $ARGV[0] eq "init") {
     init_paths;
 }
@@ -90,13 +113,26 @@
     change_label($ARGV[1]);
 }
 elsif(@ARGV == 2 and $ARGV[0] eq "add_cert") {
-    my $format = -B $ARGV[1] ? 'DER' : 'PEM'; 
-    my $cmd = "$opensslbin x509 -noout -hash -in $ARGV[1] -inform $format";
+    foreach my $cert ( get_certs( $ARGV[1] ) ) {
+
+        my $file = sprintf( '/tmp/smime-%d.%d', $$, int(rand( 999999 ) ) );
+        print STDERR "TMPFILE: $file\n";
+        if ( -e $file ) {
+            die( "ERROR: TMPFILE $file existss?!?!" );
+        }
+        open OUT, ">$file";
+        print OUT $cert;
+        close OUT;
+
+        my $format = -B $file ? 'DER' : 'PEM'; 
+        my $cmd = "$opensslbin x509 -noout -hash -in $file -inform $format";
     my $cert_hash = `$cmd`;
     $? and die "'$cmd' returned $?";
     chomp($cert_hash); 
     my $label = query_label;
-    &add_certificate($ARGV[1], \$cert_hash, 1, $label, '?');
+        &add_certificate($file, \$cert_hash, 1, $label, '?');
+        unlink $file;
+    }
 }
 elsif(@ARGV == 2 and $ARGV[0] eq "add_pem") {
     -e $ARGV[1] and -s $ARGV[1] or die("$ARGV[1] is nonexistent or empty.");
@@ -380,9 +416,10 @@
     print "the key ID. This has to be _one_ word (no whitespaces).\n\n";
 
     print "Enter label: ";
-    chomp($input = <STDIN>);
+    $input = <STDIN>;
+    chomp($input) if ( defined($input) );
 
-    my ($label, $junk) = split(/\s/, $input, 2);     
+    my ($label, $junk) = split(/\s/, $input, 2) if ( defined($input) );
     
     defined $junk 
         and print "\nUsing '$label' as label; ignoring '$junk'\n";
