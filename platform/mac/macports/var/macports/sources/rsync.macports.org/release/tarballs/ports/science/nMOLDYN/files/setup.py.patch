--- setup.py.orig	2011-02-28 17:31:32.000000000 +1100
+++ setup.py	2011-09-20 18:31:39.000000000 +1000
@@ -52,9 +52,9 @@
     raise SystemExit
 
 # Check that we have the minimal numpy version.
+numpy_minversion = LooseVersion(vstring = "1.1.0")
 try:
     import numpy
-    numpy_minversion = LooseVersion(vstring = "1.1.0")
     numpy_version = LooseVersion(vstring = numpy.__version__)
     
     if cmpver(numpy_version, numpy_minversion, pad = 0) == -1: raise
@@ -64,9 +64,9 @@
     raise SystemExit
 
 # Check that we have the minimal matplotlib version.
+matplotlib_minversion = LooseVersion(vstring = '0.98.0')
 try:
     from matplotlib import __version__ as matplotlib_version
-    matplotlib_minversion = LooseVersion(vstring = '0.98.0')
     matplotlib_version = LooseVersion(vstring = matplotlib_version)
     
     if cmpver(matplotlib_version, matplotlib_minversion, pad = 0) == -1: raise 
@@ -75,9 +75,9 @@
     print 'nMOLDYN needs matplotlib %s or higher. The plotting functionnalities will be disabled.' % matplotlib_minversion
 
 # Check that we have the minimal PyRO version.
+pyro_minversion = LooseVersion(vstring = '3.9.0')
 try:
     from Pyro.constants import VERSION as pyro_version
-    pyro_minversion = LooseVersion(vstring = '3.9.0')
     pyro_version = LooseVersion(vstring = pyro_version)
     
     if cmpver(pyro_version, pyro_minversion, pad = 0) == -1: raise 
@@ -86,9 +86,9 @@
     print 'nMOLDYN needs pyro %s or higher. The parallel computing functionnalities will be disabled.' % pyro_minversion
 
 # Check that we have the minimal Scientific version.
+scientific_minversion = LooseVersion(vstring = '2.8.0')
 try:
     from Scientific import __version__ as scientific_version
-    scientific_minversion = LooseVersion(vstring = '2.8.0')
     scientific_version = LooseVersion(vstring = scientific_version)
     
     if cmpver(scientific_version, scientific_minversion, pad = 0) == -1: raise 
@@ -98,9 +98,9 @@
     raise SystemExit
 
 # Check that we have the minimal MMTK version.
+mmtk_minversion = LooseVersion(vstring = '2.6.1')
 try:
     from MMTK import __version__ as mmtk_version
-    mmtk_minversion = LooseVersion(vstring = '2.6.1')
     mmtk_version = LooseVersion(vstring = mmtk_version)
     
     if cmpver(mmtk_version, mmtk_minversion, pad = 0) == -1: raise 
