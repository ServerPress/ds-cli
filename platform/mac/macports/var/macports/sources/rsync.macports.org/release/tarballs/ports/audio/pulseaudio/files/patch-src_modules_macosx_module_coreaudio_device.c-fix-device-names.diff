--- src/modules/macosx/module-coreaudio-device.c.old	2015-04-19 07:39:23.000000000 +0200
+++ src/modules/macosx/module-coreaudio-device.c	2015-04-19 07:40:13.000000000 +0200
@@ -374,6 +374,39 @@ static int ca_sink_set_state(pa_sink *s,
     return 0;
 }
 
+/* Caveat: this function frees the CFString if conversion succeeded. */
+static int CFString_to_cstr_n(CFStringRef cfstr, char *buf, long n) {
+    int ret;
+
+    assert (buf);
+
+    ret = 0;
+
+    if (cfstr != NULL) {
+        const char *tmp = CFStringGetCStringPtr(cfstr, kCFStringEncodingUTF8);
+
+        if (tmp == NULL) {
+            if (CFStringGetCString(cfstr, buf, n, kCFStringEncodingUTF8))
+                ret = 1;
+        }
+        else {
+            strncpy(buf, tmp, n);
+            buf[n - 1] = 0;
+            ret = 1;
+        }
+    }
+
+    /*
+     * A true value for ret implies cfstr != NULL, but let's still do the check
+     * for safety reasons (i.e., should this code ever be re-organized...)
+     */
+    if (ret && cfstr != NULL) {
+        CFRelease(cfstr);
+    }
+
+    return ret;
+}
+
 static int ca_device_create_sink(pa_module *m, AudioBuffer *buf, int channel_idx) {
     OSStatus err;
     UInt32 size;
@@ -386,6 +419,7 @@ static int ca_device_create_sink(pa_modu
     char tmp[255];
     pa_strbuf *strbuf;
     AudioObjectPropertyAddress property_address;
+    CFStringRef tmp_cfstr;
 
     ca_sink = pa_xnew0(coreaudio_sink, 1);
     ca_sink->map.channels = buf->mNumberChannels;
@@ -400,7 +434,11 @@ static int ca_device_create_sink(pa_modu
         property_address.mScope = kAudioDevicePropertyScopeOutput;
         property_address.mElement = channel_idx + i + 1;
         size = sizeof(tmp);
-        err = AudioObjectGetPropertyData(u->object_id, &property_address, 0, NULL, &size, tmp);
+        err = AudioObjectGetPropertyData(u->object_id, &property_address, 0, NULL, &size, &tmp_cfstr);
+        if (err == 0) {
+            err = !(CFString_to_cstr_n(tmp_cfstr, tmp, sizeof(tmp)));
+        }
+
         if (err || !strlen(tmp))
             snprintf(tmp, sizeof(tmp), "Channel %d", (int) property_address.mElement);
 
@@ -504,6 +542,7 @@ static int ca_device_create_source(pa_mo
     char tmp[255];
     pa_strbuf *strbuf;
     AudioObjectPropertyAddress property_address;
+    CFStringRef tmp_cfstr;
 
     ca_source = pa_xnew0(coreaudio_source, 1);
     ca_source->map.channels = buf->mNumberChannels;
@@ -518,7 +557,11 @@ static int ca_device_create_source(pa_mo
         property_address.mScope = kAudioDevicePropertyScopeInput;
         property_address.mElement = channel_idx + i + 1;
         size = sizeof(tmp);
-        err = AudioObjectGetPropertyData(u->object_id, &property_address, 0, NULL, &size, tmp);
+        err = AudioObjectGetPropertyData(u->object_id, &property_address, 0, NULL, &size, &tmp_cfstr);
+        if (err == 0) {
+            err = !(CFString_to_cstr_n(tmp_cfstr, tmp, sizeof(tmp)));
+        }
+
         if (err || !strlen(tmp))
             snprintf(tmp, sizeof(tmp), "Channel %d", (int) property_address.mElement);
 
