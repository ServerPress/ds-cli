--- config.h.in.orig   2013-10-20 20:37:35.000000000 +0300
+++ config.h.in        2013-10-20 20:38:41.000000000 +0300
@@ -633,7 +633,7 @@
 
 // TR1 regex not supported in GCC <= 4.5
 #ifndef LYX_USE_TR1
-#  if __GNUC__ == 4 
+#  if 0
 #    define LYX_USE_TR1
 #  endif
 #endif
--- src/support/debug.h
+++ src/support/debug.h
@@ -17,14 +17,8 @@

 #include "support/strfwd.h"

-namespace std {
-
-class ios_base;
-
-template<typename CharT, typename Traits> class basic_streambuf;
-typedef basic_streambuf<char, char_traits<char> > streambuf;
-
-}
+#include <ios>
+#include <streambuf>


 namespace lyx {
--- src/support/strfwd.h
+++ src/support/strfwd.h
@@ -29,26 +29,8 @@
 #endif
 
 
-namespace std {
-
-template<typename Alloc> class allocator;
-
-template<typename Char> struct char_traits;
-template<> struct char_traits<char>;
-#ifdef USE_WCHAR_T
-template<> struct char_traits<wchar_t>;
-#endif
-
-template<typename Char, typename Traits, typename Alloc> class basic_string;
-typedef basic_string<char, char_traits<char>, allocator<char> > string;
-
-template<class Char, class Traits> class basic_istream;
-template<class Char, class Traits> class basic_ostream;
-
-typedef basic_istream<char, char_traits<char> > istream;
-typedef basic_ostream<char, char_traits<char> > ostream;
-
-} // namepace std
+#include <iostream>
+#include <string>
 
 
 namespace lyx {
--- src/frontends/qt4/InGuiThread.h.orig	2013-04-29 11:58:31.000000000 -0400
+++ src/frontends/qt4/InGuiThread.h	2013-11-03 22:38:13.000000000 -0500
@@ -69,25 +69,25 @@
 	template<class F, class P1>
 	R call(F f, P1& p1)
 	{
-		return call(bind(f, ref(p1)));
+		return call(bind(f, boost::ref(p1)));
 	}
 
 	template<class F, class P1, class P2>
 	R call(F f, P1& p1, P2& p2)
 	{
-		return call(bind(f, ref(p1), ref(p2)));
+		return call(bind(f, boost::ref(p1), boost::ref(p2)));
 	}
 
 	template<class F, class P1, class P2, class P3>
 	R call(F f, P1& p1, P2& p2, P3& p3)
 	{
-		return call(bind(f, ref(p1), ref(p2), ref(p3)));
+		return call(bind(f, boost::ref(p1), boost::ref(p2), boost::ref(p3)));
 	}
 
 	template<class F, class P1, class P2, class P3, class P4>
 	R call(F f, P1& p1, P2& p2, P3& p3, P4& p4)
 	{
-		return call(bind(f, ref(p1), ref(p2), ref(p3), ref(p4)));
+		return call(bind(f, boost::ref(p1), boost::ref(p2), boost::ref(p3), boost::ref(p4)));
 	}
 
 	/*
@@ -97,7 +97,7 @@
 	template<class F, class P1, class P2, class P3, class P4, class P5, class P6, class P7, class P8>
 	R call(F f, P1& p1, P2& p2, P3& p3, P4& p4, P5& p5, P6& p6, P7& p7, P8& p8)
 	{
-		return call(bind(f, ref(p1), ref(p2), ref(p3), ref(p4), ref(p5), ref(p6), ref(p7), ref(p8)));
+		return call(bind(f, boost::ref(p1), boost::ref(p2), boost::ref(p3), boost::ref(p4), boost::ref(p5), boost::ref(p6), boost::ref(p7), boost::ref(p8)));
 	}
 
 private:
@@ -131,25 +131,25 @@
 	template<class F, class P1>
 	void call(F f, P1& p1)
 	{
-		call(bind(f, ref(p1)));
+		call(bind(f, boost::ref(p1)));
 	}
 
 	template<class F, class P1, class P2>
 	void call(F f, P1& p1, P2& p2)
 	{
-		call(bind(f, ref(p1), ref(p2)));
+		call(bind(f, boost::ref(p1), boost::ref(p2)));
 	}
 
 	template<class F, class P1, class P2, class P3>
 	void call(F f, P1& p1, P2& p2, P3& p3)
 	{
-		call(bind(f, ref(p1), ref(p2), ref(p3)));
+		call(bind(f, boost::ref(p1), boost::ref(p2), boost::ref(p3)));
 	}
 
 	template<class F, class P1, class P2, class P3, class P4>
 	void call(F f, P1& p1, P2& p2, P3& p3, P4& p4)
 	{
-		call(bind(f, ref(p1), ref(p2), ref(p3), ref(p4)));
+		call(bind(f, boost::ref(p1), boost::ref(p2), boost::ref(p3), boost::ref(p4)));
 	}
 
 	/*
@@ -159,7 +159,7 @@
 	template<class F, class P1, class P2, class P3, class P4, class P5, class P6, class P7, class P8>
 	void call(F f, P1& p1, P2& p2, P3& p3, P4& p4, P5& p5, P6& p6, P7& p7, P8& p8)
 	{
-		call(bind(f, ref(p1), ref(p2), ref(p3), ref(p4), ref(p5), ref(p6), ref(p7), ref(p8)));
+		call(bind(f, boost::ref(p1), boost::ref(p2), boost::ref(p3), boost::ref(p4), boost::ref(p5), boost::ref(p6), boost::ref(p7), boost::ref(p8)));
 	}
 
 private:
