Description: stack corruption in discid_put
 This patch fixes two ways to corrupt the stack. One is by supplying
 more that 99 offset arguments. The offsets array is declared with space
 for 100 elements, but the first is reserved for the sectors argument.
 The patch addresses this by limitting the filling of offsets[] to 99 elements
 (plus the sectors argument which is in offsets[0]). It relies on libdiscid
 to return false if the request was for more than 99 offsets.
 .
 The second stack corruption is because of a typo in the initialization
 for loop. Because of that, the for loop is essentially reduced to
 "i=100" and the following line (not part of the loop) sets
 offsets[100], which is beyond the allocated space for the array. Using
 memset is safer and probably faster.
Author: Damyan Ivanov <dmn@debian.org>
Bug-Debian: https://bugs.debian.org/758216
Bug: https://rt.cpan.org/Ticket/Display.html?id=98179

--- a/lib/MusicBrainz/DiscID.xs
+++ b/lib/MusicBrainz/DiscID.xs
@@ -124,12 +124,13 @@ discid_put( disc, first_track, sectors,
   DiscId *disc
   int first_track
   int sectors
+  int n_items = items;
   PREINIT:
 	  int i, last_track, offsets[100];
   CODE:
-	  for (i=0;i<100;i++);
-	      offsets[i] = 0;
-    for (i=3; i<items; i++) {
+    memset(offsets, 0, sizeof(offsets));
+    if (items > 102 ) n_items = 102;  // rely on discid_put to return error
+    for (i=3; i<n_items; i++) {
         offsets[i-2] = (int)SvIV(ST(i));
     }
     offsets[0] = sectors;
--- a/t/10discid.t
+++ b/t/10discid.t
@@ -5,7 +5,7 @@ use strict;
 use Test::More;
 
 # use a BEGIN block so we print our plan before modules are loaded
-BEGIN { plan tests => 54 }
+BEGIN { plan tests => 56 }
 
 # load modules
 use MusicBrainz::DiscID;
@@ -16,6 +16,9 @@ my $disc = new MusicBrainz::DiscID();
 ok( $disc );
 is(ref $disc, 'MusicBrainz::DiscID');
 
+ok( !$disc->put( 1, 140, 1 .. 100 ) );
+
+is( $disc->error_msg, "Illegal track limits" );
 
 ok( $disc->put( 1, 303602,
                 150, 9700, 25887, 39297, 53795, 63735, 77517, 94877, 107270,
