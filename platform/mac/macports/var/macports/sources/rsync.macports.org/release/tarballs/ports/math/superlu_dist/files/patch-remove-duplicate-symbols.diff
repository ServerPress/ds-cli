diff -ur SRC-bak/dreadMM.c SRC/dreadMM.c
--- SRC-bak/dreadMM.c	2015-09-04 11:32:08.000000000 -0700
+++ SRC/dreadMM.c	2015-09-04 11:32:21.000000000 -0700
@@ -212,22 +212,3 @@
 #endif
 
 }
-
-
-void dreadrhs(int m, double *b)
-{
-    FILE *fp, *fopen();
-    int i;
-
-    if ( !(fp = fopen("b.dat", "r")) ) {
-        fprintf(stderr, "dreadrhs: file does not exist\n");
-	exit(-1);
-    }
-    for (i = 0; i < m; ++i)
-      fscanf(fp, "%lf\n", &b[i]);
-      /*fscanf(fp, "%d%lf\n", &j, &b[i]);*/
-    /*        readpair_(j, &b[i]);*/
-    fclose(fp);
-}
-
-
diff -ur SRC-bak/dscatter.c SRC/dscatter.c
--- SRC-bak/dscatter.c	2015-09-04 11:35:38.000000000 -0700
+++ SRC/dscatter.c	2015-09-04 12:06:22.000000000 -0700
@@ -302,57 +302,6 @@
     *iukp += UB_DESCRIPTOR;     /* Start fstnz of block U(k,j). */
 }
 
-typedef struct pair pair;
-
-int_t
-get_min (int_t * sums, int_t nprocs)
-{
-    int_t min_ind, min_val;
-    min_ind = 0;
-    min_val = 2147483647;
-    for (int i = 0; i < nprocs; i++)
-    {
-        if (sums[i] < min_val)
-        {
-            min_val = sums[i];
-            min_ind = i;
-        }
-    }
-
-    return min_ind;
-}
-
-int
-compare_pair (const void *a, const void *b)
-{
-    return (((pair *) a)->val - ((pair *) b)->val);
-}
-
-int_t
-static_partition (pair * work_load, int_t nwl, int_t * partition, int_t ldp,
-                  int_t * sums, int_t * counts, int nprocs)
-{
-    //initialization loop
-    for (int i = 0; i < nprocs; ++i)
-    {
-        counts[i] = 0;
-        sums[i] = 0;
-    }
-    qsort (work_load, nwl, sizeof (pair), compare_pair);
-    // for(int i=0;i<nwl;i++)
-    for (int i = nwl - 1; i >= 0; i--)
-    {
-        int_t ind = get_min (sums, nprocs);
-        // printf("ind %d\n",ind );
-        partition[ldp * ind + counts[ind]] = work_load[i].ind;
-        counts[ind]++;
-        sums[ind] += work_load[i].val;
-
-    }
-
-    return 0;
-}
-
 /*Divide CPU-GPU dgemm work here*/
 #ifdef PI_DEBUG
 int Ngem = 2;
diff -ur SRC-bak/pdgstrf.c SRC/pdgstrf.c
--- SRC-bak/pdgstrf.c	2015-09-04 11:33:00.000000000 -0700
+++ SRC/pdgstrf.c	2015-09-04 12:06:20.000000000 -0700
@@ -158,71 +158,59 @@
 }
 #endif
 
+/************************************************************************/
 
-int get_thread_per_process()
-{   
-    char* ttemp; 
-    ttemp = getenv("THREAD_PER_PROCESS");
-
-    if(ttemp) return atoi(ttemp);
-    else return 1;
-}
-
-int
-get_mic_offload ()
+int_t
+get_min (int_t * sums, int_t nprocs)
 {
-    char *ttemp;
-    ttemp = getenv ("SUPERLU_MIC_OFFLOAD");
+    int_t min_ind, min_val;
+    min_ind = 0;
+    min_val = 2147483647;
+    for (int i = 0; i < nprocs; i++)
+    {
+        if (sums[i] < min_val)
+        {
+            min_val = sums[i];
+            min_ind = i;
+        }
+    }
 
-    if (ttemp)
-        return atoi (ttemp);
-    else
-        return 0;
+    return min_ind;
 }
 
-int_t
-get_max_buffer_size ()
-{
-    char *ttemp;
-    ttemp = getenv ("MAX_BUFFER_SIZE");
-    if (ttemp)
-        return atoi (ttemp);
-    else
-        return 5000000;
-}
+typedef struct pair pair;
 
-int_t
-get_cublas_nb ()
+int
+compare_pair (const void *a, const void *b)
 {
-    char *ttemp;
-    ttemp = getenv ("CUBLAS_NB");
-    if (ttemp)
-        return atoi (ttemp);
-    else
-        return 64;
+    return (((pair *) a)->val - ((pair *) b)->val);
 }
 
 int_t
-get_num_cuda_streams ()
+static_partition (pair * work_load, int_t nwl, int_t * partition, int_t ldp,
+                  int_t * sums, int_t * counts, int nprocs)
 {
-    char *ttemp;
-    ttemp = getenv ("NUM_CUDA_STREAMS");
-    if (ttemp)
-        return atoi (ttemp);
-    else
-        return 8;
-}
+    //initialization loop
+    for (int i = 0; i < nprocs; ++i)
+    {
+        counts[i] = 0;
+        sums[i] = 0;
+    }
+    qsort (work_load, nwl, sizeof (pair), compare_pair);
+    // for(int i=0;i<nwl;i++)
+    for (int i = nwl - 1; i >= 0; i--)
+    {
+        int_t ind = get_min (sums, nprocs);
+        // printf("ind %d\n",ind );
+        partition[ldp * ind + counts[ind]] = work_load[i].ind;
+        counts[ind]++;
+        sums[ind] += work_load[i].val;
 
-/*int omp_get_num_threads (void);
-  int omp_get_thread_num (void);*/
+    }
 
-int AssignMic(int my_rank)
-{
-    return (my_rank+1)%2;
+    return 0;
 }
 
-/************************************************************************/
-
 #include "dscatter.c"
 
 /************************************************************************/
diff -ur SRC-bak/zreadMM.c SRC/zreadMM.c
--- SRC-bak/zreadMM.c	2015-09-04 11:29:44.000000000 -0700
+++ SRC/zreadMM.c	2015-09-04 11:29:48.000000000 -0700
@@ -212,19 +212,3 @@
 
 }
 
-
-void zreadrhs(int m, doublecomplex *b)
-{
-    FILE *fp, *fopen();
-    int i;
-
-    if ( !(fp = fopen("b.dat", "r")) ) {
-        fprintf(stderr, "zreadrhs: file does not exist\n");
-	exit(-1);
-    }
-    for (i = 0; i < m; ++i)
-      fscanf(fp, "%lf%lf\n", &b[i].r, &b[i].i);
-    fclose(fp);
-}
-
-
diff -ur SRC-bak/zscatter.c SRC/zscatter.c
--- SRC-bak/zscatter.c	2015-09-04 11:52:48.000000000 -0700
+++ SRC/zscatter.c	2015-09-04 12:06:29.000000000 -0700
@@ -302,57 +302,6 @@
     *iukp += UB_DESCRIPTOR;     /* Start fstnz of block U(k,j). */
 }
 
-typedef struct pair pair;
-
-int_t
-get_min (int_t * sums, int_t nprocs)
-{
-    int_t min_ind, min_val;
-    min_ind = 0;
-    min_val = 2147483647;
-    for (int i = 0; i < nprocs; i++)
-    {
-        if (sums[i] < min_val)
-        {
-            min_val = sums[i];
-            min_ind = i;
-        }
-    }
-
-    return min_ind;
-}
-
-int
-compare_pair (const void *a, const void *b)
-{
-    return (((pair *) a)->val - ((pair *) b)->val);
-}
-
-int_t
-static_partition (pair * work_load, int_t nwl, int_t * partition, int_t ldp,
-                  int_t * sums, int_t * counts, int nprocs)
-{
-    //initialization loop
-    for (int i = 0; i < nprocs; ++i)
-    {
-        counts[i] = 0;
-        sums[i] = 0;
-    }
-    qsort (work_load, nwl, sizeof (pair), compare_pair);
-    // for(int i=0;i<nwl;i++)
-    for (int i = nwl - 1; i >= 0; i--)
-    {
-        int_t ind = get_min (sums, nprocs);
-        // printf("ind %d\n",ind );
-        partition[ldp * ind + counts[ind]] = work_load[i].ind;
-        counts[ind]++;
-        sums[ind] += work_load[i].val;
-
-    }
-
-    return 0;
-}
-
 /*Divide CPU-GPU dgemm work here*/
 #ifdef PI_DEBUG
 int Ngem = 2;
