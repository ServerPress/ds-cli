# HG changeset patch
# User Clemens Lang <cal@macports.org>
# Date 1449516441 -3600
#      Mon Dec 07 20:27:21 2015 +0100
# Node ID 30679b45eeadb1ece557963cbd5915ab933fa747
# Parent  7b9454058beba85a1878f6fd835fe1edf8b48279
Make hierarchy separator for folder indentation configurable

The sidebar-dotted patch from
  https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=523774
supports folders from IMAP servers that use dots as hierarchy separator.
However, in its implementation, it breaks the sidebar for users that use
a slash as hierarchy separators and have dots in their folder names.

Support both use cases by adding a new option sidebar_folder_delim_chars
to configure the characters that separate hierarchies, similar to what
imap_delim_chars does. Using imap_delim_chars directly is not a good
idea because there might be users who do not use IMAP support in mutt.

Signed-off-by: Clemens Lang <cal@macports.org>
License: GPL-2.0+
Upstream-Status: Submitted [private email 2015-12-07]

diff --git a/globals.h b/globals.h
--- a/globals.h
+++ b/globals.h
@@ -119,6 +119,7 @@
 WHERE char *Sendmail;
 WHERE char *Shell;
 WHERE char *SidebarDelim;
+WHERE char *SidebarFolderDelimChars;
 WHERE char *SidebarFormat;
 WHERE char *SidebarIndentStr;
 WHERE char *Signature;
diff --git a/init.h b/init.h
--- a/init.h
+++ b/init.h
@@ -2066,6 +2066,12 @@
   ** .pp
   ** Should the sidebar shorten the path showed.
   */
+  { "sidebar_folder_delim_chars", DT_STR, R_BOTH, UL &SidebarFolderDelimChars, UL "/." },
+  /*
+  ** .pp
+  ** This contains the list of characters which you would like to treat
+  ** as folder separators for displaying folders hierarchically in the sidebar.
+  */
   {"sidebar_format", DT_STR, R_NONE, UL &SidebarFormat, UL "%B%?F? [%F]?%* %?N?%N/?%4S"},
   /*
   ** .pp
diff --git a/sidebar.c b/sidebar.c
--- a/sidebar.c
+++ b/sidebar.c
@@ -318,21 +318,20 @@
 		sidebar_folder_name = option(OPTSIDEBARSHORTPATH) ? mutt_basename(tmp->path) : tmp->path + maildir_is_prefix*(strlen(Maildir) + 1);
 		if ( maildir_is_prefix && option(OPTSIDEBARFOLDERINDENT) ) {
 			char *tmp_folder_name;
+			char *last_folder_name_part;
 			int i;
 			tmp_folder_name = tmp->path + strlen(Maildir) + 1;
-			for (i = 0; i < strlen(tmp->path) - strlen(Maildir); i++) {
- 				if (tmp_folder_name[i] == '/'  || tmp_folder_name[i] == '.') sidebar_folder_depth++;
-			}   
+			last_folder_name_part = tmp_folder_name;
+			for (i = 0; i < strlen(tmp_folder_name); i++) {
+				if (strchr(NONULL(SidebarFolderDelimChars), tmp_folder_name[i])) {
+					last_folder_name_part = tmp_folder_name + (i + 1);
+					sidebar_folder_depth++;
+				}
+			}
 			if (sidebar_folder_depth > 0) {
  				if (option(OPTSIDEBARSHORTPATH)) {
- 					tmp_folder_name = strrchr(tmp->path, '.');
- 					if (tmp_folder_name == NULL)
- 						tmp_folder_name = mutt_basename(tmp->path);
- 					else
-						tmp_folder_name++;
+ 					tmp_folder_name = last_folder_name_part;
  				}
- 				else
- 					tmp_folder_name = tmp->path + strlen(Maildir) + 1;
  				sidebar_folder_name = malloc(strlen(tmp_folder_name) + sidebar_folder_depth*strlen(NONULL(SidebarIndentStr)) + 1);
 				sidebar_folder_name[0]=0;
 				for (i=0; i < sidebar_folder_depth; i++)
