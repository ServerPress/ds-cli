--- src/pv/file.c	2013-01-22 17:28:24.000000000 -0600
+++ src/pv/file.c	2013-06-19 02:27:43.000000000 -0500
@@ -33,7 +33,7 @@
 unsigned long long pv_calc_total_size(pvstate_t state)
 {
 	unsigned long long total;
-	struct stat64 sb;
+	struct stat sb;
 	int rc, i, j, fd;
 
 	total = 0;
@@ -43,20 +43,20 @@
 	 * No files specified - check stdin.
 	 */
 	if (state->input_file_count < 1) {
-		if (0 == fstat64(STDIN_FILENO, &sb))
+		if (0 == fstat(STDIN_FILENO, &sb))
 			total = sb.st_size;
 		return total;
 	}
 
 	for (i = 0; i < state->input_file_count; i++) {
 		if (0 == strcmp(state->input_files[i], "-")) {
-			rc = fstat64(STDIN_FILENO, &sb);
+			rc = fstat(STDIN_FILENO, &sb);
 			if (rc != 0) {
 				total = 0;
 				return total;
 			}
 		} else {
-			rc = stat64(state->input_files[i], &sb);
+			rc = stat(state->input_files[i], &sb);
 			if (0 == rc)
 				rc = access(state->input_files[i], R_OK);
 		}
@@ -112,7 +112,7 @@
 	 * and that we can seek back to the start after getting the size.
 	 */
 	if (total <= 0) {
-		rc = fstat64(STDOUT_FILENO, &sb);
+		rc = fstat(STDOUT_FILENO, &sb);
 		if ((0 == rc) && S_ISBLK(sb.st_mode)
 		    && (0 == (fcntl(STDOUT_FILENO, F_GETFL) & O_APPEND))) {
 			total = lseek64(STDOUT_FILENO, 0, SEEK_END);
@@ -148,14 +148,14 @@
 		fd = -1;
 
 		if (0 == strcmp(state->input_files[i], "-")) {
-			rc = fstat64(STDIN_FILENO, &sb);
+			rc = fstat(STDIN_FILENO, &sb);
 			if ((rc != 0) || (!S_ISREG(sb.st_mode))) {
 				total = 0;
 				return total;
 			}
 			fd = dup(STDIN_FILENO);
 		} else {
-			rc = stat64(state->input_files[i], &sb);
+			rc = stat(state->input_files[i], &sb);
 			if ((rc != 0) || (!S_ISREG(sb.st_mode))) {
 				total = 0;
 				return total;
@@ -212,8 +212,8 @@
  */
 int pv_next_file(pvstate_t state, int filenum, int oldfd)
 {
-	struct stat64 isb;
-	struct stat64 osb;
+	struct stat isb;
+	struct stat osb;
 	int fd, input_file_is_stdout;
 
 	if (oldfd > 0) {
@@ -252,7 +252,7 @@
 		}
 	}
 
-	if (fstat64(fd, &isb)) {
+	if (fstat(fd, &isb)) {
 		fprintf(stderr, "%s: %s: %s: %s\n",
 			state->program_name,
 			_("failed to stat file"),
@@ -262,7 +262,7 @@
 		return -1;
 	}
 
-	if (fstat64(STDOUT_FILENO, &osb)) {
+	if (fstat(STDOUT_FILENO, &osb)) {
 		fprintf(stderr, "%s: %s: %s\n",
 			state->program_name,
 			_("failed to stat output file"), strerror(errno));
--- src/pv/loop.c	2013-01-22 17:28:24.000000000 -0600
+++ src/pv/loop.c	2013-06-19 02:27:43.000000000 -0500
@@ -50,7 +50,7 @@
 	struct timeval start_time, next_update, next_ratecheck, cur_time;
 	struct timeval init_time, next_remotecheck;
 	long double elapsed;
-	struct stat64 sb;
+	struct stat sb;
 	int fd, n;
 
 	/*
@@ -105,7 +105,7 @@
 	 * Set target buffer size if the initial file's block size can be
 	 * read and we weren't given a target buffer size.
 	 */
-	if (0 == fstat64(fd, &sb)) {
+	if (0 == fstat(fd, &sb)) {
 		unsigned long long sz;
 		sz = sb.st_blksize * 32;
 		if (sz > BUFFER_SIZE_MAX)
