--- common/video/iso-mpeg4/src/vtc_zte_ztscan_enc.cpp.orig	2005-05-04 13:56:01.000000000 -0600
+++ common/video/iso-mpeg4/src/vtc_zte_ztscan_enc.cpp	2009-11-19 04:16:11.000000000 -0700
@@ -243,7 +243,7 @@
     
   mzte_codec.m_iOffsetDC=offset_dc;
   mzte_codec.m_iMaxDC=max_dc;  /* hjlee */
-  noteDebug("DC pred: offset=%d, max_dc=%d",
+  noteDebug((char*)"DC pred: offset=%d, max_dc=%d",
 	    mzte_codec.m_iOffsetDC,mzte_codec.m_iMaxDC);  
 
   for(i=0;i<dc_h;i++) {
@@ -287,7 +287,7 @@
 Void CVTCEncoder::wavelet_dc_encode(Int c)
 {
 
-  noteDetail("Encoding DC (wavelet_dc_encode)....");
+  noteDetail((char*)"Encoding DC (wavelet_dc_encode)....");
   color=c;
 
 //Added by Sarnoff for error resilience, 3/5/99
@@ -307,7 +307,7 @@
   /* put_param(mzte_codec.m_iMaxDC+mzte_codec.m_iOffsetDC,7); */ /* hjlee */
   //printf("%d %d %d %d\n", mzte_codec.m_iMean[color],mzte_codec.m_iQDC[color],-mzte_codec.m_iOffsetDC,mzte_codec.m_iMaxDC);
   cacll_encode();
-  noteDetail("Completed encoding DC.");
+  noteDetail((char*)"Completed encoding DC.");
 
 }
 
@@ -353,7 +353,7 @@
   numBP = ceilLog2(mzte_codec.m_iMaxDC+1); // modified by Sharp (99/2/16)
   mzte_ac_encoder_init(&ace);
   if ((acm_bpdc=(ac_model *)calloc(numBP,sizeof(ac_model)))==NULL)
-    errorHandler("Can't allocate memory for prob model.");
+    errorHandler((char*)"Can't allocate memory for prob model.");
   
   for (i=0; i<numBP; i++) {
     acm_bpdc[i].Max_frequency = Bitplane_Max_frequency;
@@ -479,7 +479,7 @@
 {
   SNR_IMAGE *snr_image;
     
-  noteDetail("Encoding AC (wavelet_higher_bands_encode_SQ)....");
+  noteDetail((char*)"Encoding AC (wavelet_higher_bands_encode_SQ)....");
 
   color=col;
   snr_image=&(mzte_codec.m_SPlayer[color].SNRlayer.snr_image);
@@ -517,7 +517,7 @@
  }
 //End modified by Sarnoff for error resilience, 3/5/99
 
-  noteDetail("Completed encoding AC.");
+  noteDetail((char*)"Completed encoding AC.");
 }
 
 
@@ -659,7 +659,7 @@
 ********************************************************/ 
 Void CVTCEncoder::wavelet_higher_bands_encode_SQ_tree() // hjlee 0928
 {
-  noteDetail("Encoding AC (wavelet_higher_bands_encode_SQ)....");
+  noteDetail((char*)"Encoding AC (wavelet_higher_bands_encode_SQ)....");
 
 //Modified by Sarnoff for error resilience, 3/5/99
  if(mzte_codec.m_usErrResiDisable){ //no error resilience case
@@ -691,7 +691,7 @@
  }
 //End modified by Sarnoff for error resilience, 3/5/99
 
-  noteDetail("Completed encoding AC.");
+  noteDetail((char*)"Completed encoding AC.");
 }
 
 
@@ -909,7 +909,7 @@
       mag_sign_encode_SQ(h,w);
       break;
     default: 
-      errorHandler("invalid zerotree symbol in single quant encode");
+      errorHandler((char*)"invalid zerotree symbol in single quant encode");
   }
 }
 
@@ -987,7 +987,7 @@
 	mag_sign_encode_SQ(h,w);
 	break;
       default: 
-	errorHandler("invalid zerotree symbol in single quant encode");
+	errorHandler((char*)"invalid zerotree symbol in single quant encode");
     }
   }
 
@@ -1109,7 +1109,7 @@
 ********************************************************/ 
 Void CVTCEncoder::wavelet_higher_bands_encode_MQ(Int scanDirection)
 {
-  noteDetail("Encoding AC (wavelet_higher_bands_encode_MQ)....");
+  noteDetail((char*)"Encoding AC (wavelet_higher_bands_encode_MQ)....");
 
   /* init arithmetic coder */
   mzte_ac_encoder_init(&ace);
@@ -1237,7 +1237,7 @@
     {      
       SNR_IMAGE *snr_image;
 
-      noteProgress("  Coding Layer %d, Color %d", layer - (color!=0), color);
+      noteProgress((char*)"  Coding Layer %d, Color %d", layer - (color!=0), color);
 
       ac_h2=acH2;
       ac_w2=acW2;
@@ -1382,7 +1382,7 @@
 	  mzte_ac_encode_symbol(&ace,acm_type[l][CONTEXT_LZTR_D],czt_type);
 	  break;
 	default:
-	  errorHandler("Invalid state (%d) in multi-quant encoding.", 
+	  errorHandler((char*)"Invalid state (%d) in multi-quant encoding.", 
 		       coeffinfo[h][w].state);
       }
   }
@@ -1408,7 +1408,7 @@
 	mag_sign_encode_MQ(h,w);
       break;
     default:
-      errorHandler("Invalid type (%d) in multi-quant encoding.", zt_type);     
+      errorHandler((char*)"Invalid type (%d) in multi-quant encoding.", zt_type);     
   }
 }
 
@@ -1613,7 +1613,7 @@
 	    mzte_ac_encode_symbol(&ace,acm_type[l][CONTEXT_LZTR_D],czt_type);
 	    break;
 	  default:
-	    errorHandler("Invalid state (%d) in multi-quant encoding.", 
+	    errorHandler((char*)"Invalid state (%d) in multi-quant encoding.", 
 			 coeffinfo[h][w].state);
 	}
     }
@@ -1652,7 +1652,7 @@
 	  mag_sign_encode_MQ(h,w);
 	break;
       default:
-	errorHandler("Invalid type in multi quant decoding.");     
+	errorHandler((char*)"Invalid type in multi quant decoding.");     
     }
   }
 
@@ -1957,7 +1957,7 @@
 /* ph, 11/13/98 - added color argument for band-by-band */
 Void CVTCEncoder::close_arith_encoder_model(Int color, Int mode)
 {
-  noteProgress("  ==>E packet [TU_%d,TU_%d], l=%d bits",TU_first,TU_last,
+  noteProgress((char*)"  ==>E packet [TU_%d,TU_%d], l=%d bits",TU_first,TU_last,
 	       packet_size+ace.bitCount+ace.followBits);
 
   if(mzte_codec.m_iScanDirection == 0)
@@ -2043,7 +2043,7 @@
 
   if(packet_size+ace.bitCount+ace.followBits>=
 	  mzte_codec.m_usPacketThresh){
-    noteProgress("  ==>E packet [TU_%d,TU_%d], l=%d bits",TU_first,TU_last,
+    noteProgress((char*)"  ==>E packet [TU_%d,TU_%d], l=%d bits",TU_first,TU_last,
 		 packet_size+ace.bitCount+ace.followBits);
     
     for (i=0; i<numBP; i++) 
