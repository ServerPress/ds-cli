# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=portfile:et:sw=4:ts=4:sts=4
# $Id: Portfile 142000 2015-11-01 20:20:12Z g5pw@macports.org $

PortSystem          1.0
PortGroup           active_variants 1.1
PortGroup           compiler_blacklist_versions 1.0

name                rust
version             1.4.0
categories          lang devel
platforms           darwin
supported_archs     i386 x86_64
# https://github.com/mozilla/rust/issues/2024
universal_variant   no
license             {MIT Apache-2} BSD zlib NCSA Permissive
maintainers         g5pw

description         A safe, concurrent, practical language
long_description    Rust is a curly-brace, block-structured expression \
                    language. It visually resembles the C language \
                    family, but differs significantly in syntactic and \
                    semantic details. Its design is oriented toward \
                    concerns of \"programming in the large\", that is, of \
                    creating and maintaining boundaries -- both abstract \
                    and operational -- that preserve large-system \
                    integrity, availability and concurrency.
homepage            http://www.rust-lang.org/

pre-fetch {
    if {${os.platform} eq "darwin" && ${os.major} < 11} {
        ui_error "${name} is only supported on OS X 10.7 Lion or later."
        return -code error "unsupported platform version"
    }
}

# To take advantage of distfile mirroring and checksumming for the
# snapshot compiler, we let base treat it as the distfile and deal with
# the actual Rust source "manually".

# Download the snapshot compiler; see src/snapshots.txt in the Rust
# distribution.
master_sites            https://static.rust-lang.org/dist/:main \
                        https://static.rust-lang.org/stage0-snapshots/:snap

distfiles               ${name}c-${version}-src${extract.suffix}:main
worksrcdir              ${name}c-${version}

checksums               ${name}c-${version}-src${extract.suffix} \
                            rmd160  e778fb0dc4b671fc472571595494339c28a32924 \
                            sha256  1c0dfdce5c85d8098fcebb9adf1493847ab40c1dfaa8cc997af09b2ef0aa8211 \

# stage0 is found from
# https://github.com/rust-lang/rust/blob/${version}/src/snapshots.txt
set stage0(distdir)     rust-stage0
set stage0(date)        2015-08-11
set stage0(rev)         1af31d4
set stage0(platform)    macos-${configure.build_arch}
set stage0(hash)        [expr {${configure.build_arch} eq "i386" ?
                                "29750870c82a0347f8b8b735a4e2e0da26f5098d" :
                                "c9f2c588238b4c6998190c3abeb33fd6164099a2"}]

set stage0_name         [join "rust stage0 ${stage0(date)}
                                           ${stage0(rev)}
                                           ${stage0(platform)}
                                           ${stage0(hash)}" -].tar.bz2

distfiles-append        ${stage0_name}:snap

switch ${configure.build_arch} {
    i386    {checksums-append   ${stage0_name} \
                            rmd160  36706a7a85edfccb86bbf44d752e72aa59b69f51 \
                            sha256  c3a17d9fab7499dd534f790769b14e760bc4c7df0e5cc7ec56cee101b0503e6a}
    default {checksums-append   ${stage0_name} \
                            rmd160  1df175e9d5cd5740b55a4ebc49d8cf0821014468 \
                            sha256  888c00595f0f3fe121afcdaf785d142d44d4226c2c5d3e84f5a8c0d867eb9070}
}

# Only use compilers supported by upstream
# (https://github.com/rust-lang/rust#building-from-source).
compiler.blacklist  {clang < 211} \
                    *dragonegg* \
                    gcc-3.3 {*gcc-4.[0-6]}

# Building the bundled LLVM requires Python 2.4-2.7. All supported
# OS X releases have 2.6. (Using MacPorts' LLVM ports fails either
# during build or during testing.)
depends_build           bin:perl:perl5 \
                        bin:python2.6:python27
depends_skip_archcheck  python27

# The libs for both targets link to libgcc and libstdc++.
if {[regexp {^macports-gcc-(\d+)\.(\d+)$} ${configure.compiler} \
                                            -> major minor]} {
    depends_lib-append      {path:lib/libstdc\\+\\+\\.6\\.dylib:libstdcxx}
    require_active_variants gcc${major}${minor} universal
    require_active_variants {path:lib/libstdc\\+\\+\\.6\\.dylib:libstdcxx} \
                                universal
}

# TODO: Test whether i386 machines can cross-compile for x86_64.
set tgts {i686-apple-darwin x86_64-apple-darwin}

# TODO: Trying to build a cross-compiler breaks Intel 64 builds as
# of 0.11.0. Worth fixing?
#
#configure.pre_args-append       --target=[join $tgts ,]

if {${configure.build_arch} eq "i386"} {
    configure.pre_args-append   --build=[lindex $tgts 0]
} else {
    configure.pre_args-append   --build=[lindex $tgts 1]
}
# We need to use "--enable-rpath" as of a0546de, otherwise the build
# produces improperly linked binaries.
# (https://github.com/rust-lang/rust/issues/11747)
# TODO: Build docs also, probably in a subport.
configure.args      --disable-docs \
                    --enable-local-rust \
                    --enable-rpath \
                    --local-rust-root=${workpath}/${stage0(distdir)}

build.type          gnu
build.args          VERBOSE=1 \
                    CC=${configure.cc} \
                    CXX=${configure.cxx} \
                    CPP="${configure.cc} -E"

# TODO: Add path-style dependency on python, whenever test dependencies
# are implemented (#38208). Not critical, since all supported versions
# of OS X come with Python 2.6.
test.run            yes
test.target         check
test.env            VERBOSE=1

destroot.args       VERBOSE=1
post-destroot {
    if {${subport} eq ${name}} {
        xinstall -d ${destroot}${prefix}/share/${name}
        xinstall -m 644 ${worksrcpath}/src/etc/ctags.rust \
            ${destroot}${prefix}/share/${name}
    }
}

livecheck.type      regex
livecheck.url       ${homepage}/install.html
livecheck.regex     {dist/rust-(\d\.\d)}

subport rust-src {
    # remove dependencies
    depends_build
    depends_lib

    description     Source code for the rust programming language
    long_description ${description}

    use_configure no

    build {}

    destroot {
        xinstall -d ${destroot}${prefix}/share/rust
        move ${worksrcpath}/src ${destroot}${prefix}/share/rust/src

        # correct the permissions
        system -W ${destroot}${prefix}/share/rust "find . -type d -exec chmod 755 {} \\;"
        system -W ${destroot}${prefix}/share/rust "find . -type f -exec chmod 644 {} \\;"

        # delete the test directories (which for some god awful reason contains binaries)
        system -W ${destroot}${prefix}/share/rust "find . -type d -name test -print0 | xargs -0 rm -rf"
    }
}
