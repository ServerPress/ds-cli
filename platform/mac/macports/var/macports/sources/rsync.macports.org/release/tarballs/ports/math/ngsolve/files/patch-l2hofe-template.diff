--- fem/l2hofe.cpp.orig	2014-05-31 11:21:29.000000000 -0500
+++ fem/l2hofe.cpp	2014-05-31 11:25:40.000000000 -0500
@@ -17,18 +17,18 @@
 
 
 
-  template <ELEMENT_TYPE ET, template <ELEMENT_TYPE ET> class SHAPES, class BASE>
+  template <ELEMENT_TYPE ET, template <ELEMENT_TYPE ET2> class SHAPES, class BASE>
   typename L2HighOrderFE<ET,SHAPES,BASE>::TPRECOMP L2HighOrderFE<ET,SHAPES,BASE>::precomp;
 
-  template <ELEMENT_TYPE ET, template <ELEMENT_TYPE ET> class SHAPES, class BASE>
+  template <ELEMENT_TYPE ET, template <ELEMENT_TYPE ET2> class SHAPES, class BASE>
   typename L2HighOrderFE<ET,SHAPES,BASE>::TPRECOMP_TRACE L2HighOrderFE<ET,SHAPES,BASE>::precomp_trace(320);
 
-  template <ELEMENT_TYPE ET, template <ELEMENT_TYPE ET> class SHAPES, class BASE>
+  template <ELEMENT_TYPE ET, template <ELEMENT_TYPE ET2> class SHAPES, class BASE>
   typename L2HighOrderFE<ET,SHAPES,BASE>::TPRECOMP_GRAD L2HighOrderFE<ET,SHAPES,BASE>::precomp_grad(40);
 
 
 
-  template <ELEMENT_TYPE ET, template <ELEMENT_TYPE ET> class SHAPES, class BASE>
+  template <ELEMENT_TYPE ET, template <ELEMENT_TYPE ET2> class SHAPES, class BASE>
   void L2HighOrderFE<ET,SHAPES,BASE> :: 
   PrecomputeTrace ()
   {
@@ -56,7 +56,7 @@
   }
   
   
-  template <ELEMENT_TYPE ET, template <ELEMENT_TYPE ET> class SHAPES, class BASE>
+  template <ELEMENT_TYPE ET, template <ELEMENT_TYPE ET2> class SHAPES, class BASE>
   void L2HighOrderFE<ET,SHAPES,BASE> :: 
   PrecomputeGrad ()
   {
@@ -72,7 +72,7 @@
     
 
 
-  template <ELEMENT_TYPE ET, template <ELEMENT_TYPE ET> class SHAPES, class BASE>
+  template <ELEMENT_TYPE ET, template <ELEMENT_TYPE ET2> class SHAPES, class BASE>
   void L2HighOrderFE<ET,SHAPES,BASE> :: 
   PrecomputeShapes (const IntegrationRule & ir) 
   {
@@ -95,7 +95,7 @@
   
 
 
-  template <ELEMENT_TYPE ET, template <ELEMENT_TYPE ET> class SHAPES, class BASE>
+  template <ELEMENT_TYPE ET, template <ELEMENT_TYPE ET2> class SHAPES, class BASE>
   void L2HighOrderFE<ET,SHAPES,BASE> :: 
   Evaluate (const IntegrationRule & ir, FlatVector<double> coefs, FlatVector<double> vals) const
   {
@@ -108,7 +108,7 @@
   }
 
 
-  template <ELEMENT_TYPE ET, template <ELEMENT_TYPE ET> class SHAPES, class BASE>
+  template <ELEMENT_TYPE ET, template <ELEMENT_TYPE ET2> class SHAPES, class BASE>
   void L2HighOrderFE<ET,SHAPES,BASE> :: 
   EvaluateTrans (const IntegrationRule & ir, FlatVector<> values, FlatVector<> coefs) const
   {
@@ -128,7 +128,7 @@
 
 
 
-  template <ELEMENT_TYPE ET, template <ELEMENT_TYPE ET> class SHAPES, class BASE>
+  template <ELEMENT_TYPE ET, template <ELEMENT_TYPE ET2> class SHAPES, class BASE>
   void L2HighOrderFE<ET,SHAPES,BASE> :: 
   EvaluateGrad (const IntegrationRule & ir, FlatVector<> coefs, FlatMatrixFixWidth<DIM> values) const
     {
@@ -145,7 +145,7 @@
     }
 
 
-  template <ELEMENT_TYPE ET, template <ELEMENT_TYPE ET> class SHAPES, class BASE>
+  template <ELEMENT_TYPE ET, template <ELEMENT_TYPE ET2> class SHAPES, class BASE>
   void L2HighOrderFE<ET,SHAPES,BASE> :: 
   EvaluateGradTrans (const IntegrationRule & ir, FlatMatrixFixWidth<DIM> values, FlatVector<> coefs) const
     {
@@ -163,7 +163,7 @@
 
 
 
-  template <ELEMENT_TYPE ET, template <ELEMENT_TYPE ET> class SHAPES, class BASE>
+  template <ELEMENT_TYPE ET, template <ELEMENT_TYPE ET2> class SHAPES, class BASE>
   void L2HighOrderFE<ET,SHAPES,BASE> :: 
   GetGradient (FlatVector<> coefs, FlatMatrixFixWidth<DIM> grad) const
   {
@@ -179,7 +179,7 @@
       DGFiniteElement<DIM>::GetGradient (coefs, grad);
   }
   
-  template <ELEMENT_TYPE ET, template <ELEMENT_TYPE ET> class SHAPES, class BASE>
+  template <ELEMENT_TYPE ET, template <ELEMENT_TYPE ET2> class SHAPES, class BASE>
   void L2HighOrderFE<ET,SHAPES,BASE> :: 
   GetGradientTrans (FlatMatrixFixWidth<DIM> grad, FlatVector<> coefs) const
   {
@@ -203,7 +203,7 @@
 
 
 
-  template <ELEMENT_TYPE ET, template <ELEMENT_TYPE ET> class SHAPES, class BASE>
+  template <ELEMENT_TYPE ET, template <ELEMENT_TYPE ET2> class SHAPES, class BASE>
   void L2HighOrderFE<ET,SHAPES,BASE> :: 
   GetTrace (int facet, FlatVector<> coefs, FlatVector<> fcoefs) const
     {
@@ -218,7 +218,7 @@
 	DGFiniteElement<DIM>::GetTrace (facet, coefs, fcoefs);
     }
 
-  template <ELEMENT_TYPE ET, template <ELEMENT_TYPE ET> class SHAPES, class BASE>
+  template <ELEMENT_TYPE ET, template <ELEMENT_TYPE ET2> class SHAPES, class BASE>
   void L2HighOrderFE<ET,SHAPES,BASE> :: 
   GetTraceTrans (int facet, FlatVector<> fcoefs, FlatVector<> coefs) const
   {
@@ -232,7 +232,7 @@
     }
 
 
-  template <ELEMENT_TYPE ET, template <ELEMENT_TYPE ET> class SHAPES, class BASE>
+  template <ELEMENT_TYPE ET, template <ELEMENT_TYPE ET2> class SHAPES, class BASE>
   void L2HighOrderFE<ET,SHAPES,BASE> :: 
   GetDiagMassMatrix (FlatVector<> mass) const
   {
