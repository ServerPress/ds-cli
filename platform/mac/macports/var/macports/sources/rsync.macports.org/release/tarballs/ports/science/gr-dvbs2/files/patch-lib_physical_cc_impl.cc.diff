--- lib/physical_cc_impl.cc.orig	2015-01-22 11:12:27.000000000 -0500
+++ lib/physical_cc_impl.cc	2015-01-22 11:18:44.000000000 -0500
@@ -69,25 +69,25 @@
         }
         gold_code = goldcode;
 
-        m_bpsk[0][0].real() = (r0 * cos(M_PI / 4.0));
-        m_bpsk[0][0].imag() = (r0 * sin(M_PI / 4.0));
-        m_bpsk[0][1].real() = (r0 * cos(5.0 * M_PI / 4.0));
-        m_bpsk[0][1].imag() = (r0 * sin(5.0 * M_PI / 4.0));
-        m_bpsk[1][0].real() = (r0 * cos(5.0 * M_PI / 4.0));
-        m_bpsk[1][0].imag() = (r0 * sin(M_PI / 4.0));
-        m_bpsk[1][1].real() = (r0 * cos(M_PI / 4.0));
-        m_bpsk[1][1].imag() = (r0 * sin(5.0 * M_PI /4.0));
-        m_bpsk[2][0].real() = (r0 * cos(5.0 * M_PI / 4.0));
-        m_bpsk[2][0].imag() = (r0 * sin(M_PI / 4.0));
-        m_bpsk[2][1].real() = (r0 * cos(M_PI / 4.0));
-        m_bpsk[2][1].imag() = (r0 * sin(5.0 * M_PI /4.0));
-        m_bpsk[3][0].real() = (r0 * cos(5.0 * M_PI / 4.0));
-        m_bpsk[3][0].imag() = (r0 * sin(5.0 * M_PI / 4.0));
-        m_bpsk[3][1].real() = (r0 * cos(M_PI / 4.0));
-        m_bpsk[3][1].imag() = (r0 * sin(M_PI / 4.0));
+        m_bpsk[0][0] = gr_complex((r0 * cos(1.0 * M_PI / 4.0)),
+				  (r0 * sin(1.0 * M_PI / 4.0)));
+        m_bpsk[0][1] = gr_complex((r0 * cos(5.0 * M_PI / 4.0)),
+				  (r0 * sin(5.0 * M_PI / 4.0)));
+	m_bpsk[1][0] = gr_complex((r0 * cos(5.0 * M_PI / 4.0)),
+				  (r0 * sin(1.0 * M_PI / 4.0)));
+	m_bpsk[1][1] = gr_complex((r0 * cos(1.0 * M_PI / 4.0)),
+				  (r0 * sin(5.0 * M_PI / 4.0)));
+	m_bpsk[2][0] = gr_complex((r0 * cos(5.0 * M_PI / 4.0)),
+				  (r0 * sin(1.0 * M_PI / 4.0)));
+	m_bpsk[2][1] = gr_complex((r0 * cos(1.0 * M_PI / 4.0)),
+				  (r0 * sin(5.0 * M_PI / 4.0)));
+	m_bpsk[3][0] = gr_complex((r0 * cos(5.0 * M_PI / 4.0)),
+				  (r0 * sin(5.0 * M_PI / 4.0)));
+	m_bpsk[3][1] = gr_complex((r0 * cos(1.0 * M_PI / 4.0)),
+				  (r0 * sin(1.0 * M_PI / 4.0)));
 
-        m_zero[0].real() = 0.0;    /* used for zero stuffing interpolation */
-        m_zero[0].imag() = 0.0;
+        m_zero[0] = gr_complex(0.0,    /* used for zero stuffing interpolation */
+			       0.0);
 
         // Mode and code rate
         if (constellation == gr::dvbs2::MOD_QPSK)
@@ -692,20 +692,16 @@
                     switch (m_cscram[n++])
                     {
                         case 0:
-                            tempout.real() =  tempin.real();
-                            tempout.imag() =  tempin.imag();
+			  tempout = tempin;
                             break;
                         case 1:
-                            tempout.real() = -tempin.imag();
-                            tempout.imag() =  tempin.real();
+			  tempout = gr_complex(-tempin.imag(), tempin.real());
                             break;
                         case 2:
-                            tempout.real() = -tempin.real();
-                            tempout.imag() = -tempin.imag();
+			  tempout = -tempin;
                             break;
                         case 3:
-                            tempout.real() =  tempin.imag();
-                            tempout.imag() = -tempin.real();
+			  tempout = gr_complex(tempin.imag(), -tempin.real());
                             break;
                     }
                     out[produced++] = tempout;
@@ -723,20 +719,16 @@
                             switch (m_cscram[n++])
                             {
                                 case 0:
-                                    tempout.real() =  tempin.real();
-                                    tempout.imag() =  tempin.imag();
+				  tempout = tempin;
                                     break;
                                 case 1:
-                                    tempout.real() = -tempin.imag();
-                                    tempout.imag() =  tempin.real();
+				  tempout = gr_complex(-tempin.imag(), tempin.real());
                                     break;
                                 case 2:
-                                    tempout.real() = -tempin.real();
-                                    tempout.imag() = -tempin.imag();
+				  tempout = -tempin;
                                     break;
                                 case 03:
-                                    tempout.real() =  tempin.imag();
-                                    tempout.imag() = -tempin.real();
+				  tempout = gr_complex(tempin.imag(), -tempin.real());
                                     break;
                             }
                             out[produced++] = tempout;
