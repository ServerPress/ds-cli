# $Id: Portfile 114325 2013-12-05 09:20:31Z ryandesign@macports.org $

PortSystem			1.0

name            	i960-rtems-gcc
version         	3.2.3
revision			1

# Parameters for this port.
set newlibversion	1.11.0
set crossgcc-target i960-rtems

description     	gcc cross-compilers for i960-rtems, with newlib runtime library.
long_description	gnu compilers collection (c, c++, fortran and objc) for \
					i960-rtems cross development (Intel i960 family).
homepage			http://gcc.gnu.org/
platforms       	darwin
categories      	cross devel
license         	GPL-2+
maintainers     	nomaintainer
master_sites		gnu:gcc/gcc-${version}/:gcc \
					ftp://sources.redhat.com/pub/newlib/:newlib \
					ftp://ftp.mirror.ac.uk/sites/sources.redhat.com/pub/newlib/:newlib \
					ftp://ftp.rtems.com/pub/rtems/snapshots/c_tools/source/:rtems \
					http://rtems.thehousleys.net/:rtems
distfiles			gcc-${version}.tar.gz:gcc \
					newlib-${newlibversion}.tar.gz:newlib \
					gcc-${version}-rtems-20030507a.diff:rtems \
					newlib-${newlibversion}-rtems-20030605.diff:rtems
extract.only		gcc-${version}.tar.gz newlib-${newlibversion}.tar.gz
worksrcdir			gcc-${version}
checksums			gcc-${version}.tar.gz md5 e951123b2dfd2288c3e9337024dc9e4c \
					newlib-${newlibversion}.tar.gz md5 74de7de0c9624cd757df63f2ed17a9b4 \
					gcc-${version}-rtems-20030507a.diff md5 d4adda8ccba7ad57ee36b7720eadf19c \
					newlib-${newlibversion}-rtems-20030605.diff md5 b1dfdabd92e241d835964c6ef86aa3c9

# All cross ports violate the mtree layout.
destroot.violate_mtree	yes

# Download everything to gcc/
dist_subdir			gcc

# Patches for info's dir.
patchfiles			patch-gcc-Makefile.in \
					patch-gcc-f-Make-lang.in

depends_lib			port:${crossgcc-target}-binutils \
					port:gettext

# Link newlib to gcc, so gcc will find its include files and this will also build newlib.
post-extract	{
	system "ln -s ${workpath}/newlib-${newlibversion}/newlib ${workpath}/gcc-${version}"
}

# Build in a different directory, as advised in the README file.
pre-configure   { system "cd ${workpath} && mkdir -p build"}
configure.dir   ${workpath}/build
configure.cmd   ${workpath}/gcc-${version}/configure
configure.args  --infodir='${prefix}/share/info' \
				--mandir='${prefix}/share/man' \
				--target=${crossgcc-target} \
				--program-prefix=${crossgcc-target}- \
				--program-suffix=-${version} \
				--enable-obsolete \
				--enable-languages="c,c++,f77,objc" \
				--without-included-gettext \
				--with-gnu-as --with-gnu-ld \
				--with-newlib \
				--with-gxx-include-dir=${prefix}/${crossgcc-target}/include/c++/${version}/
build.dir       ${workpath}/build
destroot.args	\
	--with-gxx-include-dir=${destroot}${prefix}/${crossgcc-target}/include/c++/${version}/

# Since we don't build gcc and binutils at the same time, gcc's Makefile will try to transform
# program names as gcc's name (add -${version} with ${version} being the version of gcc).
# But it won't work because binutils binaries don't have the ${version} suffix, and even if they
# had, they would actually have the binutils' version suffix (and not gcc's version).
# So let's tell gcc's Makefile not to do that mistake.

build.args		AR_FOR_TARGET=${crossgcc-target}-ar \
				AS_FOR_TARGET=${crossgcc-target}-as \
				LD_FOR_TARGET=${crossgcc-target}-ld \
				NM_FOR_TARGET=${crossgcc-target}-nm \
				RANLIB_FOR_TARGET=${crossgcc-target}-ranlib

destroot.args	AR_FOR_TARGET=${crossgcc-target}-ar \
				AS_FOR_TARGET=${crossgcc-target}-as \
				LD_FOR_TARGET=${crossgcc-target}-ld \
				NM_FOR_TARGET=${crossgcc-target}-nm \
				RANLIB_FOR_TARGET=${crossgcc-target}-ranlib

pre-patch {
	# Additional patches for rtems.
	system "cd ${workpath}/gcc-${version} && \
		patch -p1 < ${distpath}/gcc-${version}-rtems-20030507a.diff"
	system "cd ${workpath}/newlib-${newlibversion} && \
		patch -p1 < ${distpath}/newlib-${newlibversion}-rtems-20030605.diff"
}

post-patch {
	namespace eval crossgcc {}

	# Fix the info pages and related stuff.
	#
	# path: path to the doc directory (e.g. gas/doc/)
	# makefile: path to Makefile.in (e.g. gas/doc/Makefile.in)
	# name: name of the info page (e.g. as)
	# suffix: suffix of the souce page (texinfo or texi)
	proc crossgcc::fixinfo { path makefile name suffix } {
		global crossgcc-target worksrcpath

		# Fix the source
		reinplace "s|setfilename ${name}.info|setfilename ${crossgcc-target}-${name}.info|g" \
			${worksrcpath}/${path}/${name}.${suffix}
		reinplace "s|(${name})|(${crossgcc-target}-${name})|g" \
			${worksrcpath}/${path}/${name}.${suffix}
		reinplace "s|@file{${name}}|@file{${crossgcc-target}-${name}}|g" \
			${worksrcpath}/${path}/${name}.${suffix}
		
		# Fix the Makefile
		reinplace "s|${name}.info|${crossgcc-target}-${name}.info|g" \
			${worksrcpath}/${makefile}
		reinplace "s|${name}.${suffix}|${crossgcc-target}-${name}.${suffix}|g" \
			${worksrcpath}/${makefile}
		
		# Rename the source
		file rename ${worksrcpath}/${path}/${name}.${suffix} \
			${worksrcpath}/${path}/${crossgcc-target}-${name}.${suffix}
		
		# Fix install-info's dir.
		# (note: this may be effectless if there was no info dir to be fixed)
		reinplace "s|__TARGET|${crossgcc-target}|g" \
			"${worksrcpath}/${makefile}"
	}

	# Fix the gettext files and related stuff.
	#
	# module: name of the module (e.g. gas)
	proc crossgcc::fixgettext { module } {
		global crossgcc-target worksrcpath

		if { [ file exists "${worksrcpath}/${module}/Makefile.in" ] } {
			reinplace "s|@PACKAGE@|${crossgcc-target}-@PACKAGE@|g" \
				"${worksrcpath}/${module}/Makefile.in"
		}
		if { [ file exists "${worksrcpath}/${module}/doc/Makefile.in" ] } {
			reinplace "s|@PACKAGE@|${crossgcc-target}-@PACKAGE@|g" \
				"${worksrcpath}/${module}/doc/Makefile.in"
		}
		if { [ file exists "${worksrcpath}/${module}/po/Make-in" ] } {
			reinplace "s|@PACKAGE@|${crossgcc-target}-@PACKAGE@|g" \
				"${worksrcpath}/${module}/po/Make-in"
		}
	}

	# gcc/doc/cpp.texi
	crossgcc::fixinfo gcc/doc/ gcc/Makefile.in cpp texi

	# gcc/doc/cppinternals.texi
	crossgcc::fixinfo gcc/doc/ gcc/Makefile.in cppinternals texi

	# gcc/doc/gcc.texi
	crossgcc::fixinfo gcc/doc/ gcc/Makefile.in gcc texi

	# gcc/doc/gccint.texi
	crossgcc::fixinfo gcc/doc/ gcc/Makefile.in gccint texi

	# gcc/f/g77.texi
	crossgcc::fixinfo gcc/f/ gcc/f/Make-lang.in g77 texi

	# gettext stuff.
	crossgcc::fixgettext gcc
}

post-destroot {
	# Stuff I don't want (either because they're in the system
	# or because they would conflict with other FSF ports)
	# (it's easier for maintainability purposes to fix things here)

	# aliases for locales (should be on the system)
	file delete "${destroot}${prefix}/share/locale/locale.alias"
	
	# FSF propaganda (should already be there or would conflict)
	file delete -force "${destroot}${prefix}/share/man/man7"

	# (host) libiberty
	foreach f [glob -directory "${destroot}${prefix}/lib" libiberty.a */libiberty.a] {
        file delete $f
    }

	# aliases for charsets (should already be there)
	file delete "${destroot}${prefix}/lib/charset.alias"
	
	# For some reason, some man pages are not prefixed while they should have been
	# (to avoid conflicting).
	file rename "${destroot}${prefix}/share/man/man1/cpp.1" \
		"${destroot}${prefix}/share/man/man1/${crossgcc-target}-cpp.1"
	file rename "${destroot}${prefix}/share/man/man1/gcov.1" \
		"${destroot}${prefix}/share/man/man1/${crossgcc-target}-gcov.1"
}

# This target has been abandonned upstream.
pre-fetch {
	if {${os.platform} eq "darwin" && [vercmp 9.0 ${os.version}] < 0} {
		error "This port does not build on darwin 9+ (Mac OS X 10.5+) and it has been abandonned upstream."
	}
}

# livecheck.type	regex
# livecheck.url	http://gcc.gnu.org/releases.html
# livecheck.regex	{<tr><td><a href="gcc-.*/">GCC (.*)</a></td>   <td>.*</td></tr>}
