--- src/java/org/dom4j/dom/DOMAttribute.java.orig	2009-11-28 15:03:09.000000000 +0100
+++ src/java/org/dom4j/dom/DOMAttribute.java	2009-11-28 17:57:22.000000000 +0100
@@ -15,6 +15,7 @@
 import org.w3c.dom.Document;
 import org.w3c.dom.NamedNodeMap;
 import org.w3c.dom.NodeList;
+import org.w3c.dom.TypeInfo;
 
 /**
  * <p>
@@ -179,6 +180,14 @@
     public org.w3c.dom.Element getOwnerElement() {
         return DOMNodeHelper.asDOMElement(getParent());
     }
+
+    public boolean isId() throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
+
+    public TypeInfo getSchemaTypeInfo() throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
 }
 
 /*
--- src/java/org/dom4j/dom/DOMDocument.java.orig	2009-11-28 15:03:09.000000000 +0100
+++ src/java/org/dom4j/dom/DOMDocument.java	2009-11-28 18:11:18.000000000 +0100
@@ -15,10 +15,12 @@
 
 import org.w3c.dom.Attr;
 import org.w3c.dom.CDATASection;
+import org.w3c.dom.DOMConfiguration;
 import org.w3c.dom.DOMException;
 import org.w3c.dom.Document;
 import org.w3c.dom.EntityReference;
 import org.w3c.dom.NamedNodeMap;
+import org.w3c.dom.Node;
 import org.w3c.dom.NodeList;
 import org.w3c.dom.ProcessingInstruction;
 
@@ -301,6 +303,85 @@
             return super.getDocumentFactory();
         }
     }
+
+    public Node renameNode(Node n, String namespaceURI, String qualifiedName)
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
+
+    public void normalizeDocument()
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
+
+    public DOMConfiguration getDomConfig()
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
+
+    public Node adoptNode(Node source) throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
+
+    public void setDocumentURI(String documentURI)
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
+
+    public String getDocumentURI()
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
+
+    public void setStrictErrorChecking(boolean strictErrorChecking)
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
+
+    public boolean getStrictErrorChecking()
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
+
+    public void setXmlVersion(String xmlVersion)
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
+
+    public String getXmlVersion()
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
+
+    public void setXmlStandalone(boolean xmlStandalone)
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
+
+    public boolean getXmlStandalone()
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
+
+    public void setXmlEncoding(String xmlEncoding)
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
+
+    public String getXmlEncoding()
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
+
+    public void setInputEncoding(String xmlEncoding)
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
+
+    public String getInputEncoding()
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
 }
 
 /*
--- src/java/org/dom4j/dom/DOMDocumentFactory.java.orig	2009-11-28 15:03:09.000000000 +0100
+++ src/java/org/dom4j/dom/DOMDocumentFactory.java	2009-11-28 17:51:19.000000000 +0100
@@ -174,6 +174,11 @@
                     docType.getPublicId(), docType.getSystemId());
         }
     }
+
+    public Object getFeature(String feature, String version)
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
 }
 
 
--- src/java/org/dom4j/dom/DOMElement.java.orig	2009-11-28 15:03:09.000000000 +0100
+++ src/java/org/dom4j/dom/DOMElement.java	2009-11-28 17:39:51.000000000 +0100
@@ -16,11 +16,13 @@
 import org.dom4j.QName;
 import org.dom4j.tree.DefaultElement;
 
+import org.w3c.dom.Attr;
 import org.w3c.dom.DOMException;
 import org.w3c.dom.Document;
 import org.w3c.dom.NamedNodeMap;
 import org.w3c.dom.Node;
 import org.w3c.dom.NodeList;
+import org.w3c.dom.TypeInfo;
 
 /**
  * <p>
@@ -389,6 +391,25 @@
 
         return getDocumentFactory().createQName(localName, prefix, namespace);
     }
+
+    public void setIdAttributeNode(Attr idAttr, boolean isId)
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
+
+    public void setIdAttributeNS(String namespaceURI, String localName,
+            boolean isId) throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
+
+    public void setIdAttribute(String localName, boolean isId)
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
+
+    public TypeInfo getSchemaTypeInfo() throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
 }
 
 /*
--- src/java/org/dom4j/tree/AbstractCharacterData.java.orig	2005-05-16 15:28:39.000000000 +0200
+++ src/java/org/dom4j/tree/AbstractCharacterData.java	2009-11-28 17:55:18.000000000 +0100
@@ -10,6 +10,8 @@
 import org.dom4j.CharacterData;
 import org.dom4j.Element;
 
+import org.w3c.dom.Text;
+
 /**
  * <p>
  * <code>AbstractCharacterData</code> is an abstract base class for tree
@@ -41,6 +43,21 @@
     public void appendText(String text) {
         setText(getText() + text);
     }
+    
+    public Text replaceWholeText(String content)
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
+
+    public String getWholeText()
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
+
+    public boolean isElementContentWhitespace()
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
 }
 
 /*
--- src/java/org/dom4j/tree/AbstractNode.java.orig	2009-11-28 17:38:46.000000000 +0100
+++ src/java/org/dom4j/tree/AbstractNode.java	2009-11-28 18:01:53.000000000 +0100
@@ -20,6 +20,8 @@
 import org.dom4j.XPath;
 import org.dom4j.rule.Pattern;
 
+import org.w3c.dom.UserDataHandler;
+
 /**
  * <p>
  * <code>AbstractNode</code> is an abstract base class for tree implementors
@@ -231,6 +233,66 @@
         throw new RuntimeException("asXPathResult() not yet implemented fully "
                 + "for: " + this);
     }
+
+    public Object getUserData(String key)
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
+
+    public Object setUserData(String key, Object data, UserDataHandler handler)
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
+
+    public boolean isEqualNode(org.w3c.dom.Node arg)
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
+
+    public boolean isDefaultNamespace(String namespaceURI)
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
+    
+    public Object getFeature(String feature, String version)
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
+    
+    public String lookupNamespaceURI(String prefix)
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
+
+    public String lookupPrefix(String namespaceURI)
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
+    
+    public boolean isSameNode(org.w3c.dom.Node arg)
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
+    
+    public void setTextContent(String textContent)
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
+    
+    public String getTextContent()
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
+    
+    public short compareDocumentPosition(org.w3c.dom.Node other)
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
+    
+    public String getBaseURI()
+            throws UnsupportedOperationException {
+        throw new UnsupportedOperationException();
+    }
 }
 
 /*
