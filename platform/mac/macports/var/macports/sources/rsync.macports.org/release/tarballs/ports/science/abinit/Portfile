# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id: Portfile 143272 2015-12-09 19:12:22Z dstrubbe@macports.org $

PortSystem          1.0
PortGroup           mpi 1.0

name                abinit
version             7.10.5
revision            2
categories          science
platforms           darwin
license             GPL-3
maintainers         gmail.com:cram5431 \
                    openmaintainer

description         Full-featured atomic-scale first-principles simulation software

long_description    ABINIT is a package whose main program allows one to find the total energy, \
                    charge density and electronic structure of systems made of electrons and nuclei \
                    (molecules and periodic solids) within Density Functional Theory (DFT), \
                    using pseudopotentials and a planewave or wavelet basis. \
                    ABINIT also includes options to optimize the geometry according to the DFT forces \
                    and stresses, or to perform molecular dynamics simulations using these forces, \
                    or to generate dynamical matrices, Born effective charges, and dielectric tensors, \
                    based on Density-Functional Perturbation Theory, and many more properties. \
                    Excited states can be computed within the Many-Body Perturbation Theory \
                    (the GW approximation and the Bethe-Salpeter equation), and \
                    Time-Dependent Density Functional Theory (for molecules). \
                    In addition to the main ABINIT code, different utility programs are provided. \
                    ABINIT is a project that favours development and collaboration.

homepage            http://www.abinit.org
master_sites        http://ftp.abinit.org/

checksums           rmd160  f77a9db5bcd97bcc46ea11a96bbf8f17cb1a19b3 \
                    sha256  e9376a3e34790bce90992f28e5fa8554b51ba467bf5709c7fd25d300e7c4f56a

# or vecLibFort, or OpenBLAS(-devel)
depends_lib-append  port:atlas

compilers.choose    cc fc
# g95 is not compatible with OpenMP
mpi.setup           default require_fortran -g95

configure.args-append  --with-linalg-flavor="atlas" --enable-gw-dpc --enable-fox
configure.optflags  -O3

use_parallel_build  yes

# We do not need to use ABINIT's own approach to parallel builds, which only is relevant if
# the "fallbacks" are used, namely if we asked for etsf_io, libxc, wannier90, etc. support
# but did not provide the libraries. That situation should never happen for this port.
#build.target        multi multi_nprocs=4

default_variants +etsf_io +libxc
# Do not put +wannier90 since tests fail for wannier90 use.

pre-configure {
    if {[fortran_variant_name] eq "g95"} {
        configure.fcflags-append -ffree-line-length-huge
        if {[variant_isset threads]} {
            ui_error "You can select only one of +g95 and +threads."
            return -code error "+g95 and +threads are not compatible since g95 does not support OpenMP."
        }
    } else {
        configure.fcflags-append -ffree-line-length-none
    }

    if { [variant_isset etsf_io] } {
            configure.args-append  --with-trio-flavor="netcdf+etsf_io"
        } elseif { [variant_isset netcdf] } {
            configure.args-append  --with-trio-flavor="netcdf"
        } else {
            configure.args-append  --with-trio-flavor="none"
    }

    set dft-flavor "none"
    if { [variant_isset libxc] } {
        if { ${dft-flavor} eq "none" } {
            set dft-flavor libxc
        } else {
            set dft-flavor ${dft-flavor}+libxc
        }
    }
    if { [variant_isset wannier90] } {
        if { ${dft-flavor} eq "none" } {
            set dft-flavor wannier90
        } else {
            set dft-flavor ${dft-flavor}+wannier90
        }
    }
    if { [variant_isset bigdft] } {
        if { ${dft-flavor} eq "none" } {
            set dft-flavor bigdft
        } else {
            set dft-flavor ${dft-flavor}+bigdft
        }
    }
    if { [variant_isset atompaw] } {
        if { ${dft-flavor} eq "none" } {
            set dft-flavor atompaw
        } else {
            set dft-flavor ${dft-flavor}+atompaw
        }
    }
    configure.args-append  --with-dft-flavor="${dft-flavor}"
}

destroot {
    xinstall -W ${worksrcpath}/src/98_main \
     abinit aim anaddb band2eps bsepostproc conducti cut3d \
     fftprof ioprof kss2wfk lapackprof macroave mrgddb \
     mrggkk mrgscr optic ujdet vdw_kernelgen \
     ${destroot}${prefix}/bin
    if { [variant_isset atompaw] } {
        xinstall -W ${worksrcpath}/fallbacks/exports/bin \
         atompaw-abinit ${destroot}${prefix}/bin
    }
}

#universal variant not allowed for libxc/etsf_io
universal_variant   no

test.run            yes
test.cmd            tests/runtests.py
test.target         built-in fast
# wannier90 test will probably fail.

pre-configure {
    configure.args-append  FCCPP="${configure.cc} -E -ansi"
    if {[mpi_variant_isset]} {
        configure.args-append  MPI_RUNNER=${mpi.exec}
        test.env-append        MPIEXEC=${mpi.exec}
        configure.args-append  --enable-mpi="yes" --enable-mpi-io="yes"
    } else {
        configure.args-append  --enable-mpi="no"
    }
}

variant fftw3 description {Build with support for fftw-3 FFT library} {
    depends_lib-append      port:fftw-3 port:fftw-3-single
    compilers.enforce_some_fortran fftw-3 fftw-3-single
    
    if { [variant_isset threads] } {
        configure.args-append   --with-fft-flavor="fftw3-threads"
        configure.args-append   --with-fft-libs="-lfftw3_threads -lfftw3 -lfftw3f"
    } else {
        configure.args-append   --with-fft-flavor="fftw3"
        configure.args-append   --with-fft-libs="-lfftw3 -lfftw3f"
    }
}

variant threads description {Build with support for OpenMP threads} {
    # not compatible with g95. What about threaded FFTW3?
    configure.args-append   --enable-openmp
    configure.fcflags-append -fopenmp
    configure.args-append   --with-linalg-libs="-L${prefix}/lib -ltatlas"
    configure.args-append   --with-linalg-incs="-I${prefix}/include"
}

variant netcdf description {Build with support for NetCDF transferable I/O} {
    depends_lib-append      port:netcdf-fortran
    compilers.enforce_fortran netcdf-fortran
    configure.args-append   --with-netcdf-incs="-I${prefix}/include"
    configure.args-append   --with-netcdf-libs="-L${prefix}/lib -lnetcdf -lnetcdff"
}

variant etsf_io requires netcdf description {Build with support for ETSF_IO transferable I/O} {
    depends_lib-append      port:etsf_io
    compilers.enforce_fortran etsf_io
    configure.args-append   --with-etsf-io-incs="-I${prefix}/include/gcc"
}

variant libxc description {Build with support for libXC exchange-correlation library} {
    depends_lib-append      port:libxc
    compilers.enforce_fortran libxc
    configure.args-append   --with-libxc-incs="-I${prefix}/include"
}

variant wannier90 description {Build with support for Wannier90} {
    depends_lib-append      port:wannier90
}

# FIXME: the code's build system will download BigDFT itself, which is contrary to the
# way MacPorts should work. Make a bigdft port to support this.
# There is an error compiling anyway, which could be fixed with a patch,
# but it is unpatchable since the download occurs after the patch phase.

#variant bigdft description {Build with support for the wavelet BigDFT library} {
    # avoid this error (and equivalent with OpenCL)
    # :info:build ar cru libCUDA.a  
    # :info:build ar: no archive members specified
#    patchfiles-append       patch-fallbacks-sources-bigdft-1.7.0.93-src-Makefile.in.diff
#}

# FIXME: same problem as for BigDFT, it gets downloaded. Make a separate port.
#variant atompaw description {Build including AtomPAW atomic dataset generator} {
#}
 
livecheck.type      regex
livecheck.url       ${homepage}/downloads/abinit-packages
livecheck.regex     ABINIT v (\[0-9.\]+)
