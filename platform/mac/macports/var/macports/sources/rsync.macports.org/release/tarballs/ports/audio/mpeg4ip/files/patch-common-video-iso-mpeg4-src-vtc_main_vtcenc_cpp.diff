--- common/video/iso-mpeg4/src/vtc_main_vtcenc.cpp.orig	2005-05-04 13:56:00.000000000 -0600
+++ common/video/iso-mpeg4/src/vtc_main_vtcenc.cpp	2009-11-19 02:54:25.000000000 -0700
@@ -379,7 +379,7 @@
     emit_bits((UShort)MARKER_BIT, 1);   /* marker_bit */    
     emit_bits((UShort)mzte_codec.m_iHeight, 15);  /* object_height */    
     emit_bits((UShort)MARKER_BIT, 1);  /* marker_bit */
-    noteProgress("Merge Shape Bitstream ....");
+    noteProgress((char*)"Merge Shape Bitstream ....");
     // MergeShapeBitstream();
   }
 }
@@ -582,7 +582,7 @@
 		if ( mzte_codec.m_tiling_disable == 1 && SkipShape == 0 ){ // @@@@@@@
 // FPDAM end: added by Sharp
 	//begin: added by SL@Sarnoff (03/03/99)
-	noteProgress("Encoding Shape Bitstream ....");
+	noteProgress((char*)"Encoding Shape Bitstream ....");
     ShapeEnCoding(mzte_codec.m_Image[0].mask, mzte_codec.m_iWidth, mzte_codec.m_iHeight, 
 		  mzte_codec.m_iWvtDecmpLev, 
 		  mzte_codec.m_iSTOConstAlpha,
@@ -664,7 +664,7 @@
 {
   Int col, err;
 
-  noteProgress("Encoding DC coefficients....");
+  noteProgress((char*)"Encoding DC coefficients....");
 
   for (col=0; col<mzte_codec.m_iColors; col++) 
   {
@@ -673,11 +673,11 @@
 
     /* initialize DC coefficient info */
     if ((err=ztqInitDC(0, col)))
-      errorHandler("ztqInitDC");
+      errorHandler((char*)"ztqInitDC");
 
     /* quantize DC coefficients */
     if ((err=encQuantizeDC(col)))
-      errorHandler("encQuantizeDC");
+      errorHandler((char*)"encQuantizeDC");
 
     /* losslessly encoding DC coefficients */
     wavelet_dc_encode(col);
@@ -685,7 +685,7 @@
     // writeStats();
   }  
 
-  noteProgress("Completed encoding DC coefficients.");
+  noteProgress((char*)"Completed encoding DC coefficients.");
 }
 
 /**********************************************************/
@@ -702,7 +702,7 @@
       Put_Quant_and_Max_SQBB(snr_image, spa_lev, col);
     }
 	for (col=0; col<mzte_codec.m_iColors; col++) {
-        noteProgress("Single-Quant Mode (Band by Band) - Spatial %d, SNR 0, "\
+        noteProgress((char*)"Single-Quant Mode (Band by Band) - Spatial %d, SNR 0, "\
 	              "Color %d",spa_lev,col);
 
         mzte_codec.m_iCurColor = col;
@@ -754,7 +754,7 @@
   SNR_IMAGE *snr_image;
     
 
-  noteProgress("Encoding AC coefficients - Single-Quant Mode....");
+  noteProgress((char*)"Encoding AC coefficients - Single-Quant Mode....");
   
   /*------- AC: Set spatial and SNR levels to zero -------*/
   mzte_codec.m_iCurSpatialLev = 0;
@@ -776,11 +776,11 @@
     
     /* initialize AC coefficient info for each color component */
     if ((err=ztqInitAC(0, col)))
-      errorHandler("ztqInitAC");
+      errorHandler((char*)"ztqInitAC");
     
     /* quantize and mark zerotree structure for AC coefficients */
     if ((err=encQuantizeAndMarkAC(col)))
-      errorHandler("encQuantizeAndMarkAC");
+      errorHandler((char*)"encQuantizeAndMarkAC");
   }
   
 
@@ -831,7 +831,7 @@
   /*mzte_codec.m_iTargetSpatialLev = 1;
   mzte_codec.m_iTargetSNRLev = 1; */ //deleted by SL@Sarnoff (03/03/99)
   
-  noteProgress("Completed encoding AC coefficients - Single-Quant Mode.");
+  noteProgress((char*)"Completed encoding AC coefficients - Single-Quant Mode.");
 }
 
 
@@ -845,22 +845,22 @@
   static Int texture_snr_layer_id=0;
 
   if(mzte_codec.m_bStartCodeEnable){
-    noteProgress("Encoding Multi-Quant Mode Layer with SNR start code....");
+    noteProgress((char*)"Encoding Multi-Quant Mode Layer with SNR start code....");
     /* header */  
     emit_bits((UShort)texture_snr_layer_start_code>>16,16);
     emit_bits((UShort)texture_snr_layer_start_code,16);
     emit_bits((UShort)texture_snr_layer_id++,5);
   }
   else
-    noteProgress("Encoding Multi-Quant Mode Layer without SNR start code....");
+    noteProgress((char*)"Encoding Multi-Quant Mode Layer without SNR start code....");
 
-  noteProgress("Multi-Quant Mode - Spatial %d, SNR %d", spa_lev,snr_lev);
+  noteProgress((char*)"Multi-Quant Mode - Spatial %d, SNR %d", spa_lev,snr_lev);
 
   for(col=0;
       col < NCOL;
       col++)
   {
-    noteDetail("width=%d  height=%d",mzte_codec.m_SPlayer[col].width,
+    noteDetail((char*)"width=%d  height=%d",mzte_codec.m_SPlayer[col].width,
 	      mzte_codec.m_SPlayer[col].height);    
 
     /* Set global color variable */
@@ -869,7 +869,7 @@
     /* Set quant value */
     snr_image=&(mzte_codec.m_SPlayer[col].SNRlayer.snr_image);
     snr_image->quant = mzte_codec.m_Qinfo[col][spa_lev].Quant[snr_lev];
-    noteDebug("AC quant=%d", 
+    noteDebug((char*)"AC quant=%d", 
                mzte_codec.m_Qinfo[col][spa_lev].Quant[snr_lev]);
         
     /* initialization of spatial dimensions for each color component */
@@ -879,11 +879,11 @@
     /* get maximum residual value - this one is derived from user Q inputs not 
        actual values. Also assign skip modes. */
     updateResidMaxAndAssignSkips(col);
-    noteDebug("resid_max=%d\n",snr_image->residual_max);
+    noteDebug((char*)"resid_max=%d\n",snr_image->residual_max);
 
     /* quantize and mark zerotree structure for AC coefficients */
     if (encQuantizeAndMarkAC(col))
-      errorHandler("encQuantizeAndMarkAC");
+      errorHandler((char*)"encQuantizeAndMarkAC");
 
      //   Put_Quant_and_Max(snr_image); // hjlee 0901
     Put_Quant_and_Max(snr_image,spa_lev,col);  // hjlee 0901
@@ -900,7 +900,7 @@
     
     /* Update states of AC coefficients */
     if (encUpdateStateAC(mzte_codec.m_iCurColor))
-      errorHandler("encUpdateStateAC");
+      errorHandler((char*)"encUpdateStateAC");
   }
 }
  
@@ -914,12 +914,12 @@
   // hjlee 0901
     /*------- AC: Initialize QList Structure -------*/
   if ((err=ztqQListInit()))
-    errorHandler("Allocating memory for QList information.");
+    errorHandler((char*)"Allocating memory for QList information.");
   
   /* Initialize coeffs */
   setSpatialLevelAndDimensions(0,0);
   if ((err=ztqInitAC(0,0)))
-    errorHandler("ztqInitAC");
+    errorHandler((char*)"ztqInitAC");
   
   if (mzte_codec.m_iColors > 1)
   {
@@ -928,7 +928,7 @@
     else
       setSpatialLevelAndDimensions(0,1);
     if ((err=ztqInitAC(0,1)))
-      errorHandler("ztqInitAC");
+      errorHandler((char*)"ztqInitAC");
   }
   if (mzte_codec.m_iColors > 2)
   {
@@ -937,7 +937,7 @@
     else
       setSpatialLevelAndDimensions(0,2);
     if ((err=ztqInitAC(0,2)))
-      errorHandler("ztqInitAC");
+      errorHandler((char*)"ztqInitAC");
   }
 
 
@@ -993,7 +993,7 @@
 #endif
 	  abort();
 	  if ((bitfile=fopen(fname,"wb"))==NULL)
-	    errorHandler("Can't open file '%s' for writing.",fname);
+	    errorHandler((char*)"Can't open file '%s' for writing.",fname);
 	}
 	
 	/* initialize the buffer */
@@ -1129,7 +1129,7 @@
 
   /*------- DC: Open and initialize bitstream file -------*/
   if ((bitfile=fopen(mzte_codec.m_cBitFile,"wb"))==NULL)
-    errorHandler("Can't open file '%s' for writing.",
+    errorHandler((char*)"Can't open file '%s' for writing.",
 		mzte_codec.m_cBitFile);
 
   /* for PEZW, always enabled */
@@ -1213,7 +1213,7 @@
 		anafilter = (FILTER **) malloc(sizeof(FILTER *)*mzte_codec.m_iWvtDecmpLev);
 		synfilter = (FILTER **) malloc(sizeof(FILTER *)*mzte_codec.m_iWvtDecmpLev);
 		if(anafilter == NULL || synfilter == NULL) 
-		errorHandler("Error allocating memory for filters\n");
+		errorHandler((char*)"Error allocating memory for filters\n");
 		for(i=0;i<mzte_codec.m_iWvtDecmpLev; i++) {
 			choose_wavelet_filter(&(anafilter[i]),
 					&(synfilter[mzte_codec.m_iWvtDecmpLev-1-i]),
@@ -1364,7 +1364,7 @@
 	//	fprintf(stdout,"Coeffinfo memory allocation done!\n");
   /*------- DC: Open and initialize bitstream file -------*/
   if ((bitfile=fopen(mzte_codec.m_cBitFile,"wb"))==NULL)
-    errorHandler("Can't open file '%s' for writing.", mzte_codec.m_cBitFile);
+    errorHandler((char*)"Can't open file '%s' for writing.", mzte_codec.m_cBitFile);
   init_bit_packing_fp(bitfile,1);
 	tile_table_pos = header_Enc(synfilter);
 //	@@@@@@@@@@
@@ -1393,7 +1393,7 @@
 
 			if ( iTile != 0 ){
 				if ((bitfile=fopen(mzte_codec.m_cBitFile,"ab"))==NULL)
-					errorHandler("Can't open file '%s' for writing.",mzte_codec.m_cBitFile);
+					errorHandler((char*)"Can't open file '%s' for writing.",mzte_codec.m_cBitFile);
 				fseek(bitfile,0,SEEK_END);
 				init_bit_packing_fp(bitfile,1);
 			}
@@ -1415,7 +1415,7 @@
 	// end: added by Sharp (99/2/16)
 
 		/* DISCRETE WAVELET TRANSFORM */
-		noteProgress("Wavelet Transform....");  
+		noteProgress((char*)"Wavelet Transform....");  
 
 
 // begin: modified by Sharp (99/5/10)
@@ -1435,7 +1435,7 @@
 
 	// 	choose_wavelet_filter(&anafilter, &synfilter, mzte_codec.m_iWvtType); // hjlee 0901
 	//	perform_DWT(anafilter); deleted by Sharp (99/2/16)
-		noteProgress("Completed wavelet transform.");
+		noteProgress((char*)"Completed wavelet transform.");
 
 // begin: added by Sharp (99/4/7)
 	if ( mzte_codec.m_tiling_disable == 0 ){
@@ -1534,7 +1534,7 @@
 
 	// end: added by Sharp (99/2/16)
 		/*----- free up coeff data structure -----*/
-		noteDetail("Freeing up encoding data structures....");
+		noteDetail((char*)"Freeing up encoding data structures....");
 		for (col=0; col<mzte_codec.m_iColors; col++) {
 	// begin: added by Sharp (99/2/16)
 		  /* delete */ free (mzte_codec.m_Image[col].data);
@@ -1560,9 +1560,9 @@
 		delete anafilter;
 		delete synfilter;
 // end: added by Sharp (99/3/29)
-		noteDetail("Completed freeing up encoding data structures.");
+		noteDetail((char*)"Completed freeing up encoding data structures.");
 
-		noteProgress("\n----- Encoding Completed. -----\n");
+		noteProgress((char*)"\n----- Encoding Completed. -----\n");
 	}
 	else { /* this part should be copyed from VERSION 1 FCD software later */
 
@@ -1573,7 +1573,7 @@
 	  anafilter = (FILTER **) malloc(sizeof(FILTER *)*mzte_codec.m_iWvtDecmpLev);
 	  synfilter = (FILTER **) malloc(sizeof(FILTER *)*mzte_codec.m_iWvtDecmpLev);
 	  if(anafilter == NULL || synfilter == NULL) 
-		errorHandler("Error allocating memory for filters\n");
+		errorHandler((char*)"Error allocating memory for filters\n");
 	  for(i=0;i<mzte_codec.m_iWvtDecmpLev; i++) {
 		choose_wavelet_filter(&(anafilter[i]),
 				  &(synfilter[mzte_codec.m_iWvtDecmpLev-1-i]),
@@ -1651,18 +1651,18 @@
 //	fprintf(stdout,"Coeffinfo memory allocation done!\n");
 
 	/* DISCRETE WAVELET TRANSFORM */
-	noteProgress("Wavelet Transform....");  
+	noteProgress((char*)"Wavelet Transform....");  
 
 
 
 // 	choose_wavelet_filter(&anafilter, &synfilter, mzte_codec.m_iWvtType); // hjlee 0901
 	perform_DWT(anafilter);
-	noteProgress("Completed wavelet transform.");
+	noteProgress((char*)"Completed wavelet transform.");
 
 	TextureObjectLayer_enc_V1(synfilter); 
 
 	/*----- free up coeff data structure -----*/
-	noteDetail("Freeing up encoding data structures....");
+	noteDetail((char*)"Freeing up encoding data structures....");
 	for (col=0; col<mzte_codec.m_iColors; col++) {
 		if (mzte_codec.m_SPlayer[col].coeffinfo[0] != NULL)
 			delete (mzte_codec.m_SPlayer[col].coeffinfo[0]);
@@ -1671,9 +1671,9 @@
 			delete (mzte_codec.m_SPlayer[col].coeffinfo);
 		mzte_codec.m_SPlayer[col].coeffinfo = NULL;
 	}
-	noteDetail("Completed freeing up encoding data structures.");
+	noteDetail((char*)"Completed freeing up encoding data structures.");
 
-	noteProgress("\n----- Encoding Completed. -----\n");
+	noteProgress((char*)"\n----- Encoding Completed. -----\n");
 
 	}
 }
@@ -1739,7 +1739,7 @@
 		}
 
 		if ( mzte_codec.m_iAlphaChannel && mzte_codec.m_iTextureTileType == BOUNDA_TILE ){
-			noteProgress("Encoding Tile Shape Bitstream ....");
+			noteProgress((char*)"Encoding Tile Shape Bitstream ....");
 			ShapeEnCoding(mzte_codec.m_Image[0].mask, mzte_codec.m_iWidth, mzte_codec.m_iHeight, 
 				mzte_codec.m_iWvtDecmpLev, 
 				mzte_codec.m_iSTOConstAlpha,
