--- contrib/mul/tools/crop_image_3d.cxx.orig	2015-06-21 19:57:32.000000000 +0300
+++ contrib/mul/tools/crop_image_3d.cxx	2015-06-21 19:58:23.000000000 +0300
@@ -60,18 +60,38 @@
   vul_arg_parse(argc, argv);
 
   // Log the program arguments
-  MBL_LOG(INFO, logger(), "crop_image_3d: ");
-  MBL_LOG(INFO, logger(), "  img_src: " << img_src());
-  MBL_LOG(INFO, logger(), "  img_dst: " << img_dst());
-  MBL_LOG(INFO, logger(), "  use_mm: " << use_mm());
-  if (bbi.set())
-    MBL_LOG(INFO, logger(), "  bbi: " << bbi.print_value(logger().log(mbl_logger::INFO)));
-  if (bbf.set())
-    MBL_LOG(INFO, logger(), "  bbf: " << bbf.print_value(logger().log(mbl_logger::INFO)));
-  if (bbw.set())
-    MBL_LOG(INFO, logger(), "  bbw: " << bbw.print_value(logger().log(mbl_logger::INFO)));
-  if (cw.set())
-    MBL_LOG(INFO, logger(), "  cw: " << cw.print_value(logger().log(mbl_logger::INFO)));
+    // Log the program arguments
+  if (logger().level() >= mbl_logger::INFO)
+  {
+    MBL_LOG(INFO, logger(), "crop_image_3d: ");
+    MBL_LOG(INFO, logger(), "  img_src: " << img_src());
+    MBL_LOG(INFO, logger(), "  img_dst: " << img_dst());
+    MBL_LOG(INFO, logger(), "  use_mm: " << use_mm());
+    if (bbi.set())
+    {
+      vcl_ostream& log = logger().log(mbl_logger::INFO); // construct a new log message
+      log << "  bbi: "; bbi.print_value(log);
+      log << vcl_endl; // terminate log message
+    }
+    if (bbf.set())
+    {
+      vcl_ostream& log = logger().log(mbl_logger::INFO); // construct a new log message
+      log << "  bbf: "; bbf.print_value(log);
+      log << vcl_endl; // terminate log message
+    }
+    if (bbw.set())
+    {
+      vcl_ostream& log = logger().log(mbl_logger::INFO); // construct a new log message
+      log << "  bbw: "; bbw.print_value(log);
+      log << vcl_endl; // terminate log message
+    }
+    if (cw.set())
+    {
+      vcl_ostream& log = logger().log(mbl_logger::INFO); // construct a new log message
+      log << "  cw: "; cw.print_value(log);
+      log << vcl_endl; // terminate log message
+    }
+  }
 
   // Count the number of bbox options specified - should be exactly 1.
   unsigned nbb=0;
