--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Find a Sass file relative to another file. Importers without a notion of &quot;relative paths&quot; should just return nil here.
- !ruby/struct:SM::Flow::P 
  body: If the importer does have a notion of &quot;relative paths&quot;, it should ignore its load path during this method.
- !ruby/struct:SM::Flow::P 
  body: See \{#find} for important information on how this method should behave.
- !ruby/struct:SM::Flow::P 
  body: The `:filename` option passed to the returned {Sass::Engine} should be of a format that could be passed to \{#find}.
- !ruby/struct:SM::Flow::P 
  body: "@param uri [String] The URI to import. This is not necessarily relative,"
- !ruby/struct:SM::Flow::VERB 
  body: "  but this method should only return true if it is.\n"
- !ruby/struct:SM::Flow::P 
  body: "@param base [String] The base filename. If `uri` is relative,"
- !ruby/struct:SM::Flow::VERB 
  body: "  it should be interpreted as relative to `base`.\n  `base` is guaranteed to be in a format importable by this importer.\n"
- !ruby/struct:SM::Flow::P 
  body: "@param options [{Symbol =&gt; Object}] Options for the Sass file"
- !ruby/struct:SM::Flow::VERB 
  body: "  containing the `@import` that's currently being resolved.\n"
- !ruby/struct:SM::Flow::P 
  body: "@return [Sass::Engine, nil] An Engine containing the imported file,"
- !ruby/struct:SM::Flow::VERB 
  body: "  or nil if it couldn't be found or was in the wrong format.\n"
full_name: Sass::Importers::Base#find_relative
is_singleton: false
name: find_relative
params: (uri, base, options)
visibility: public
