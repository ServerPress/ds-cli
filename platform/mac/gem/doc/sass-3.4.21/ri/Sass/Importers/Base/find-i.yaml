--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Find a Sass file, if it exists.
- !ruby/struct:SM::Flow::P 
  body: "This is the primary entry point of the Importer. It corresponds directly to an `@import` statement in Sass. It should do three basic things:"
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: Determine if the URI is in this importer's format. If not, return nil.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: Determine if the file indicated by the URI actually exists and is readable. If not, return nil.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: Read the file and place the contents in a {Sass::Engine}. Return that engine.
  type: :BULLET
- !ruby/struct:SM::Flow::P 
  body: If this importer's format allows for file extensions, it should treat them the same way as the default {Filesystem} importer. If the URI explicitly has a `.sass` or `.scss` filename, the importer should look for that exact file and import it as the syntax indicated. If it doesn't exist, the importer should return nil.
- !ruby/struct:SM::Flow::P 
  body: If the URI doesn't have either of these extensions, the importer should look for files with the extensions. If no such files exist, it should return nil.
- !ruby/struct:SM::Flow::P 
  body: The {Sass::Engine} to be returned should be passed `options`, with a few modifications. `:syntax` should be set appropriately, `:filename` should be set to `uri`, and `:importer` should be set to this importer.
- !ruby/struct:SM::Flow::P 
  body: "@param uri [String] The URI to import. @param options [{Symbol =&gt; Object}] Options for the Sass file"
- !ruby/struct:SM::Flow::VERB 
  body: "  containing the `@import` that's currently being resolved.\n  This is safe for subclasses to modify destructively.\n  Callers should only pass in a value they don't mind being destructively modified.\n"
- !ruby/struct:SM::Flow::P 
  body: "@return [Sass::Engine, nil] An Engine containing the imported file,"
- !ruby/struct:SM::Flow::VERB 
  body: "  or nil if it couldn't be found or was in the wrong format.\n"
full_name: Sass::Importers::Base#find
is_singleton: false
name: find
params: (uri, options)
visibility: public
