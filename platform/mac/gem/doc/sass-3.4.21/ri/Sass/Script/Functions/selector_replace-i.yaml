--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Replaces all instances of `$original` with `$replacement` in `$selector`
- !ruby/struct:SM::Flow::P 
  body: This works by using `@extend` and throwing away the original selector. This means that it can be used to do very advanced replacements; see the examples below.
- !ruby/struct:SM::Flow::P 
  body: "@example"
- !ruby/struct:SM::Flow::VERB 
  body: "  selector-replace(&quot;.foo .bar&quot;, &quot;.bar&quot;, &quot;.baz&quot;) =&gt; &quot;.foo .baz&quot;\n  selector-replace(&quot;.foo.bar.baz&quot;, &quot;.foo.baz&quot;, &quot;.qux&quot;) =&gt; &quot;.bar.qux&quot;\n"
- !ruby/struct:SM::Flow::P 
  body: "@overload selector_replace($selector, $original, $replacement)"
- !ruby/struct:SM::Flow::VERB 
  body: "  @param $selector [Sass::Script::Value::String, Sass::Script::Value::List]\n    The selector within which `$original` is replaced with\n    `$replacement`. This can be either a string, a list of\n    strings, or a list of lists of strings as returned by `&amp;`.\n  @param $original [Sass::Script::Value::String, Sass::Script::Value::List]\n    The selector being replaced. This can be either a string, a\n    list of strings, or a list of lists of strings as returned\n    by `&amp;`.\n  @param $replacement [Sass::Script::Value::String, Sass::Script::Value::List]\n    The selector that `$original` is being replaced with. This\n    can be either a string, a list of strings, or a list of\n    lists of strings as returned by `&amp;`.\n  @return [Sass::Script::Value::List]\n    A list of lists of strings representing the result of the\n    extension. This is in the same format as a selector returned\n    by `&amp;`.\n  @raise [ArgumentError] if the replacement fails\n"
full_name: Sass::Script::Functions#selector_replace
is_singleton: false
name: selector_replace
params: (selector, original, replacement)
visibility: public
