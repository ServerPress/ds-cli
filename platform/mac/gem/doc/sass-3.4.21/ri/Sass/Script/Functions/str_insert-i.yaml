--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Inserts `$insert` into `$string` at `$index`.
- !ruby/struct:SM::Flow::P 
  body: Note that unlike some languages, the first character in a Sass string is number 1, the second number 2, and so forth.
- !ruby/struct:SM::Flow::P 
  body: "@example"
- !ruby/struct:SM::Flow::VERB 
  body: "  str-insert(&quot;abcd&quot;, &quot;X&quot;, 1) =&gt; &quot;Xabcd&quot;\n  str-insert(&quot;abcd&quot;, &quot;X&quot;, 4) =&gt; &quot;abcXd&quot;\n  str-insert(&quot;abcd&quot;, &quot;X&quot;, 5) =&gt; &quot;abcdX&quot;\n"
- !ruby/struct:SM::Flow::P 
  body: "@overload str_insert($string, $insert, $index)"
- !ruby/struct:SM::Flow::VERB 
  body: "  @param $string [Sass::Script::Value::String]\n  @param $insert [Sass::Script::Value::String]\n  @param $index [Sass::Script::Value::Number] The position at which\n    `$insert` will be inserted. Negative indices count from the end of\n    `$string`. An index that's outside the bounds of the string will insert\n    `$insert` at the front or back of the string\n"
- !ruby/struct:SM::Flow::P 
  body: "@return [Sass::Script::Value::String] The result string. This will be"
- !ruby/struct:SM::Flow::VERB 
  body: "  quoted if and only if `$string` was quoted\n"
- !ruby/struct:SM::Flow::P 
  body: "@raise [ArgumentError] if any parameter is the wrong type"
full_name: Sass::Script::Functions#str_insert
is_singleton: false
name: str_insert
params: (original, insert, index)
visibility: public
