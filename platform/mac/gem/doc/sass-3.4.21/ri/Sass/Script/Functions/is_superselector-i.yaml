--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Returns whether `$super` is a superselector of `$sub`. This means that `$super` matches all the elements that `$sub` matches, as well as possibly additional elements. In general, simpler selectors tend to be superselectors of more complex oned.
- !ruby/struct:SM::Flow::P 
  body: "@example"
- !ruby/struct:SM::Flow::VERB 
  body: "  is-superselector(&quot;.foo&quot;, &quot;.foo.bar&quot;) =&gt; true\n  is-superselector(&quot;.foo.bar&quot;, &quot;.foo&quot;) =&gt; false\n  is-superselector(&quot;.bar&quot;, &quot;.foo .bar&quot;) =&gt; true\n  is-superselector(&quot;.foo .bar&quot;, &quot;.bar&quot;) =&gt; false\n"
- !ruby/struct:SM::Flow::P 
  body: "@overload is_superselector($super, $sub)"
- !ruby/struct:SM::Flow::VERB 
  body: "  @param $super [Sass::Script::Value::String, Sass::Script::Value::List]\n    The potential superselector. This can be either a string, a list of\n    strings, or a list of lists of strings as returned by `&amp;`.\n  @param $sub [Sass::Script::Value::String, Sass::Script::Value::List]\n    The potential subselector. This can be either a string, a list of\n    strings, or a list of lists of strings as returned by `&amp;`.\n  @return [Sass::Script::Value::Bool]\n    Whether `$selector1` is a superselector of `$selector2`.\n"
full_name: Sass::Script::Functions#is_superselector
is_singleton: false
name: is_superselector
params: (sup, sub)
visibility: public
