--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Constructs an RGB or HSL color object, optionally with an alpha channel.
- !ruby/struct:SM::Flow::P 
  body: RGB values are clipped within 0 and 255. Saturation and lightness values are clipped within 0 and 100. The alpha value is clipped within 0 and 1.
- !ruby/struct:SM::Flow::P 
  body: "@raise [Sass::SyntaxError] if any color value isn't in the specified range"
- !ruby/struct:SM::Flow::P 
  body: "@overload initialize(attrs)"
- !ruby/struct:SM::Flow::VERB 
  body: "  The attributes are specified as a hash. This hash must contain either\n  `:hue`, `:saturation`, and `:lightness` keys, or `:red`, `:green`, and\n  `:blue` keys. It cannot contain both HSL and RGB keys. It may also\n  optionally contain an `:alpha` key, and a `:representation` key\n  indicating the original representation of the color that the user wrote\n  in their stylesheet.\n\n  @param attrs [{Symbol =&gt; Numeric}] A hash of color attributes to values\n  @raise [ArgumentError] if not enough attributes are specified,\n    or both RGB and HSL attributes are specified\n"
- !ruby/struct:SM::Flow::P 
  body: "@overload initialize(rgba, [representation])"
- !ruby/struct:SM::Flow::VERB 
  body: "  The attributes are specified as an array.\n  This overload only supports RGB or RGBA colors.\n\n  @param rgba [Array&lt;Numeric&gt;] A three- or four-element array\n    of the red, green, blue, and optionally alpha values (respectively)\n    of the color\n  @param representation [String] The original representation of the color\n    that the user wrote in their stylesheet.\n  @raise [ArgumentError] if not enough attributes are specified\n"
full_name: Sass::Script::Value::Color::new
is_singleton: true
name: new
params: (attrs, representation = nil, allow_both_rgb_and_hsl = false)
visibility: public
