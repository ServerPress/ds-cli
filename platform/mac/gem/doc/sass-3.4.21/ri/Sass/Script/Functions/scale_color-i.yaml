--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Fluidly scales one or more properties of a color. Unlike \{#adjust_color adjust-color}, which changes a color's properties by fixed amounts, \{#scale_color scale-color} fluidly changes them based on how high or low they already are. That means that lightening an already-light color with \{#scale_color scale-color} won't change the lightness much, but lightening a dark color by the same amount will change it more dramatically. This has the benefit of making `scale-color($color, ...)` have a similar effect regardless of what `$color` is.
- !ruby/struct:SM::Flow::P 
  body: "For example, the lightness of a color can be anywhere between `0%` and `100%`. If `scale-color($color, $lightness: 40%)` is called, the resulting color's lightness will be 40% of the way between its original lightness and 100. If `scale-color($color, $lightness: -40%)` is called instead, the lightness will be 40% of the way between the original and 0."
- !ruby/struct:SM::Flow::P 
  body: This can change the red, green, blue, saturation, value, and alpha properties. The properties are specified as keyword arguments. All arguments should be percentages between `0%` and `100%`.
- !ruby/struct:SM::Flow::P 
  body: All properties are optional. You can't specify both RGB properties (`$red`, `$green`, `$blue`) and HSL properties (`$saturation`, `$value`) at the same time.
- !ruby/struct:SM::Flow::P 
  body: "@example"
- !ruby/struct:SM::Flow::VERB 
  body: "  scale-color(hsl(120, 70%, 80%), $lightness: 50%) =&gt; hsl(120, 70%, 90%)\n  scale-color(rgb(200, 150%, 170%), $green: -40%, $blue: 70%) =&gt; rgb(200, 90, 229)\n  scale-color(hsl(200, 70%, 80%), $saturation: -90%, $alpha: -30%) =&gt; hsla(200, 7%, 80%, 0.7)\n"
- !ruby/struct:SM::Flow::P 
  body: "@overload scale_color($color, [$red], [$green], [$blue], [$saturation], [$lightness], [$alpha])"
- !ruby/struct:SM::Flow::VERB 
  body: "  @param $color [Sass::Script::Value::Color]\n  @param $red [Sass::Script::Value::Number]\n  @param $green [Sass::Script::Value::Number]\n  @param $blue [Sass::Script::Value::Number]\n  @param $saturation [Sass::Script::Value::Number]\n  @param $lightness [Sass::Script::Value::Number]\n  @param $alpha [Sass::Script::Value::Number]\n"
- !ruby/struct:SM::Flow::P 
  body: "@return [Sass::Script::Value::Color] @raise [ArgumentError] if any parameter is the wrong type or out-of"
- !ruby/struct:SM::Flow::VERB 
  body: "  bounds, or if RGB properties and HSL properties are adjusted at the\n  same time\n"
full_name: Sass::Script::Functions#scale_color
is_singleton: false
name: scale_color
params: (color, kwargs)
visibility: public
