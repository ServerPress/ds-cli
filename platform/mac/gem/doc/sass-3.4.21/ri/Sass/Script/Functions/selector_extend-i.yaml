--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Returns a new version of `$selector` with `$extendee` extended with `$extender`. This works just like the result of
- !ruby/struct:SM::Flow::VERB 
  body: "    $selector { ... }\n    $extender { @extend $extendee }\n"
- !ruby/struct:SM::Flow::P 
  body: "@example"
- !ruby/struct:SM::Flow::VERB 
  body: "  selector-extend(&quot;.a .b&quot;, &quot;.b&quot;, &quot;.foo .bar&quot;) =&gt; .a .b, .a .foo .bar, .foo .a .bar\n"
- !ruby/struct:SM::Flow::P 
  body: "@overload selector_extend($selector, $extendee, $extender)"
- !ruby/struct:SM::Flow::VERB 
  body: "  @param $selector [Sass::Script::Value::String, Sass::Script::Value::List]\n    The selector within which `$extendee` is extended with\n    `$extender`. This can be either a string, a list of strings,\n    or a list of lists of strings as returned by `&amp;`.\n  @param $extendee [Sass::Script::Value::String, Sass::Script::Value::List]\n    The selector being extended. This can be either a string, a\n    list of strings, or a list of lists of strings as returned\n    by `&amp;`.\n  @param $extender [Sass::Script::Value::String, Sass::Script::Value::List]\n    The selector being injected into `$selector`. This can be\n    either a string, a list of strings, or a list of lists of\n    strings as returned by `&amp;`.\n  @return [Sass::Script::Value::List]\n    A list of lists of strings representing the result of the\n    extension. This is in the same format as a selector returned\n    by `&amp;`.\n  @raise [ArgumentError] if the extension fails\n"
full_name: Sass::Script::Functions#selector_extend
is_singleton: false
name: selector_extend
params: (selector, extendee, extender)
visibility: public
