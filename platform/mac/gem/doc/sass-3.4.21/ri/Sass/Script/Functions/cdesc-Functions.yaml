--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: 
- !ruby/object:RI::MethodSummary 
  name: declare
- !ruby/object:RI::MethodSummary 
  name: random_number_generator
- !ruby/object:RI::MethodSummary 
  name: random_seed=
- !ruby/object:RI::MethodSummary 
  name: signature
comment: 
- !ruby/struct:SM::Flow::P 
  body: "@comment"
- !ruby/struct:SM::Flow::VERB 
  body: "  YARD can't handle some multiline tags, and we need really long tags for function declarations.\n  rubocop:disable LineLength\n"
- !ruby/struct:SM::Flow::P 
  body: Methods in this module are accessible from the SassScript context. For example, you can write
- !ruby/struct:SM::Flow::VERB 
  body: "    $color: hsl(120deg, 100%, 50%)\n"
- !ruby/struct:SM::Flow::P 
  body: and it will call {Functions#hsl}.
- !ruby/struct:SM::Flow::P 
  body: "The following functions are provided:"
- !ruby/struct:SM::Flow::P 
  body: "*Note: These functions are described in more detail below.*"
- !ruby/struct:SM::Flow::P 
  body: "## RGB Functions"
- !ruby/struct:SM::Flow::P 
  body: "\\{#rgb rgb($red, $green, $blue)} : Creates a {Sass::Script::Value::Color Color} from red, green, and blue"
- !ruby/struct:SM::Flow::VERB 
  body: "  values.\n"
- !ruby/struct:SM::Flow::P 
  body: "\\{#rgba rgba($red, $green, $blue, $alpha)} : Creates a {Sass::Script::Value::Color Color} from red, green, blue, and"
- !ruby/struct:SM::Flow::VERB 
  body: "  alpha values.\n"
- !ruby/struct:SM::Flow::P 
  body: "\\{#red red($color)} : Gets the red component of a color."
- !ruby/struct:SM::Flow::P 
  body: "\\{#green green($color)} : Gets the green component of a color."
- !ruby/struct:SM::Flow::P 
  body: "\\{#blue blue($color)} : Gets the blue component of a color."
- !ruby/struct:SM::Flow::P 
  body: "\\{#mix mix($color1, $color2, \\[$weight\\])} : Mixes two colors together."
- !ruby/struct:SM::Flow::P 
  body: "## HSL Functions"
- !ruby/struct:SM::Flow::P 
  body: "\\{#hsl hsl($hue, $saturation, $lightness)} : Creates a {Sass::Script::Value::Color Color} from hue, saturation, and"
- !ruby/struct:SM::Flow::VERB 
  body: "  lightness values.\n"
- !ruby/struct:SM::Flow::P 
  body: "\\{#hsla hsla($hue, $saturation, $lightness, $alpha)} : Creates a {Sass::Script::Value::Color Color} from hue, saturation,"
- !ruby/struct:SM::Flow::VERB 
  body: "  lightness, and alpha values.\n"
- !ruby/struct:SM::Flow::P 
  body: "\\{#hue hue($color)} : Gets the hue component of a color."
- !ruby/struct:SM::Flow::P 
  body: "\\{#saturation saturation($color)} : Gets the saturation component of a color."
- !ruby/struct:SM::Flow::P 
  body: "\\{#lightness lightness($color)} : Gets the lightness component of a color."
- !ruby/struct:SM::Flow::P 
  body: "\\{#adjust_hue adjust-hue($color, $degrees)} : Changes the hue of a color."
- !ruby/struct:SM::Flow::P 
  body: "\\{#lighten lighten($color, $amount)} : Makes a color lighter."
- !ruby/struct:SM::Flow::P 
  body: "\\{#darken darken($color, $amount)} : Makes a color darker."
- !ruby/struct:SM::Flow::P 
  body: "\\{#saturate saturate($color, $amount)} : Makes a color more saturated."
- !ruby/struct:SM::Flow::P 
  body: "\\{#desaturate desaturate($color, $amount)} : Makes a color less saturated."
- !ruby/struct:SM::Flow::P 
  body: "\\{#grayscale grayscale($color)} : Converts a color to grayscale."
- !ruby/struct:SM::Flow::P 
  body: "\\{#complement complement($color)} : Returns the complement of a color."
- !ruby/struct:SM::Flow::P 
  body: "\\{#invert invert($color)} : Returns the inverse of a color."
- !ruby/struct:SM::Flow::P 
  body: "## Opacity Functions"
- !ruby/struct:SM::Flow::P 
  body: "\\{#alpha alpha($color)} / \\{#opacity opacity($color)} : Gets the alpha component (opacity) of a color."
- !ruby/struct:SM::Flow::P 
  body: "\\{#rgba rgba($color, $alpha)} : Changes the alpha component for a color."
- !ruby/struct:SM::Flow::P 
  body: "\\{#opacify opacify($color, $amount)} / \\{#fade_in fade-in($color, $amount)} : Makes a color more opaque."
- !ruby/struct:SM::Flow::P 
  body: "\\{#transparentize transparentize($color, $amount)} / \\{#fade_out fade-out($color, $amount)} : Makes a color more transparent."
- !ruby/struct:SM::Flow::P 
  body: "## Other Color Functions"
- !ruby/struct:SM::Flow::P 
  body: "\\{#adjust_color adjust-color($color, \\[$red\\], \\[$green\\], \\[$blue\\], \\[$hue\\], \\[$saturation\\], \\[$lightness\\], \\[$alpha\\])} : Increases or decreases one or more components of a color."
- !ruby/struct:SM::Flow::P 
  body: "\\{#scale_color scale-color($color, \\[$red\\], \\[$green\\], \\[$blue\\], \\[$saturation\\], \\[$lightness\\], \\[$alpha\\])} : Fluidly scales one or more properties of a color."
- !ruby/struct:SM::Flow::P 
  body: "\\{#change_color change-color($color, \\[$red\\], \\[$green\\], \\[$blue\\], \\[$hue\\], \\[$saturation\\], \\[$lightness\\], \\[$alpha\\])} : Changes one or more properties of a color."
- !ruby/struct:SM::Flow::P 
  body: "\\{#ie_hex_str ie-hex-str($color)} : Converts a color into the format understood by IE filters."
- !ruby/struct:SM::Flow::P 
  body: "## String Functions"
- !ruby/struct:SM::Flow::P 
  body: "\\{#unquote unquote($string)} : Removes quotes from a string."
- !ruby/struct:SM::Flow::P 
  body: "\\{#quote quote($string)} : Adds quotes to a string."
- !ruby/struct:SM::Flow::P 
  body: "\\{#str_length str-length($string)} : Returns the number of characters in a string."
- !ruby/struct:SM::Flow::P 
  body: "\\{#str_insert str-insert($string, $insert, $index)} : Inserts `$insert` into `$string` at `$index`."
- !ruby/struct:SM::Flow::P 
  body: "\\{#str_index str-index($string, $substring)} : Returns the index of the first occurrence of `$substring` in `$string`."
- !ruby/struct:SM::Flow::P 
  body: "\\{#str_slice str-slice($string, $start-at, [$end-at])} : Extracts a substring from `$string`."
- !ruby/struct:SM::Flow::P 
  body: "\\{#to_upper_case to-upper-case($string)} : Converts a string to upper case."
- !ruby/struct:SM::Flow::P 
  body: "\\{#to_lower_case to-lower-case($string)} : Converts a string to lower case."
- !ruby/struct:SM::Flow::P 
  body: "## Number Functions"
- !ruby/struct:SM::Flow::P 
  body: "\\{#percentage percentage($number)} : Converts a unitless number to a percentage."
- !ruby/struct:SM::Flow::P 
  body: "\\{#round round($number)} : Rounds a number to the nearest whole number."
- !ruby/struct:SM::Flow::P 
  body: "\\{#ceil ceil($number)} : Rounds a number up to the next whole number."
- !ruby/struct:SM::Flow::P 
  body: "\\{#floor floor($number)} : Rounds a number down to the previous whole number."
- !ruby/struct:SM::Flow::P 
  body: "\\{#abs abs($number)} : Returns the absolute value of a number."
- !ruby/struct:SM::Flow::P 
  body: "\\{#min min($numbers...)\\} : Finds the minimum of several numbers."
- !ruby/struct:SM::Flow::P 
  body: "\\{#max max($numbers...)\\} : Finds the maximum of several numbers."
- !ruby/struct:SM::Flow::P 
  body: "\\{#random random([$limit])\\} : Returns a random number."
- !ruby/struct:SM::Flow::P 
  body: "## List Functions {#list-functions}"
- !ruby/struct:SM::Flow::P 
  body: Lists in Sass are immutable; all list functions return a new list rather than updating the existing list in-place.
- !ruby/struct:SM::Flow::P 
  body: All list functions work for maps as well, treating them as lists of pairs.
- !ruby/struct:SM::Flow::P 
  body: "\\{#length length($list)} : Returns the length of a list."
- !ruby/struct:SM::Flow::P 
  body: "\\{#nth nth($list, $n)} : Returns a specific item in a list."
- !ruby/struct:SM::Flow::P 
  body: "\\{#set-nth set-nth($list, $n, $value)} : Replaces the nth item in a list."
- !ruby/struct:SM::Flow::P 
  body: "\\{#join join($list1, $list2, \\[$separator\\])} : Joins together two lists into one."
- !ruby/struct:SM::Flow::P 
  body: "\\{#append append($list1, $val, \\[$separator\\])} : Appends a single value onto the end of a list."
- !ruby/struct:SM::Flow::P 
  body: "\\{#zip zip($lists...)} : Combines several lists into a single multidimensional list."
- !ruby/struct:SM::Flow::P 
  body: "\\{#index index($list, $value)} : Returns the position of a value within a list."
- !ruby/struct:SM::Flow::P 
  body: "\\{#list_separator list-separator($list)} : Returns the separator of a list."
- !ruby/struct:SM::Flow::P 
  body: "## Map Functions {#map-functions}"
- !ruby/struct:SM::Flow::P 
  body: Maps in Sass are immutable; all map functions return a new map rather than updating the existing map in-place.
- !ruby/struct:SM::Flow::P 
  body: "\\{#map_get map-get($map, $key)} : Returns the value in a map associated with a given key."
- !ruby/struct:SM::Flow::P 
  body: "\\{#map_merge map-merge($map1, $map2)} : Merges two maps together into a new map."
- !ruby/struct:SM::Flow::P 
  body: "\\{#map_remove map-remove($map, $keys...)} : Returns a new map with keys removed."
- !ruby/struct:SM::Flow::P 
  body: "\\{#map_keys map-keys($map)} : Returns a list of all keys in a map."
- !ruby/struct:SM::Flow::P 
  body: "\\{#map_values map-values($map)} : Returns a list of all values in a map."
- !ruby/struct:SM::Flow::P 
  body: "\\{#map_has_key map-has-key($map, $key)} : Returns whether a map has a value associated with a given key."
- !ruby/struct:SM::Flow::P 
  body: "\\{#keywords keywords($args)} : Returns the keywords passed to a function that takes variable arguments."
- !ruby/struct:SM::Flow::P 
  body: "## Selector Functions"
- !ruby/struct:SM::Flow::P 
  body: "Selector functions are very liberal in the formats they support for selector arguments. They can take a plain string, a list of lists as returned by `&amp;` or anything in between:"
- !ruby/object:SM::Flow::LIST 
  contents: 
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: A plain string, such as `&quot;.foo .bar, .baz .bang&quot;`.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: A space-separated list of strings such as `(&quot;.foo&quot; &quot;.bar&quot;)`.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: A comma-separated list of strings such as `(&quot;.foo .bar&quot;, &quot;.baz .bang&quot;)`.
  - !ruby/struct:SM::Flow::LI 
    label: "*"
    body: A comma-separated list of space-separated lists of strings such as `((&quot;.foo&quot; &quot;.bar&quot;), (&quot;.baz&quot; &quot;.bang&quot;))`.
  type: :BULLET
- !ruby/struct:SM::Flow::P 
  body: In general, selector functions allow placeholder selectors (`%foo`) but disallow parent-reference selectors (`&amp;`).
- !ruby/struct:SM::Flow::P 
  body: "\\{#selector_nest selector-nest($selectors...)} : Nests selector beneath one another like they would be nested in the"
- !ruby/struct:SM::Flow::VERB 
  body: "  stylesheet.\n"
- !ruby/struct:SM::Flow::P 
  body: "\\{#selector_append selector-append($selectors...)} : Appends selectors to one another without spaces in between."
- !ruby/struct:SM::Flow::P 
  body: "\\{#selector_extend selector-extend($selector, $extendee, $extender)} : Extends `$extendee` with `$extender` within `$selector`."
- !ruby/struct:SM::Flow::P 
  body: "\\{#selector_replace selector-replace($selector, $original, $replacement)} : Replaces `$original` with `$replacement` within `$selector`."
- !ruby/struct:SM::Flow::P 
  body: "\\{#selector_unify selector-unify($selector1, $selector2)} : Unifies two selectors to produce a selector that matches"
- !ruby/struct:SM::Flow::VERB 
  body: "  elements matched by both.\n"
- !ruby/struct:SM::Flow::P 
  body: "\\{#is_superselector is-superselector($super, $sub)} : Returns whether `$super` matches all the elements `$sub` does, and"
- !ruby/struct:SM::Flow::VERB 
  body: "  possibly more.\n"
- !ruby/struct:SM::Flow::P 
  body: "\\{#simple_selectors simple-selectors($selector)} : Returns the simple selectors that comprise a compound selector."
- !ruby/struct:SM::Flow::P 
  body: "\\{#selector_parse selector-parse($selector)} : Parses a selector into the format returned by `&amp;`."
- !ruby/struct:SM::Flow::P 
  body: "## Introspection Functions"
- !ruby/struct:SM::Flow::P 
  body: "\\{#feature_exists feature-exists($feature)} : Returns whether a feature exists in the current Sass runtime."
- !ruby/struct:SM::Flow::P 
  body: "\\{#variable_exists variable-exists($name)} : Returns whether a variable with the given name exists in the current scope."
- !ruby/struct:SM::Flow::P 
  body: "\\{#global_variable_exists global-variable-exists($name)} : Returns whether a variable with the given name exists in the global scope."
- !ruby/struct:SM::Flow::P 
  body: "\\{#function_exists function-exists($name)} : Returns whether a function with the given name exists."
- !ruby/struct:SM::Flow::P 
  body: "\\{#mixin_exists mixin-exists($name)} : Returns whether a mixin with the given name exists."
- !ruby/struct:SM::Flow::P 
  body: "\\{#inspect inspect($value)} : Returns the string representation of a value as it would be represented in Sass."
- !ruby/struct:SM::Flow::P 
  body: "\\{#type_of type-of($value)} : Returns the type of a value."
- !ruby/struct:SM::Flow::P 
  body: "\\{#unit unit($number)} : Returns the unit(s) associated with a number."
- !ruby/struct:SM::Flow::P 
  body: "\\{#unitless unitless($number)} : Returns whether a number has units."
- !ruby/struct:SM::Flow::P 
  body: "\\{#comparable comparable($number1, $number2)} : Returns whether two numbers can be added, subtracted, or compared."
- !ruby/struct:SM::Flow::P 
  body: "\\{#call call($name, $args...)} : Dynamically calls a Sass function."
- !ruby/struct:SM::Flow::P 
  body: "## Miscellaneous Functions"
- !ruby/struct:SM::Flow::P 
  body: "\\{#if if($condition, $if-true, $if-false)} : Returns one of two values, depending on whether or not `$condition` is"
- !ruby/struct:SM::Flow::VERB 
  body: "  true.\n"
- !ruby/struct:SM::Flow::P 
  body: "\\{#unique_id unique-id()} : Returns a unique CSS identifier."
- !ruby/struct:SM::Flow::P 
  body: "## Adding Custom Functions"
- !ruby/struct:SM::Flow::P 
  body: "New Sass functions can be added by adding Ruby methods to this module. For example:"
- !ruby/struct:SM::Flow::VERB 
  body: "    module Sass::Script::Functions\n      def reverse(string)\n        assert_type string, :String\n        Sass::Script::Value::String.new(string.value.reverse)\n      end\n      declare :reverse, [:string]\n    end\n"
- !ruby/struct:SM::Flow::P 
  body: Calling {declare} tells Sass the argument names for your function. If omitted, the function will still work, but will not be able to accept keyword arguments. {declare} can also allow your function to take arbitrary keyword arguments.
- !ruby/struct:SM::Flow::P 
  body: There are a few things to keep in mind when modifying this module. First of all, the arguments passed are {Value} objects. Value objects are also expected to be returned. This means that Ruby values must be unwrapped and wrapped.
- !ruby/struct:SM::Flow::P 
  body: Most Value objects support the {Value::Base#value value} accessor for getting their Ruby values. Color objects, though, must be accessed using {Sass::Script::Value::Color#rgb rgb}, {Sass::Script::Value::Color#red red}, {Sass::Script::Value::Color#blue green}, or {Sass::Script::Value::Color#blue blue}.
- !ruby/struct:SM::Flow::P 
  body: Second, making Ruby functions accessible from Sass introduces the temptation to do things like database access within stylesheets. This is generally a bad idea; since Sass files are by default only compiled once, dynamic code is not a great fit.
- !ruby/struct:SM::Flow::P 
  body: If you really, really need to compile Sass on each request, first make sure you have adequate caching set up. Then you can use {Sass::Engine} to render the code, using the {file:SASS_REFERENCE.md#custom-option `options` parameter} to pass in data that {EvaluationContext#options can be accessed} from your Sass functions.
- !ruby/struct:SM::Flow::P 
  body: Within one of the functions in this module, methods of {EvaluationContext} can be used.
- !ruby/struct:SM::Flow::P 
  body: "### Caveats"
- !ruby/struct:SM::Flow::P 
  body: "When creating new {Value} objects within functions, be aware that it's not safe to call {Value::Base#to_s #to_s} (or other methods that use the string representation) on those objects without first setting {Tree::Node#options= the #options attribute}."
- !ruby/struct:SM::Flow::P 
  body: "@comment"
- !ruby/struct:SM::Flow::VERB 
  body: "  rubocop:enable LineLength\n  rubocop:disable ModuleLength\n"
constants: 
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: A class representing a Sass function signature.
  - !ruby/struct:SM::Flow::P 
    body: "@attr args [Array&lt;String&gt;] The names of the arguments to the function. @attr delayed_args [Array&lt;String&gt;] The names of the arguments whose evaluation should be"
  - !ruby/struct:SM::Flow::VERB 
    body: "  delayed.\n"
  - !ruby/struct:SM::Flow::P 
    body: "@attr var_args [Boolean] Whether the function takes a variable number of arguments. @attr var_kwargs [Boolean] Whether the function takes an arbitrary set of keyword arguments."
  name: Signature
  value: Struct.new(:args, :delayed_args, :var_args, :var_kwargs, :deprecated)
full_name: Sass::Script::Functions
includes: []

instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: abs
- !ruby/object:RI::MethodSummary 
  name: adjust_color
- !ruby/object:RI::MethodSummary 
  name: adjust_hue
- !ruby/object:RI::MethodSummary 
  name: alpha
- !ruby/object:RI::MethodSummary 
  name: append
- !ruby/object:RI::MethodSummary 
  name: blue
- !ruby/object:RI::MethodSummary 
  name: call
- !ruby/object:RI::MethodSummary 
  name: ceil
- !ruby/object:RI::MethodSummary 
  name: change_color
- !ruby/object:RI::MethodSummary 
  name: comparable
- !ruby/object:RI::MethodSummary 
  name: complement
- !ruby/object:RI::MethodSummary 
  name: counter
- !ruby/object:RI::MethodSummary 
  name: counters
- !ruby/object:RI::MethodSummary 
  name: darken
- !ruby/object:RI::MethodSummary 
  name: desaturate
- !ruby/object:RI::MethodSummary 
  name: fade_in
- !ruby/object:RI::MethodSummary 
  name: fade_out
- !ruby/object:RI::MethodSummary 
  name: feature_exists
- !ruby/object:RI::MethodSummary 
  name: floor
- !ruby/object:RI::MethodSummary 
  name: function_exists
- !ruby/object:RI::MethodSummary 
  name: global_variable_exists
- !ruby/object:RI::MethodSummary 
  name: grayscale
- !ruby/object:RI::MethodSummary 
  name: green
- !ruby/object:RI::MethodSummary 
  name: hsl
- !ruby/object:RI::MethodSummary 
  name: hsla
- !ruby/object:RI::MethodSummary 
  name: hue
- !ruby/object:RI::MethodSummary 
  name: ie_hex_str
- !ruby/object:RI::MethodSummary 
  name: if
- !ruby/object:RI::MethodSummary 
  name: index
- !ruby/object:RI::MethodSummary 
  name: inspect
- !ruby/object:RI::MethodSummary 
  name: invert
- !ruby/object:RI::MethodSummary 
  name: is_superselector
- !ruby/object:RI::MethodSummary 
  name: join
- !ruby/object:RI::MethodSummary 
  name: keywords
- !ruby/object:RI::MethodSummary 
  name: length
- !ruby/object:RI::MethodSummary 
  name: lighten
- !ruby/object:RI::MethodSummary 
  name: lightness
- !ruby/object:RI::MethodSummary 
  name: list_separator
- !ruby/object:RI::MethodSummary 
  name: map_get
- !ruby/object:RI::MethodSummary 
  name: map_has_key
- !ruby/object:RI::MethodSummary 
  name: map_keys
- !ruby/object:RI::MethodSummary 
  name: map_merge
- !ruby/object:RI::MethodSummary 
  name: map_remove
- !ruby/object:RI::MethodSummary 
  name: map_values
- !ruby/object:RI::MethodSummary 
  name: max
- !ruby/object:RI::MethodSummary 
  name: min
- !ruby/object:RI::MethodSummary 
  name: mix
- !ruby/object:RI::MethodSummary 
  name: mixin_exists
- !ruby/object:RI::MethodSummary 
  name: nth
- !ruby/object:RI::MethodSummary 
  name: opacify
- !ruby/object:RI::MethodSummary 
  name: opacity
- !ruby/object:RI::MethodSummary 
  name: percentage
- !ruby/object:RI::MethodSummary 
  name: quote
- !ruby/object:RI::MethodSummary 
  name: random
- !ruby/object:RI::MethodSummary 
  name: red
- !ruby/object:RI::MethodSummary 
  name: rgb
- !ruby/object:RI::MethodSummary 
  name: rgba
- !ruby/object:RI::MethodSummary 
  name: round
- !ruby/object:RI::MethodSummary 
  name: saturate
- !ruby/object:RI::MethodSummary 
  name: saturation
- !ruby/object:RI::MethodSummary 
  name: scale_color
- !ruby/object:RI::MethodSummary 
  name: selector_append
- !ruby/object:RI::MethodSummary 
  name: selector_extend
- !ruby/object:RI::MethodSummary 
  name: selector_nest
- !ruby/object:RI::MethodSummary 
  name: selector_parse
- !ruby/object:RI::MethodSummary 
  name: selector_replace
- !ruby/object:RI::MethodSummary 
  name: selector_unify
- !ruby/object:RI::MethodSummary 
  name: set_nth
- !ruby/object:RI::MethodSummary 
  name: simple_selectors
- !ruby/object:RI::MethodSummary 
  name: str_index
- !ruby/object:RI::MethodSummary 
  name: str_insert
- !ruby/object:RI::MethodSummary 
  name: str_length
- !ruby/object:RI::MethodSummary 
  name: str_slice
- !ruby/object:RI::MethodSummary 
  name: to_lower_case
- !ruby/object:RI::MethodSummary 
  name: to_upper_case
- !ruby/object:RI::MethodSummary 
  name: transparentize
- !ruby/object:RI::MethodSummary 
  name: type_of
- !ruby/object:RI::MethodSummary 
  name: unique_id
- !ruby/object:RI::MethodSummary 
  name: unit
- !ruby/object:RI::MethodSummary 
  name: unitless
- !ruby/object:RI::MethodSummary 
  name: unquote
- !ruby/object:RI::MethodSummary 
  name: variable_exists
- !ruby/object:RI::MethodSummary 
  name: zip
name: Functions
superclass: 
