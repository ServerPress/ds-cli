--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Merges two maps together into a new map. Keys in `$map2` will take precedence over keys in `$map1`.
- !ruby/struct:SM::Flow::P 
  body: This is the best way to add new values to a map.
- !ruby/struct:SM::Flow::P 
  body: All keys in the returned map that also appear in `$map1` will have the same order as in `$map1`. New keys from `$map2` will be placed at the end of the map.
- !ruby/struct:SM::Flow::P 
  body: Like all map functions, `map-merge()` returns a new map rather than modifying its arguments in place.
- !ruby/struct:SM::Flow::P 
  body: "@example"
- !ruby/struct:SM::Flow::VERB 
  body: "  map-merge((&quot;foo&quot;: 1), (&quot;bar&quot;: 2)) =&gt; (&quot;foo&quot;: 1, &quot;bar&quot;: 2)\n  map-merge((&quot;foo&quot;: 1, &quot;bar&quot;: 2), (&quot;bar&quot;: 3)) =&gt; (&quot;foo&quot;: 1, &quot;bar&quot;: 3)\n"
- !ruby/struct:SM::Flow::P 
  body: "@overload map_merge($map1, $map2)"
- !ruby/struct:SM::Flow::VERB 
  body: "  @param $map1 [Sass::Script::Value::Map]\n  @param $map2 [Sass::Script::Value::Map]\n"
- !ruby/struct:SM::Flow::P 
  body: "@return [Sass::Script::Value::Map] @raise [ArgumentError] if either parameter is not a map"
full_name: Sass::Script::Functions#map_merge
is_singleton: false
name: map_merge
params: (map1, map2)
visibility: public
