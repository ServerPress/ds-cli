--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Mixes two colors together. Specifically, takes the average of each of the RGB components, optionally weighted by the given percentage. The opacity of the colors is also considered when weighting the components.
- !ruby/struct:SM::Flow::P 
  body: The weight specifies the amount of the first color that should be included in the returned color. The default, `50%`, means that half the first color and half the second color should be used. `25%` means that a quarter of the first color and three quarters of the second color should be used.
- !ruby/struct:SM::Flow::P 
  body: "@example"
- !ruby/struct:SM::Flow::VERB 
  body: "  mix(#f00, #00f) =&gt; #7f007f\n  mix(#f00, #00f, 25%) =&gt; #3f00bf\n  mix(rgba(255, 0, 0, 0.5), #00f) =&gt; rgba(63, 0, 191, 0.75)\n"
- !ruby/struct:SM::Flow::P 
  body: "@overload mix($color1, $color2, $weight: 50%)"
- !ruby/struct:SM::Flow::VERB 
  body: "  @param $color1 [Sass::Script::Value::Color]\n  @param $color2 [Sass::Script::Value::Color]\n  @param $weight [Sass::Script::Value::Number] The relative weight of each\n    color. Closer to `0%` gives more weight to `$color1`, closer to `100%`\n    gives more weight to `$color2`\n"
- !ruby/struct:SM::Flow::P 
  body: "@return [Sass::Script::Value::Color] @raise [ArgumentError] if `$weight` is out of bounds or any parameter is"
- !ruby/struct:SM::Flow::VERB 
  body: "  the wrong type\n"
full_name: Sass::Script::Functions#mix
is_singleton: false
name: mix
params: (color1, color2, weight = number(50))
visibility: public
