--- !ruby/object:RI::ClassDescription 
attributes: []

class_methods: 
- !ruby/object:RI::MethodSummary 
  name: new
comment: 
- !ruby/struct:SM::Flow::P 
  body: The lexical analyzer for SassScript. It takes a raw string and converts it to individual tokens that are easier to parse.
constants: 
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: A struct containing information about an individual token.
  - !ruby/struct:SM::Flow::P 
    body: "`type`: \\[`Symbol`\\] : The type of token."
  - !ruby/struct:SM::Flow::P 
    body: "`value`: \\[`Object`\\] : The Ruby object corresponding to the value of the token."
  - !ruby/struct:SM::Flow::P 
    body: "`source_range`: \\[`Sass::Source::Range`\\] : The range in the source file in which the token appeared."
  - !ruby/struct:SM::Flow::P 
    body: "`pos`: \\[`Fixnum`\\] : The scanner position at which the SassScript token appeared."
  name: Token
  value: Struct.new(:type, :value, :source_range, :pos)
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: A hash from operator strings to the corresponding token types.
  name: OPERATORS
  value: "{         '+' => :plus,         '-' => :minus,         '*' => :times,         '/' => :div,         '%' => :mod,         '=' => :single_eq,         ':' => :colon,         '(' => :lparen,         ')' => :rparen,         ',' => :comma,         'and' => :and,         'or' => :or,         'not' => :not,         '==' => :eq,         '!=' => :neq,         '>=' => :gte,         '<=' => :lte,         '>' => :gt,         '<' => :lt,         '#{' => :begin_interpolation,         '}' => :end_interpolation,         ';' => :semicolon,         '{' => :lcurly,         '...' => :splat,       }"
- !ruby/object:RI::Constant 
  comment: 
  name: OPERATORS_REVERSE
  value: Sass::Util.map_hash(OPERATORS) {|k, v| [v, k]}
- !ruby/object:RI::Constant 
  comment: 
  name: TOKEN_NAMES
  value: Sass::Util.map_hash(OPERATORS_REVERSE) {|k, v| [k, v.inspect]}.merge(         :const => "variable (e.g. $foo)",         :ident => "identifier (e.g. middle)")
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: A list of operator strings ordered with longer names first so that `&gt;` and `&lt;` don't clobber `&gt;=` and `&lt;=`.
  name: OP_NAMES
  value: OPERATORS.keys.sort_by {|o| -o.size}
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: A sub-list of {OP_NAMES} that only includes operators with identifier names.
  name: IDENT_OP_NAMES
  value: OP_NAMES.select {|k, _v| k =~ /^\w+/}
- !ruby/object:RI::Constant 
  comment: 
  name: PARSEABLE_NUMBER
  value: /(?:(\d*\.\d+)|(\d+))(?:[eE]([+-]?\d+))?(#{UNIT})?/
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: A hash of regular expressions that are used for tokenizing.
  name: REGULAR_EXPRESSIONS
  value: "{         :whitespace => /\\s+/,         :comment => COMMENT,         :single_line_comment => SINGLE_LINE_COMMENT,         :variable => /(\\$)(#{IDENT})/,         :ident => /(#{IDENT})(\\()?/,         :number => PARSEABLE_NUMBER,         :unary_minus_number => /-#{PARSEABLE_NUMBER}/,         :color => HEXCOLOR,         :id => /##{IDENT}/,         :selector => /&/,         :ident_op => /(#{Regexp.union(*IDENT_OP_NAMES.map do |s|           Regexp.new(Regexp.escape(s) + \"(?!#{NMCHAR}|\\Z)\")         end)})/,         :op => /(#{Regexp.union(*OP_NAMES)})/,       }"
- !ruby/object:RI::Constant 
  comment: 
  - !ruby/struct:SM::Flow::P 
    body: A hash of regular expressions that are used for tokenizing strings.
  - !ruby/struct:SM::Flow::P 
    body: The key is a `[Symbol, Boolean]` pair. The symbol represents which style of quotation to use, while the boolean represents whether or not the string is following an interpolated segment.
  name: STRING_REGULAR_EXPRESSIONS
  value: "{         :double => {           false => string_re('\"', '\"'),           true => string_re('', '\"')"
full_name: Sass::Script::Lexer
includes: 
- !ruby/object:RI::IncludedModule 
  name: Sass::SCSS::RX
instance_methods: 
- !ruby/object:RI::MethodSummary 
  name: after_interpolation?
- !ruby/object:RI::MethodSummary 
  name: char
- !ruby/object:RI::MethodSummary 
  name: done?
- !ruby/object:RI::MethodSummary 
  name: expected!
- !ruby/object:RI::MethodSummary 
  name: line
- !ruby/object:RI::MethodSummary 
  name: next
- !ruby/object:RI::MethodSummary 
  name: offset
- !ruby/object:RI::MethodSummary 
  name: peek
- !ruby/object:RI::MethodSummary 
  name: str
- !ruby/object:RI::MethodSummary 
  name: unpeek!
- !ruby/object:RI::MethodSummary 
  name: whitespace?
name: Lexer
superclass: Object
