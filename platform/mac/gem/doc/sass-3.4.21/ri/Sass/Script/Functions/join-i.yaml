--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Joins together two lists into one.
- !ruby/struct:SM::Flow::P 
  body: Unless `$separator` is passed, if one list is comma-separated and one is space-separated, the first parameter's separator is used for the resulting list. If both lists have fewer than two items, spaces are used for the resulting list.
- !ruby/struct:SM::Flow::P 
  body: Like all list functions, `join()` returns a new list rather than modifying its arguments in place.
- !ruby/struct:SM::Flow::P 
  body: "@example"
- !ruby/struct:SM::Flow::VERB 
  body: "  join(10px 20px, 30px 40px) =&gt; 10px 20px 30px 40px\n  join((blue, red), (#abc, #def)) =&gt; blue, red, #abc, #def\n  join(10px, 20px) =&gt; 10px 20px\n  join(10px, 20px, comma) =&gt; 10px, 20px\n  join((blue, red), (#abc, #def), space) =&gt; blue red #abc #def\n"
- !ruby/struct:SM::Flow::P 
  body: "@overload join($list1, $list2, $separator: auto)"
- !ruby/struct:SM::Flow::VERB 
  body: "  @param $list1 [Sass::Script::Value::Base]\n  @param $list2 [Sass::Script::Value::Base]\n  @param $separator [Sass::Script::Value::String] The list separator to use.\n    If this is `comma` or `space`, that separator will be used. If this is\n    `auto` (the default), the separator is determined as explained above.\n"
- !ruby/struct:SM::Flow::P 
  body: "@return [Sass::Script::Value::List]"
full_name: Sass::Script::Functions#join
is_singleton: false
name: join
params: (list1, list2, separator = identifier("auto"))
visibility: public
