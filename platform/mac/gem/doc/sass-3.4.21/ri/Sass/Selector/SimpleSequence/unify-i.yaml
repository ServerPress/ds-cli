--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Unifies this selector with another {SimpleSequence}, returning another `SimpleSequence` that is a subselector of both input selectors.
- !ruby/struct:SM::Flow::P 
  body: "@param other [SimpleSequence] @return [SimpleSequence, nil] A {SimpleSequence} matching both `sels` and this selector,"
- !ruby/struct:SM::Flow::VERB 
  body: "  or `nil` if this is impossible (e.g. unifying `#foo` and `#bar`)\n"
- !ruby/struct:SM::Flow::P 
  body: "@raise [Sass::SyntaxError] If this selector cannot be unified."
- !ruby/struct:SM::Flow::VERB 
  body: "  This will only ever occur when a dynamic selector,\n  such as {Parent} or {Interpolation}, is used in unification.\n  Since these selectors should be resolved\n  by the time extension and unification happen,\n  this exception will only ever be raised as a result of programmer error\n"
full_name: Sass::Selector::SimpleSequence#unify
is_singleton: false
name: unify
params: (other)
visibility: public
