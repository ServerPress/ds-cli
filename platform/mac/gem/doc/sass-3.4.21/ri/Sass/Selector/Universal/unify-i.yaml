--- !ruby/object:RI::MethodDescription 
aliases: []

block_params: 
comment: 
- !ruby/struct:SM::Flow::P 
  body: Unification of a universal selector is somewhat complicated, especially when a namespace is specified. If there is no namespace specified or any namespace is specified (namespace `&quot;*&quot;`), then `sel` is returned without change (unless it's empty, in which case `&quot;*&quot;` is required).
- !ruby/struct:SM::Flow::P 
  body: If a namespace is specified but `sel` does not specify a namespace, then the given namespace is applied to `sel`, either by adding this {Universal} selector or applying this namespace to an existing {Element} selector.
- !ruby/struct:SM::Flow::P 
  body: If both this selector <b>and</b> `sel` specify namespaces, those namespaces are unified via {Simple#unify_namespaces} and the unified namespace is used, if possible.
- !ruby/struct:SM::Flow::P 
  body: "@todo There are lots of cases that this documentation specifies;"
- !ruby/struct:SM::Flow::VERB 
  body: "  make sure we thoroughly test **all of them**.\n"
- !ruby/struct:SM::Flow::P 
  body: "@todo Keep track of whether a default namespace has been declared"
- !ruby/struct:SM::Flow::VERB 
  body: "  and handle namespace-unspecified selectors accordingly.\n"
- !ruby/struct:SM::Flow::P 
  body: "@todo If any branch of a CommaSequence ends up being just `&quot;*&quot;`,"
- !ruby/struct:SM::Flow::VERB 
  body: "  then all other branches should be eliminated\n"
- !ruby/struct:SM::Flow::P 
  body: "@see Selector#unify"
full_name: Sass::Selector::Universal#unify
is_singleton: false
name: unify
params: (sels)
visibility: public
